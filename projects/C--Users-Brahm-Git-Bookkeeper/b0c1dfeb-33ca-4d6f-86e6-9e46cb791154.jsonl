{"type":"summary","summary":"Document Organizer Feature User Stories Development","leafUuid":"6a227e5b-46bf-4488-8de3-699566af57dc"}
{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Bookkeeper","sessionId":"b0c1dfeb-33ca-4d6f-86e6-9e46cb791154","version":"1.0.96","gitBranch":"main","type":"user","message":{"role":"user","content":"Can you find this file:\\\n\\\n.plans\\1. Ideas\\Organizer-Feature-Reference.md"},"uuid":"0fe951b8-0592-4e11-b4a5-309e937acae7","timestamp":"2025-08-29T14:26:26.503Z"}
{"parentUuid":"0fe951b8-0592-4e11-b4a5-309e937acae7","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Bookkeeper","sessionId":"b0c1dfeb-33ca-4d6f-86e6-9e46cb791154","version":"1.0.96","gitBranch":"main","message":{"id":"msg_01N8Dw8hk9VQeFN2otBZnVri","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01LxTpn3WdxPKGWRQJUNAU1M","name":"Read","input":{"file_path":"C:\\Users\\Brahm\\Git\\Bookkeeper\\.plans\\1. Ideas\\Organizer-Feature-Reference.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":22516,"cache_read_input_tokens":0,"cache_creation":{"ephemeral_5m_input_tokens":22516,"ephemeral_1h_input_tokens":0},"output_tokens":81,"service_tier":"standard"}},"requestId":"req_011CScA1wMCVCkv7EDNskxiW","type":"assistant","uuid":"8c19052e-ab59-41c5-9dc8-37f399165a54","timestamp":"2025-08-29T14:26:31.154Z"}
{"parentUuid":"8c19052e-ab59-41c5-9dc8-37f399165a54","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Bookkeeper","sessionId":"b0c1dfeb-33ca-4d6f-86e6-9e46cb791154","version":"1.0.96","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01LxTpn3WdxPKGWRQJUNAU1M","type":"tool_result","content":"     1→# Organizer Feature Reference Document\n     2→\n     3→## Overview\n     4→\n     5→The **Organizer** is an AI-powered document discovery and organization system designed to help users find previously uploaded files through intelligent categorization and flexible viewing interfaces. Rather than traditional folder storage, it uses a tag-based flat storage system with virtual folder presentations optimized for legal document management workflows.\n     6→\n     7→## Core Purpose\n     8→\n     9→**Primary Goal**: Enable users to quickly locate previously uploaded documents through intuitive search and categorization methods.\n    10→\n    11→**Target Use Cases**:\n    12→- Finding bank statements by institution and account details\n    13→- Locating photographs by location and date\n    14→- Tracking document relationships (amendments, responses to letters)\n    15→- Organizing documents for legal disclosure and trial preparation\n    16→\n    17→## Architecture Overview\n    18→\n    19→### Storage Strategy\n    20→- **Flat File Storage**: All files stored in single Firebase Storage folder\n    21→- **Tag-Based Organization**: Organization achieved through metadata tags, not physical folders\n    22→- **Virtual Folder Presentation**: Tags dynamically presented as familiar folder structures\n    23→\n    24→### Processing Workflow\n    25→1. **Manual Trigger**: Users select folders/batches for AI processing (not automatic)\n    26→2. **AI Categorization**: Gemini multimodal API processes all file types uniformly\n    27→3. **Confidence-Based Routing**: High confidence → auto-categorized, low confidence → human review\n    28→4. **Context-Enhanced Processing**: Medium confidence files use previously categorized documents as examples\n    29→\n    30→## Tag System Design\n    31→\n    32→### Category Structure\n    33→- **Categories**: User-defined groupings (e.g., \"Document Type\", \"Date\", \"Institution\")\n    34→- **Tags**: Mutually exclusive options within each category (e.g., \"Invoice\", \"Statement\", \"Contract\")\n    35→- **Color Coding**: Each category assigned distinct colors with gradient/border variations for scalability\n    36→\n    37→### Tag Management\n    38→- **User-Defined Categories**: Users create custom categories with their own tag options\n    39→- **Add/Delete Operations**: \n    40→  - Adding tags prompts for reprocessing existing documents\n    41→  - Deleting tags requires reassignment decision for affected files\n    42→- **Merge Capability**: Achieved through delete operations with reprocessing options\n    43→\n    44→### AI Processing Approach\n    45→- **Unified Processing**: All file types processed through Gemini's multimodal capabilities\n    46→- **No File-Type Optimization**: Avoid premature optimization that becomes obsolete as AI improves\n    47→- **No Size Limits**: Large files processed normally; testing will determine practical constraints\n    48→- **Two-Pass Algorithm**:\n    49→  1. **High Confidence Pass**: >90% confidence files categorized immediately\n    50→  2. **Context-Enhanced Pass**: Medium confidence files use previously categorized examples\n    51→\n    52→## User Interface Design\n    53→\n    54→### Flat View (Default)\n    55→- **File List**: Filename, file extension, document date, all applicable tags\n    56→- **Color-Coded Tags**: Tags colored by category for visual grouping\n    57→- **Progressive Disclosure**: Right-click any tag → \"Show in Folders\" creates virtual folder structure\n    58→\n    59→### Virtual Folder View\n    60→- **Dynamic Hierarchy**: User-selected tag categories become folder levels\n    61→- **Filtered Display**: Only relevant tags shown (folder context already established)\n    62→- **Navigation**: Breadcrumbs + back buttons for easy hierarchy traversal\n    63→- **Instant Reorganization**: Change folder hierarchy instantly (just re-presenting same tag data)\n    64→\n    65→### File Actions (KISS Principle)\n    66→- **View**: Document viewer with zoom, pagination (PDFs)\n    67→- **Print to PDF**: BATES-stamped output (not raw download)\n    68→- **No Thumbnails**: Keep interface fast and simple for document-focused workflow\n    69→\n    70→## Human Review System\n    71→\n    72→### Uncertainty Handling\n    73→- **Review Folder**: \"Human Review Required\" category for uncertain classifications\n    74→- **Confidence Thresholds**: User-adjustable sensitivity settings\n    75→- **Review Interface**: \n    76→  - Top 3 AI suggestions with confidence percentages\n    77→  - \"Other\" option for complete misclassification\n    78→  - \"Create New Category\" for expanding taxonomy\n    79→\n    80→### Learning Approach\n    81→- **No Model Training**: System doesn't fine-tune or retrain AI models\n    82→- **Context Enhancement**: Uses human-reviewed examples as context for future medium-confidence decisions\n    83→- **Human Priority**: Human classifications weighted higher than AI classifications in context examples\n    84→\n    85→## BATES Numbering System\n    86→\n    87→### Legal Workflow Integration\n    88→- **Print-Only Access**: No raw downloads; only BATES-stamped PDF prints\n    89→- **Disclosure Control**: Prevent confusion about document processing status in legal proceedings\n    90→- **Format Flexibility**: [Optional Letter Prefix]-[Optional Document Number]-[Sequential Number]\n    91→  - Examples: \"Roberts-0001\", \"1.22-0003\", \"Plaintiff-1.22-0003\"\n    92→\n    93→### Numbering Rules\n    94→- **Sequential by Matter**: Each prefix/matter maintains independent sequential numbering\n    95→- **Immutable Assignment**: BATES numbers \"pencilled in\" after processing, \"inked\" after first print\n    96→- **Reprint Consistency**: Same document always prints same BATES number\n    97→- **No Reassignment**: Once printed, BATES number permanently locked\n    98→- **Reset Protection**: New prefix required for numbering resets; old prefixes never reused\n    99→\n   100→### Deduplication Integration\n   101→- **Hash-Based Prevention**: Upload system prevents duplicate file uploads\n   102→- **Near-Duplicate Handling**: Similar but different files each receive unique BATES numbers\n   103→\n   104→## Technical Implementation Approach\n   105→\n   106→### AI Integration\n   107→- **Primary API**: Google Gemini for multimodal document processing\n   108→- **Processing Strategy**: Let Gemini handle file-type optimization internally\n   109→- **Future-Proof Design**: Avoid custom optimization that becomes obsolete as AI improves\n   110→\n   111→### Data Storage\n   112→- **Firebase Integration**: Leverage existing authentication and storage infrastructure\n   113→- **Metadata Storage**: Firestore documents track tags, categories, processing history, BATES assignments\n   114→- **Team Isolation**: All data scoped by team ID (solo users: teamId === userId)\n   115→\n   116→### Performance Considerations\n   117→- **Background Processing**: AI calls handled asynchronously with progress tracking\n   118→- **Instant UI Updates**: Virtual folder reorganization requires no backend processing\n   119→- **Scalable Visuals**: Gradient colors and borders provide unlimited category combinations\n   120→\n   121→## User Stories\n   122→\n   123→### Document Discovery Stories\n   124→\n   125→**As a lawyer, I want to find bank statements by institution and account details**\n   126→- Given I have uploaded hundreds of financial documents\n   127→- When I need to find Royal Bank of Canada statements for account ending in 334\n   128→- Then I can use tags to filter by \"Institution: RBC\" and \"Account: ...334\"\n   129→- So that I can quickly locate the specific statements without manually searching through files\n   130→\n   131→**As a legal professional, I want to locate photographs by location and date**\n   132→- Given I have uploaded many photographs as evidence\n   133→- When I need to find photos taken at Whistler Mountain in June 2017\n   134→- Then I can filter by \"Location: Whistler Mountain\" and \"Date: June 2017\" tags\n   135→- So that I can present the relevant photographic evidence\n   136→\n   137→**As a lawyer, I want to track document relationships and follow-ups**\n   138→- Given I sent a letter requesting information and never received a response\n   139→- When I need to follow up on unanswered correspondence\n   140→- Then I can search for my original letter and check for any response documents\n   141→- So that I can determine how long the request has been pending and take appropriate action\n   142→\n   143→**As a legal professional, I want to find all amendments to a contract**\n   144→- Given I have a promissory note with multiple amendments\n   145→- When I need to review all versions and modifications\n   146→- Then I can find the original document and all related amendment documents\n   147→- So that I have a complete view of the document's evolution\n   148→\n   149→### Category Management Stories\n   150→\n   151→**As a user, I want to create custom document categories**\n   152→- Given I have unique document types specific to my practice\n   153→- When I create a new \"Document Type\" category\n   154→- Then I can define custom tags like \"Affidavit\", \"Motion\", \"Brief\"\n   155→- So that my organization system matches my specific workflow needs\n   156→\n   157→**As a user, I want to add new tag options to existing categories**\n   158→- Given I encounter a new type of document not in my current system\n   159→- When I add a \"Receipt\" tag to my \"Document Type\" category\n   160→- Then the system asks if I want to reprocess existing documents\n   161→- So that previously uploaded receipts can be properly categorized\n   162→\n   163→**As a user, I want to merge duplicate category options**\n   164→- Given I created both \"Invoice\" and \"Bill\" tags but realize they're the same\n   165→- When I delete the \"Bill\" tag and choose to reprocess affected documents\n   166→- Then all documents previously tagged as \"Bill\" are reconsidered for \"Invoice\"\n   167→- So that I can consolidate my categorization scheme without losing data\n   168→\n   169→### AI Processing Stories\n   170→\n   171→**As a user, I want to process documents in batches by category type**\n   172→- Given I have uploaded a folder of mixed financial documents\n   173→- When I select the folder and choose \"Document Type\" processing\n   174→- Then the AI categorizes documents as statements, invoices, receipts, etc.\n   175→- So that I can organize large batches efficiently without manual sorting\n   176→\n   177→**As a user, I want to review uncertain AI classifications**\n   178→- Given the AI is less than 90% confident about some document categorizations\n   179→- When I access the \"Human Review Required\" folder\n   180→- Then I see the top 3 AI suggestions with confidence percentages\n   181→- So that I can quickly correct misclassifications and improve system accuracy\n   182→\n   183→**As a user, I want the system to learn from my corrections**\n   184→- Given I have manually classified several uncertain documents\n   185→- When the AI processes similar documents with medium confidence\n   186→- Then it uses my previous classifications as context examples\n   187→- So that the system becomes more accurate for my specific document types\n   188→\n   189→### Interface Navigation Stories\n   190→\n   191→**As a user, I want to start with a comprehensive flat view**\n   192→- Given I have many documents with various tags\n   193→- When I first access the organizer\n   194→- Then I see all files with color-coded tags by category\n   195→- So that I can understand my entire document collection at a glance\n   196→\n   197→**As a user, I want to create folder views by clicking on tags**\n   198→- Given I see documents with various \"Document Type\" tags in flat view\n   199→- When I right-click on a \"Statement\" tag and select \"Show in Folders\"\n   200→- Then my view reorganizes into folders by document type\n   201→- So that I can browse documents in a familiar folder structure\n   202→\n   203→**As a user, I want to drill down through multiple folder levels**\n   204→- Given I have organized by \"Document Type\" and want to sub-organize by date\n   205→- When I right-click on a \"2023\" tag and select \"Show in Folders\"\n   206→- Then I get a hierarchy like \"Statement > 2023 > March\"\n   207→- So that I can narrow down to very specific document sets\n   208→\n   209→**As a user, I want to instantly reorganize my folder hierarchy**\n   210→- Given I have documents organized by Type > Date\n   211→- When I decide I want them organized by Date > Type instead\n   212→- Then the reorganization happens instantly without processing delays\n   213→- So that I can experiment with different organizational schemes efficiently\n   214→\n   215→### BATES Numbering Stories\n   216→\n   217→**As a lawyer, I want to print documents with BATES stamps for disclosure**\n   218→- Given I need to provide document disclosure for trial\n   219→- When I print any document from the organizer\n   220→- Then it includes a BATES number like \"Roberts-0001\" \n   221→- So that I can track disclosed documents and prevent disclosure confusion\n   222→\n   223→**As a legal professional, I want consistent BATES numbering per matter**\n   224→- Given I'm working on multiple legal matters\n   225→- When I set different prefixes for each case (e.g., \"Smith-\", \"Jones-\")\n   226→- Then each case maintains its own sequential numbering\n   227→- So that documents are properly organized by matter\n   228→\n   229→**As a lawyer, I want permanent BATES number assignment**\n   230→- Given I've printed a document with BATES number \"Roberts-0001\"\n   231→- When I print the same document again later\n   232→- Then it always prints with the same BATES number\n   233→- So that I maintain consistency in legal proceedings\n   234→\n   235→**As a user, I want protection against BATES numbering mistakes**\n   236→- Given I need to restart my BATES numbering due to an error\n   237→- When I create a new prefix for the same matter\n   238→- Then the old prefix is permanently retired and cannot be reused\n   239→- So that there's no confusion about which numbering sequence is current\n   240→\n   241→### Human Review Interface Stories\n   242→\n   243→**As a user, I want simple review options for uncertain documents**\n   244→- Given the AI presents a document with uncertain classification\n   245→- When I see the 3 AI suggestions plus \"Other\" and \"Create New Category\" buttons\n   246→- Then I can quickly select the correct option or create a new one\n   247→- So that document review is fast and doesn't interrupt my workflow\n   248→\n   249→**As a user, I want to create new categories during review**\n   250→- Given I encounter a document type not in my current system\n   251→- When I click \"Create New Category\" during human review\n   252→- Then the system asks if I want to reprocess other documents for this new category\n   253→- So that I can expand my taxonomy as I discover new document types\n   254→\n   255→### Legal Workflow Stories\n   256→\n   257→**As a lawyer, I want to prevent raw document downloads**\n   258→- Given clients or opposing parties might create confusion with untracked copies\n   259→- When I access any document in the organizer\n   260→- Then I can only print BATES-stamped versions, not download raw files\n   261→- So that all document copies in circulation are properly tracked and identified\n   262→\n   263→**As a legal professional, I want to track document processing history**\n   264→- Given I need to verify whether documents have been properly processed\n   265→- When I review any document's metadata\n   266→- Then I can see whether it was classified by AI or human review\n   267→- So that I can ensure quality control in my document management process\n   268→\n   269→## User Experience Flow\n   270→\n   271→### Initial Setup\n   272→1. User uploads documents through existing upload feature\n   273→2. Documents appear in flat view with basic metadata\n   274→3. User creates categories and defines tag options\n   275→4. User selects document batches for AI processing\n   276→\n   277→### Processing Workflow\n   278→1. User selects folder/batch and processing category\n   279→2. AI processes documents with confidence-based routing\n   280→3. High confidence: Auto-categorized\n   281→4. Medium confidence: Context-enhanced processing using previous examples\n   282→5. Low confidence: Routed to human review folder\n   283→6. User reviews uncertain classifications via simple 5-button interface\n   284→\n   285→### Organization and Discovery\n   286→1. User starts in flat view seeing all tags\n   287→2. Right-click any tag → \"Show in Folders\" to create hierarchy\n   288→3. Navigate through virtual folder structure\n   289→4. Find target document and view/print with BATES numbering\n   290→\n   291→## Success Metrics\n   292→\n   293→### User Efficiency\n   294→- Time to locate specific documents\n   295→- Reduction in manual file organization effort\n   296→- Accuracy of AI categorization after context enhancement\n   297→\n   298→### Legal Workflow Support\n   299→- Document disclosure completeness\n   300→- BATES numbering consistency\n   301→- Prevention of duplicate processing confusion\n   302→\n   303→### System Performance\n   304→- AI processing accuracy by confidence threshold\n   305→- User override rates in human review\n   306→- Virtual folder reorganization response times\n   307→\n   308→## Future Enhancements\n   309→\n   310→### Automation Options\n   311→- Optional automatic processing mode when AI reliability improves\n   312→- User-configurable automation rules and triggers\n   313→\n   314→### Advanced Features\n   315→- Cross-document relationship tracking\n   316→- Bulk download with virtual folder structure preservation\n   317→- Integration with external legal case management systems\n   318→\n   319→### Scalability\n   320→- Multi-user team support (extending solo team architecture)\n   321→- Advanced search across tag combinations\n   322→- Audit trails for document access and modifications\n   323→\n   324→## Technical Dependencies\n   325→\n   326→### External Services\n   327→- Google Gemini API for multimodal document processing\n   328→- Firebase Auth/Firestore/Storage for data management\n   329→\n   330→### Existing Codebase Integration\n   331→- Builds on established upload feature and deduplication system\n   332→- Leverages existing Vue 3/Vuetify component architecture\n   333→- Integrates with solo team authentication model\n   334→\n   335→### Development Approach\n   336→- Follow KISS principle throughout implementation\n   337→- Prefer simple solutions over premature optimization\n   338→- Focus on legal workflow requirements and user experience\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"6cc268cd-e1ff-40fd-a3a3-a7c14fb41ed5","timestamp":"2025-08-29T14:26:31.184Z","toolUseResult":{"type":"text","file":{"filePath":"C:\\Users\\Brahm\\Git\\Bookkeeper\\.plans\\1. Ideas\\Organizer-Feature-Reference.md","content":"# Organizer Feature Reference Document\n\n## Overview\n\nThe **Organizer** is an AI-powered document discovery and organization system designed to help users find previously uploaded files through intelligent categorization and flexible viewing interfaces. Rather than traditional folder storage, it uses a tag-based flat storage system with virtual folder presentations optimized for legal document management workflows.\n\n## Core Purpose\n\n**Primary Goal**: Enable users to quickly locate previously uploaded documents through intuitive search and categorization methods.\n\n**Target Use Cases**:\n- Finding bank statements by institution and account details\n- Locating photographs by location and date\n- Tracking document relationships (amendments, responses to letters)\n- Organizing documents for legal disclosure and trial preparation\n\n## Architecture Overview\n\n### Storage Strategy\n- **Flat File Storage**: All files stored in single Firebase Storage folder\n- **Tag-Based Organization**: Organization achieved through metadata tags, not physical folders\n- **Virtual Folder Presentation**: Tags dynamically presented as familiar folder structures\n\n### Processing Workflow\n1. **Manual Trigger**: Users select folders/batches for AI processing (not automatic)\n2. **AI Categorization**: Gemini multimodal API processes all file types uniformly\n3. **Confidence-Based Routing**: High confidence → auto-categorized, low confidence → human review\n4. **Context-Enhanced Processing**: Medium confidence files use previously categorized documents as examples\n\n## Tag System Design\n\n### Category Structure\n- **Categories**: User-defined groupings (e.g., \"Document Type\", \"Date\", \"Institution\")\n- **Tags**: Mutually exclusive options within each category (e.g., \"Invoice\", \"Statement\", \"Contract\")\n- **Color Coding**: Each category assigned distinct colors with gradient/border variations for scalability\n\n### Tag Management\n- **User-Defined Categories**: Users create custom categories with their own tag options\n- **Add/Delete Operations**: \n  - Adding tags prompts for reprocessing existing documents\n  - Deleting tags requires reassignment decision for affected files\n- **Merge Capability**: Achieved through delete operations with reprocessing options\n\n### AI Processing Approach\n- **Unified Processing**: All file types processed through Gemini's multimodal capabilities\n- **No File-Type Optimization**: Avoid premature optimization that becomes obsolete as AI improves\n- **No Size Limits**: Large files processed normally; testing will determine practical constraints\n- **Two-Pass Algorithm**:\n  1. **High Confidence Pass**: >90% confidence files categorized immediately\n  2. **Context-Enhanced Pass**: Medium confidence files use previously categorized examples\n\n## User Interface Design\n\n### Flat View (Default)\n- **File List**: Filename, file extension, document date, all applicable tags\n- **Color-Coded Tags**: Tags colored by category for visual grouping\n- **Progressive Disclosure**: Right-click any tag → \"Show in Folders\" creates virtual folder structure\n\n### Virtual Folder View\n- **Dynamic Hierarchy**: User-selected tag categories become folder levels\n- **Filtered Display**: Only relevant tags shown (folder context already established)\n- **Navigation**: Breadcrumbs + back buttons for easy hierarchy traversal\n- **Instant Reorganization**: Change folder hierarchy instantly (just re-presenting same tag data)\n\n### File Actions (KISS Principle)\n- **View**: Document viewer with zoom, pagination (PDFs)\n- **Print to PDF**: BATES-stamped output (not raw download)\n- **No Thumbnails**: Keep interface fast and simple for document-focused workflow\n\n## Human Review System\n\n### Uncertainty Handling\n- **Review Folder**: \"Human Review Required\" category for uncertain classifications\n- **Confidence Thresholds**: User-adjustable sensitivity settings\n- **Review Interface**: \n  - Top 3 AI suggestions with confidence percentages\n  - \"Other\" option for complete misclassification\n  - \"Create New Category\" for expanding taxonomy\n\n### Learning Approach\n- **No Model Training**: System doesn't fine-tune or retrain AI models\n- **Context Enhancement**: Uses human-reviewed examples as context for future medium-confidence decisions\n- **Human Priority**: Human classifications weighted higher than AI classifications in context examples\n\n## BATES Numbering System\n\n### Legal Workflow Integration\n- **Print-Only Access**: No raw downloads; only BATES-stamped PDF prints\n- **Disclosure Control**: Prevent confusion about document processing status in legal proceedings\n- **Format Flexibility**: [Optional Letter Prefix]-[Optional Document Number]-[Sequential Number]\n  - Examples: \"Roberts-0001\", \"1.22-0003\", \"Plaintiff-1.22-0003\"\n\n### Numbering Rules\n- **Sequential by Matter**: Each prefix/matter maintains independent sequential numbering\n- **Immutable Assignment**: BATES numbers \"pencilled in\" after processing, \"inked\" after first print\n- **Reprint Consistency**: Same document always prints same BATES number\n- **No Reassignment**: Once printed, BATES number permanently locked\n- **Reset Protection**: New prefix required for numbering resets; old prefixes never reused\n\n### Deduplication Integration\n- **Hash-Based Prevention**: Upload system prevents duplicate file uploads\n- **Near-Duplicate Handling**: Similar but different files each receive unique BATES numbers\n\n## Technical Implementation Approach\n\n### AI Integration\n- **Primary API**: Google Gemini for multimodal document processing\n- **Processing Strategy**: Let Gemini handle file-type optimization internally\n- **Future-Proof Design**: Avoid custom optimization that becomes obsolete as AI improves\n\n### Data Storage\n- **Firebase Integration**: Leverage existing authentication and storage infrastructure\n- **Metadata Storage**: Firestore documents track tags, categories, processing history, BATES assignments\n- **Team Isolation**: All data scoped by team ID (solo users: teamId === userId)\n\n### Performance Considerations\n- **Background Processing**: AI calls handled asynchronously with progress tracking\n- **Instant UI Updates**: Virtual folder reorganization requires no backend processing\n- **Scalable Visuals**: Gradient colors and borders provide unlimited category combinations\n\n## User Stories\n\n### Document Discovery Stories\n\n**As a lawyer, I want to find bank statements by institution and account details**\n- Given I have uploaded hundreds of financial documents\n- When I need to find Royal Bank of Canada statements for account ending in 334\n- Then I can use tags to filter by \"Institution: RBC\" and \"Account: ...334\"\n- So that I can quickly locate the specific statements without manually searching through files\n\n**As a legal professional, I want to locate photographs by location and date**\n- Given I have uploaded many photographs as evidence\n- When I need to find photos taken at Whistler Mountain in June 2017\n- Then I can filter by \"Location: Whistler Mountain\" and \"Date: June 2017\" tags\n- So that I can present the relevant photographic evidence\n\n**As a lawyer, I want to track document relationships and follow-ups**\n- Given I sent a letter requesting information and never received a response\n- When I need to follow up on unanswered correspondence\n- Then I can search for my original letter and check for any response documents\n- So that I can determine how long the request has been pending and take appropriate action\n\n**As a legal professional, I want to find all amendments to a contract**\n- Given I have a promissory note with multiple amendments\n- When I need to review all versions and modifications\n- Then I can find the original document and all related amendment documents\n- So that I have a complete view of the document's evolution\n\n### Category Management Stories\n\n**As a user, I want to create custom document categories**\n- Given I have unique document types specific to my practice\n- When I create a new \"Document Type\" category\n- Then I can define custom tags like \"Affidavit\", \"Motion\", \"Brief\"\n- So that my organization system matches my specific workflow needs\n\n**As a user, I want to add new tag options to existing categories**\n- Given I encounter a new type of document not in my current system\n- When I add a \"Receipt\" tag to my \"Document Type\" category\n- Then the system asks if I want to reprocess existing documents\n- So that previously uploaded receipts can be properly categorized\n\n**As a user, I want to merge duplicate category options**\n- Given I created both \"Invoice\" and \"Bill\" tags but realize they're the same\n- When I delete the \"Bill\" tag and choose to reprocess affected documents\n- Then all documents previously tagged as \"Bill\" are reconsidered for \"Invoice\"\n- So that I can consolidate my categorization scheme without losing data\n\n### AI Processing Stories\n\n**As a user, I want to process documents in batches by category type**\n- Given I have uploaded a folder of mixed financial documents\n- When I select the folder and choose \"Document Type\" processing\n- Then the AI categorizes documents as statements, invoices, receipts, etc.\n- So that I can organize large batches efficiently without manual sorting\n\n**As a user, I want to review uncertain AI classifications**\n- Given the AI is less than 90% confident about some document categorizations\n- When I access the \"Human Review Required\" folder\n- Then I see the top 3 AI suggestions with confidence percentages\n- So that I can quickly correct misclassifications and improve system accuracy\n\n**As a user, I want the system to learn from my corrections**\n- Given I have manually classified several uncertain documents\n- When the AI processes similar documents with medium confidence\n- Then it uses my previous classifications as context examples\n- So that the system becomes more accurate for my specific document types\n\n### Interface Navigation Stories\n\n**As a user, I want to start with a comprehensive flat view**\n- Given I have many documents with various tags\n- When I first access the organizer\n- Then I see all files with color-coded tags by category\n- So that I can understand my entire document collection at a glance\n\n**As a user, I want to create folder views by clicking on tags**\n- Given I see documents with various \"Document Type\" tags in flat view\n- When I right-click on a \"Statement\" tag and select \"Show in Folders\"\n- Then my view reorganizes into folders by document type\n- So that I can browse documents in a familiar folder structure\n\n**As a user, I want to drill down through multiple folder levels**\n- Given I have organized by \"Document Type\" and want to sub-organize by date\n- When I right-click on a \"2023\" tag and select \"Show in Folders\"\n- Then I get a hierarchy like \"Statement > 2023 > March\"\n- So that I can narrow down to very specific document sets\n\n**As a user, I want to instantly reorganize my folder hierarchy**\n- Given I have documents organized by Type > Date\n- When I decide I want them organized by Date > Type instead\n- Then the reorganization happens instantly without processing delays\n- So that I can experiment with different organizational schemes efficiently\n\n### BATES Numbering Stories\n\n**As a lawyer, I want to print documents with BATES stamps for disclosure**\n- Given I need to provide document disclosure for trial\n- When I print any document from the organizer\n- Then it includes a BATES number like \"Roberts-0001\" \n- So that I can track disclosed documents and prevent disclosure confusion\n\n**As a legal professional, I want consistent BATES numbering per matter**\n- Given I'm working on multiple legal matters\n- When I set different prefixes for each case (e.g., \"Smith-\", \"Jones-\")\n- Then each case maintains its own sequential numbering\n- So that documents are properly organized by matter\n\n**As a lawyer, I want permanent BATES number assignment**\n- Given I've printed a document with BATES number \"Roberts-0001\"\n- When I print the same document again later\n- Then it always prints with the same BATES number\n- So that I maintain consistency in legal proceedings\n\n**As a user, I want protection against BATES numbering mistakes**\n- Given I need to restart my BATES numbering due to an error\n- When I create a new prefix for the same matter\n- Then the old prefix is permanently retired and cannot be reused\n- So that there's no confusion about which numbering sequence is current\n\n### Human Review Interface Stories\n\n**As a user, I want simple review options for uncertain documents**\n- Given the AI presents a document with uncertain classification\n- When I see the 3 AI suggestions plus \"Other\" and \"Create New Category\" buttons\n- Then I can quickly select the correct option or create a new one\n- So that document review is fast and doesn't interrupt my workflow\n\n**As a user, I want to create new categories during review**\n- Given I encounter a document type not in my current system\n- When I click \"Create New Category\" during human review\n- Then the system asks if I want to reprocess other documents for this new category\n- So that I can expand my taxonomy as I discover new document types\n\n### Legal Workflow Stories\n\n**As a lawyer, I want to prevent raw document downloads**\n- Given clients or opposing parties might create confusion with untracked copies\n- When I access any document in the organizer\n- Then I can only print BATES-stamped versions, not download raw files\n- So that all document copies in circulation are properly tracked and identified\n\n**As a legal professional, I want to track document processing history**\n- Given I need to verify whether documents have been properly processed\n- When I review any document's metadata\n- Then I can see whether it was classified by AI or human review\n- So that I can ensure quality control in my document management process\n\n## User Experience Flow\n\n### Initial Setup\n1. User uploads documents through existing upload feature\n2. Documents appear in flat view with basic metadata\n3. User creates categories and defines tag options\n4. User selects document batches for AI processing\n\n### Processing Workflow\n1. User selects folder/batch and processing category\n2. AI processes documents with confidence-based routing\n3. High confidence: Auto-categorized\n4. Medium confidence: Context-enhanced processing using previous examples\n5. Low confidence: Routed to human review folder\n6. User reviews uncertain classifications via simple 5-button interface\n\n### Organization and Discovery\n1. User starts in flat view seeing all tags\n2. Right-click any tag → \"Show in Folders\" to create hierarchy\n3. Navigate through virtual folder structure\n4. Find target document and view/print with BATES numbering\n\n## Success Metrics\n\n### User Efficiency\n- Time to locate specific documents\n- Reduction in manual file organization effort\n- Accuracy of AI categorization after context enhancement\n\n### Legal Workflow Support\n- Document disclosure completeness\n- BATES numbering consistency\n- Prevention of duplicate processing confusion\n\n### System Performance\n- AI processing accuracy by confidence threshold\n- User override rates in human review\n- Virtual folder reorganization response times\n\n## Future Enhancements\n\n### Automation Options\n- Optional automatic processing mode when AI reliability improves\n- User-configurable automation rules and triggers\n\n### Advanced Features\n- Cross-document relationship tracking\n- Bulk download with virtual folder structure preservation\n- Integration with external legal case management systems\n\n### Scalability\n- Multi-user team support (extending solo team architecture)\n- Advanced search across tag combinations\n- Audit trails for document access and modifications\n\n## Technical Dependencies\n\n### External Services\n- Google Gemini API for multimodal document processing\n- Firebase Auth/Firestore/Storage for data management\n\n### Existing Codebase Integration\n- Builds on established upload feature and deduplication system\n- Leverages existing Vue 3/Vuetify component architecture\n- Integrates with solo team authentication model\n\n### Development Approach\n- Follow KISS principle throughout implementation\n- Prefer simple solutions over premature optimization\n- Focus on legal workflow requirements and user experience","numLines":338,"startLine":1,"totalLines":338}}}
{"parentUuid":"6cc268cd-e1ff-40fd-a3a3-a7c14fb41ed5","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Bookkeeper","sessionId":"b0c1dfeb-33ca-4d6f-86e6-9e46cb791154","version":"1.0.96","gitBranch":"main","message":{"id":"msg_01L2o5XsN6QqaPPWNgBR3Vfi","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Found the file at: `.plans\\1. Ideas\\Organizer-Feature-Reference.md`\n\nThis is a comprehensive feature reference document for an \"Organizer\" system - an AI-powered document discovery and organization tool designed for legal document management workflows. The document outlines a sophisticated system for categorizing and organizing uploaded files using AI processing, tag-based organization, virtual folder structures, and BATES numbering for legal compliance."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":4773,"cache_read_input_tokens":22516,"cache_creation":{"ephemeral_5m_input_tokens":4773,"ephemeral_1h_input_tokens":0},"output_tokens":95,"service_tier":"standard"}},"requestId":"req_011CScA2Goyq2N7xy4naYFJc","type":"assistant","uuid":"e78ab18a-f960-4069-829a-02f9bde44ad4","timestamp":"2025-08-29T14:26:36.800Z"}
{"parentUuid":"e78ab18a-f960-4069-829a-02f9bde44ad4","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Bookkeeper","sessionId":"b0c1dfeb-33ca-4d6f-86e6-9e46cb791154","version":"1.0.96","gitBranch":"main","type":"user","message":{"role":"user","content":"I'd like you to create a document in the same folder, i.e. heree:  .plans\\1. Ideas\\OrganizerPhases.md\\\n\\\nthe document will describe a series of versions of the Organizer-Feature that is described here: .plans\\1. Ideas\\Organizer-Feature-Reference.md\\\n\\\\\nVersions will be numbered 1.0, 1.1., 1.2 etc...\\\n\\\nVersion 1.0 will describe the most basic and simple version version of the organizer feature.  Then each new version will incrementally add one additional aspect of the organizer feature reference document. Each incremental version will only add an aspect that is narrow enough in scope that it would make it simple to implement.  The versions will also be ordered in a logical way so that the features added in each version are able to build on previous versions without breaking them.\n\\\n"},"uuid":"b4d97042-03fa-4f7d-baef-b882bc30fa24","timestamp":"2025-08-29T14:39:40.856Z"}
{"parentUuid":"b4d97042-03fa-4f7d-baef-b882bc30fa24","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Bookkeeper","sessionId":"b0c1dfeb-33ca-4d6f-86e6-9e46cb791154","version":"1.0.96","gitBranch":"main","message":{"id":"msg_018voCFRyJJvHD7RQUKAWaNp","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01PgdsSmgtwcq7Lq5JxhVZZj","name":"Write","input":{"file_path":"C:\\Users\\Brahm\\Git\\Bookkeeper\\.plans\\1. Ideas\\OrganizerPhases.md","content":"# Organizer Feature Implementation Phases\n\n## Overview\n\nThis document outlines the incremental implementation phases for the Organizer feature described in `Organizer-Feature-Reference.md`. Each version adds a single, well-scoped feature that builds upon previous versions without breaking existing functionality.\n\n## Version 1.0: Basic File Listing with Manual Tags\n\n**Core Goal**: Simple file list with manual tag assignment\n\n**Features**:\n- Basic file list view showing uploaded files (filename, extension, upload date)\n- Manual tag assignment interface - users can type tags for each file\n- Simple tag display (text-based, no colors)\n- Basic search/filter by tag text\n- Uses existing upload system and file storage\n\n**Implementation Scope**:\n- New \"Organizer\" view in navigation\n- File list component pulling from existing Firebase storage\n- Simple tag input field per file\n- Tags stored in Firestore as array of strings per file\n- Basic text-based filtering\n\n**User Flow**:\n1. User navigates to Organizer view\n2. Sees list of all uploaded files\n3. Clicks on a file to add tags (simple text input)\n4. Can filter file list by typing tag names\n\n---\n\n## Version 1.1: Category-Based Tag System\n\n**Core Goal**: Structure tags into user-defined categories\n\n**New Features**:\n- Category creation interface (user defines category names like \"Document Type\", \"Date\")\n- Tags now belong to categories instead of being free-form text\n- Category management (add/edit/delete categories)\n- Tag assignment limited to predefined category options\n- Color coding by category (simple distinct colors)\n\n**Implementation Scope**:\n- Category management interface\n- Update tag storage to include category reference\n- Color assignment system for categories\n- Modified tag assignment UI to show category groupings\n\n**User Flow**:\n1. User creates categories (e.g., \"Document Type\", \"Institution\")\n2. For each category, defines available tags (e.g., \"Invoice\", \"Statement\")\n3. Tags files by selecting from category dropdown options\n4. Files display with color-coded tags grouped by category\n\n---\n\n## Version 1.2: Virtual Folder View\n\n**Core Goal**: Present tags as familiar folder structures\n\n**New Features**:\n- \"Show in Folders\" option when right-clicking tags\n- Dynamic folder hierarchy based on selected tag categories\n- Breadcrumb navigation in folder view\n- Switch between flat view and folder view\n- Folder view shows only files matching current folder context\n\n**Implementation Scope**:\n- Folder view component\n- Tag-to-folder conversion logic\n- Navigation breadcrumbs\n- View toggle between flat/folder modes\n\n**User Flow**:\n1. From flat view, right-click any tag and select \"Show in Folders\"\n2. View reorganizes into folder structure based on that tag category\n3. Navigate through folders using breadcrumbs\n4. Switch back to flat view anytime\n\n---\n\n## Version 1.3: AI Categorization (Manual Trigger)\n\n**Core Goal**: Let AI suggest tags for selected files\n\n**New Features**:\n- \"Process with AI\" button for selected files\n- Integration with Google Gemini API for document analysis\n- AI suggests tags based on existing category structure\n- Simple approval interface - user accepts or rejects AI suggestions\n- Manual processing only (user must trigger)\n\n**Implementation Scope**:\n- Gemini API integration\n- File selection interface\n- AI processing queue with progress tracking\n- Suggestion review interface\n- Batch processing capability\n\n**User Flow**:\n1. User selects files for AI processing\n2. Chooses which categories AI should analyze\n3. AI processes files and suggests appropriate tags\n4. User reviews and approves/rejects suggestions\n5. Approved tags are applied to files\n\n---\n\n## Version 1.4: Confidence-Based Routing\n\n**Core Goal**: Automatically handle high-confidence AI results, route uncertain ones for review\n\n**New Features**:\n- Confidence threshold settings (user-configurable)\n- Automatic application of high-confidence tags (>90%)\n- \"Human Review Required\" virtual folder for uncertain classifications\n- Three-option review interface (Accept AI suggestion, Other option, Create new category)\n\n**Implementation Scope**:\n- Confidence threshold configuration\n- Automatic vs manual routing logic\n- Human review queue interface\n- Enhanced suggestion interface with confidence display\n\n**User Flow**:\n1. AI processes files automatically applying high-confidence tags\n2. Medium/low confidence files appear in \"Human Review Required\" folder\n3. User reviews uncertain files with suggested options\n4. Can create new categories during review process\n\n---\n\n## Version 1.5: Context-Enhanced Processing\n\n**Core Goal**: Use previous classifications to improve AI accuracy\n\n**New Features**:\n- Second-pass processing for medium-confidence files\n- Uses previously classified examples as context for Gemini\n- Prioritizes human classifications over AI classifications in context\n- Learning system without model retraining\n\n**Implementation Scope**:\n- Context example selection algorithm\n- Two-pass processing workflow\n- Example formatting for Gemini context\n- Classification history tracking\n\n**User Flow**:\n1. AI first pass: High confidence files auto-tagged\n2. AI second pass: Medium confidence files processed with context examples\n3. Only remaining uncertain files go to human review\n4. System progressively gets better as more examples accumulate\n\n---\n\n## Version 1.6: Basic Document Viewer\n\n**Core Goal**: View documents without downloading\n\n**New Features**:\n- In-app document viewer for PDFs and images\n- Basic zoom and pagination controls\n- View documents directly from file list\n- Simple modal or dedicated view page\n\n**Implementation Scope**:\n- PDF viewer component integration\n- Image display component\n- Modal or route-based viewer interface\n- File type detection and appropriate viewer selection\n\n**User Flow**:\n1. Click on any file in list to view\n2. PDFs open with pagination and zoom controls\n3. Images display with zoom capability\n4. Close viewer to return to file list\n\n---\n\n## Version 1.7: BATES Numbering System\n\n**Core Goal**: Legal document numbering for printed outputs\n\n**New Features**:\n- BATES prefix configuration per team/matter\n- Sequential numbering system\n- Print-to-PDF with BATES stamps\n- Immutable number assignment after first print\n- No raw downloads - only BATES-stamped prints\n\n**Implementation Scope**:\n- BATES numbering configuration interface\n- PDF generation service with stamp overlay\n- Number assignment and tracking system\n- Print-only download restrictions\n\n**User Flow**:\n1. Configure BATES prefix for current matter\n2. Print documents get sequential numbers (e.g., \"Roberts-0001\")\n3. Same document always prints with same number\n4. All downloads are BATES-stamped PDFs only\n\n---\n\n## Version 1.8: Advanced Tag Management\n\n**Core Goal**: Comprehensive tag lifecycle management\n\n**New Features**:\n- Add new tags to existing categories with reprocessing option\n- Delete tags with reassignment workflow\n- Merge tags through delete-and-reprocess\n- Tag usage analytics and cleanup suggestions\n\n**Implementation Scope**:\n- Tag modification workflows\n- Reprocessing trigger system\n- Tag migration and cleanup tools\n- Usage tracking and reporting\n\n**User Flow**:\n1. Add new tag to category → option to reprocess existing files\n2. Delete tag → choose how to handle affected files\n3. System suggests cleanup for unused or redundant tags\n4. Merge similar tags through guided workflow\n\n---\n\n## Version 1.9: Performance Optimization\n\n**Core Goal**: Handle large document collections efficiently\n\n**New Features**:\n- Virtual scrolling for large file lists\n- Lazy loading of document metadata\n- Background processing optimization\n- Caching for frequently accessed views\n\n**Implementation Scope**:\n- Virtual scroll component implementation\n- Lazy loading architecture\n- Cache management system\n- Performance monitoring and optimization\n\n**User Flow**:\n1. Large file collections load quickly with virtual scrolling\n2. Folder views load instantly regardless of collection size\n3. Background AI processing doesn't block interface\n4. Smooth navigation even with thousands of documents\n\n---\n\n## Version 2.0: Multi-Level Folder Hierarchies\n\n**Core Goal**: Support complex nested folder organizations\n\n**New Features**:\n- Multiple category levels in single folder view\n- Dynamic hierarchy reconfiguration\n- Advanced breadcrumb navigation\n- Folder bookmarking for frequently used views\n\n**Implementation Scope**:\n- Multi-level folder rendering\n- Dynamic hierarchy management\n- Enhanced navigation components\n- View persistence and bookmarking\n\n**User Flow**:\n1. Create folder hierarchies like \"Document Type > Date > Institution\"\n2. Instantly reorganize to \"Date > Document Type > Institution\"\n3. Bookmark frequently used folder configurations\n4. Navigate complex hierarchies with enhanced breadcrumbs\n\n---\n\n## Implementation Strategy\n\n### Development Principles\n- Each version is fully functional and deployable\n- No breaking changes to previous functionality\n- User can upgrade incrementally and see immediate value\n- Simple implementations preferred over complex optimizations\n\n### Technical Approach\n- Build on existing Vue 3/Vuetify architecture\n- Leverage existing Firebase infrastructure\n- Use existing authentication and team isolation\n- Follow established component patterns\n\n### Quality Assurance\n- Each version includes comprehensive testing\n- User acceptance testing before moving to next version\n- Performance benchmarking for scalability features\n- Legal workflow validation for BATES numbering features\n\n### Timeline Considerations\n- Version 1.0-1.2: Core foundation (2-3 weeks each)\n- Version 1.3-1.5: AI integration (3-4 weeks each) \n- Version 1.6-1.7: User interface enhancements (2 weeks each)\n- Version 1.8+: Advanced features (2-4 weeks each)\n\nThis phased approach ensures users get value from early versions while building toward the complete feature set described in the reference document."}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":27594,"cache_read_input_tokens":0,"cache_creation":{"ephemeral_5m_input_tokens":27594,"ephemeral_1h_input_tokens":0},"output_tokens":2340,"service_tier":"standard"}},"requestId":"req_011CScB2VfWYgKSjAP7nZ97n","type":"assistant","uuid":"b5640e83-5a86-4ede-abdb-6976fdb0cde0","timestamp":"2025-08-29T14:40:43.061Z"}
{"parentUuid":"b5640e83-5a86-4ede-abdb-6976fdb0cde0","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Bookkeeper","sessionId":"b0c1dfeb-33ca-4d6f-86e6-9e46cb791154","version":"1.0.96","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01PgdsSmgtwcq7Lq5JxhVZZj","type":"tool_result","content":"File created successfully at: C:\\Users\\Brahm\\Git\\Bookkeeper\\.plans\\1. Ideas\\OrganizerPhases.md"}]},"uuid":"40ad402e-16cc-4fd8-ae6d-34b7f4796605","timestamp":"2025-08-29T14:44:51.894Z","toolUseResult":{"type":"create","filePath":"C:\\Users\\Brahm\\Git\\Bookkeeper\\.plans\\1. Ideas\\OrganizerPhases.md","content":"# Organizer Feature Implementation Phases\n\n## Overview\n\nThis document outlines the incremental implementation phases for the Organizer feature described in `Organizer-Feature-Reference.md`. Each version adds a single, well-scoped feature that builds upon previous versions without breaking existing functionality.\n\n## Version 1.0: Basic File Listing with Manual Tags\n\n**Core Goal**: Simple file list with manual tag assignment\n\n**Features**:\n- Basic file list view showing uploaded files (filename, extension, upload date)\n- Manual tag assignment interface - users can type tags for each file\n- Simple tag display (text-based, no colors)\n- Basic search/filter by tag text\n- Uses existing upload system and file storage\n\n**Implementation Scope**:\n- New \"Organizer\" view in navigation\n- File list component pulling from existing Firebase storage\n- Simple tag input field per file\n- Tags stored in Firestore as array of strings per file\n- Basic text-based filtering\n\n**User Flow**:\n1. User navigates to Organizer view\n2. Sees list of all uploaded files\n3. Clicks on a file to add tags (simple text input)\n4. Can filter file list by typing tag names\n\n---\n\n## Version 1.1: Category-Based Tag System\n\n**Core Goal**: Structure tags into user-defined categories\n\n**New Features**:\n- Category creation interface (user defines category names like \"Document Type\", \"Date\")\n- Tags now belong to categories instead of being free-form text\n- Category management (add/edit/delete categories)\n- Tag assignment limited to predefined category options\n- Color coding by category (simple distinct colors)\n\n**Implementation Scope**:\n- Category management interface\n- Update tag storage to include category reference\n- Color assignment system for categories\n- Modified tag assignment UI to show category groupings\n\n**User Flow**:\n1. User creates categories (e.g., \"Document Type\", \"Institution\")\n2. For each category, defines available tags (e.g., \"Invoice\", \"Statement\")\n3. Tags files by selecting from category dropdown options\n4. Files display with color-coded tags grouped by category\n\n---\n\n## Version 1.2: Virtual Folder View\n\n**Core Goal**: Present tags as familiar folder structures\n\n**New Features**:\n- \"Show in Folders\" option when right-clicking tags\n- Dynamic folder hierarchy based on selected tag categories\n- Breadcrumb navigation in folder view\n- Switch between flat view and folder view\n- Folder view shows only files matching current folder context\n\n**Implementation Scope**:\n- Folder view component\n- Tag-to-folder conversion logic\n- Navigation breadcrumbs\n- View toggle between flat/folder modes\n\n**User Flow**:\n1. From flat view, right-click any tag and select \"Show in Folders\"\n2. View reorganizes into folder structure based on that tag category\n3. Navigate through folders using breadcrumbs\n4. Switch back to flat view anytime\n\n---\n\n## Version 1.3: AI Categorization (Manual Trigger)\n\n**Core Goal**: Let AI suggest tags for selected files\n\n**New Features**:\n- \"Process with AI\" button for selected files\n- Integration with Google Gemini API for document analysis\n- AI suggests tags based on existing category structure\n- Simple approval interface - user accepts or rejects AI suggestions\n- Manual processing only (user must trigger)\n\n**Implementation Scope**:\n- Gemini API integration\n- File selection interface\n- AI processing queue with progress tracking\n- Suggestion review interface\n- Batch processing capability\n\n**User Flow**:\n1. User selects files for AI processing\n2. Chooses which categories AI should analyze\n3. AI processes files and suggests appropriate tags\n4. User reviews and approves/rejects suggestions\n5. Approved tags are applied to files\n\n---\n\n## Version 1.4: Confidence-Based Routing\n\n**Core Goal**: Automatically handle high-confidence AI results, route uncertain ones for review\n\n**New Features**:\n- Confidence threshold settings (user-configurable)\n- Automatic application of high-confidence tags (>90%)\n- \"Human Review Required\" virtual folder for uncertain classifications\n- Three-option review interface (Accept AI suggestion, Other option, Create new category)\n\n**Implementation Scope**:\n- Confidence threshold configuration\n- Automatic vs manual routing logic\n- Human review queue interface\n- Enhanced suggestion interface with confidence display\n\n**User Flow**:\n1. AI processes files automatically applying high-confidence tags\n2. Medium/low confidence files appear in \"Human Review Required\" folder\n3. User reviews uncertain files with suggested options\n4. Can create new categories during review process\n\n---\n\n## Version 1.5: Context-Enhanced Processing\n\n**Core Goal**: Use previous classifications to improve AI accuracy\n\n**New Features**:\n- Second-pass processing for medium-confidence files\n- Uses previously classified examples as context for Gemini\n- Prioritizes human classifications over AI classifications in context\n- Learning system without model retraining\n\n**Implementation Scope**:\n- Context example selection algorithm\n- Two-pass processing workflow\n- Example formatting for Gemini context\n- Classification history tracking\n\n**User Flow**:\n1. AI first pass: High confidence files auto-tagged\n2. AI second pass: Medium confidence files processed with context examples\n3. Only remaining uncertain files go to human review\n4. System progressively gets better as more examples accumulate\n\n---\n\n## Version 1.6: Basic Document Viewer\n\n**Core Goal**: View documents without downloading\n\n**New Features**:\n- In-app document viewer for PDFs and images\n- Basic zoom and pagination controls\n- View documents directly from file list\n- Simple modal or dedicated view page\n\n**Implementation Scope**:\n- PDF viewer component integration\n- Image display component\n- Modal or route-based viewer interface\n- File type detection and appropriate viewer selection\n\n**User Flow**:\n1. Click on any file in list to view\n2. PDFs open with pagination and zoom controls\n3. Images display with zoom capability\n4. Close viewer to return to file list\n\n---\n\n## Version 1.7: BATES Numbering System\n\n**Core Goal**: Legal document numbering for printed outputs\n\n**New Features**:\n- BATES prefix configuration per team/matter\n- Sequential numbering system\n- Print-to-PDF with BATES stamps\n- Immutable number assignment after first print\n- No raw downloads - only BATES-stamped prints\n\n**Implementation Scope**:\n- BATES numbering configuration interface\n- PDF generation service with stamp overlay\n- Number assignment and tracking system\n- Print-only download restrictions\n\n**User Flow**:\n1. Configure BATES prefix for current matter\n2. Print documents get sequential numbers (e.g., \"Roberts-0001\")\n3. Same document always prints with same number\n4. All downloads are BATES-stamped PDFs only\n\n---\n\n## Version 1.8: Advanced Tag Management\n\n**Core Goal**: Comprehensive tag lifecycle management\n\n**New Features**:\n- Add new tags to existing categories with reprocessing option\n- Delete tags with reassignment workflow\n- Merge tags through delete-and-reprocess\n- Tag usage analytics and cleanup suggestions\n\n**Implementation Scope**:\n- Tag modification workflows\n- Reprocessing trigger system\n- Tag migration and cleanup tools\n- Usage tracking and reporting\n\n**User Flow**:\n1. Add new tag to category → option to reprocess existing files\n2. Delete tag → choose how to handle affected files\n3. System suggests cleanup for unused or redundant tags\n4. Merge similar tags through guided workflow\n\n---\n\n## Version 1.9: Performance Optimization\n\n**Core Goal**: Handle large document collections efficiently\n\n**New Features**:\n- Virtual scrolling for large file lists\n- Lazy loading of document metadata\n- Background processing optimization\n- Caching for frequently accessed views\n\n**Implementation Scope**:\n- Virtual scroll component implementation\n- Lazy loading architecture\n- Cache management system\n- Performance monitoring and optimization\n\n**User Flow**:\n1. Large file collections load quickly with virtual scrolling\n2. Folder views load instantly regardless of collection size\n3. Background AI processing doesn't block interface\n4. Smooth navigation even with thousands of documents\n\n---\n\n## Version 2.0: Multi-Level Folder Hierarchies\n\n**Core Goal**: Support complex nested folder organizations\n\n**New Features**:\n- Multiple category levels in single folder view\n- Dynamic hierarchy reconfiguration\n- Advanced breadcrumb navigation\n- Folder bookmarking for frequently used views\n\n**Implementation Scope**:\n- Multi-level folder rendering\n- Dynamic hierarchy management\n- Enhanced navigation components\n- View persistence and bookmarking\n\n**User Flow**:\n1. Create folder hierarchies like \"Document Type > Date > Institution\"\n2. Instantly reorganize to \"Date > Document Type > Institution\"\n3. Bookmark frequently used folder configurations\n4. Navigate complex hierarchies with enhanced breadcrumbs\n\n---\n\n## Implementation Strategy\n\n### Development Principles\n- Each version is fully functional and deployable\n- No breaking changes to previous functionality\n- User can upgrade incrementally and see immediate value\n- Simple implementations preferred over complex optimizations\n\n### Technical Approach\n- Build on existing Vue 3/Vuetify architecture\n- Leverage existing Firebase infrastructure\n- Use existing authentication and team isolation\n- Follow established component patterns\n\n### Quality Assurance\n- Each version includes comprehensive testing\n- User acceptance testing before moving to next version\n- Performance benchmarking for scalability features\n- Legal workflow validation for BATES numbering features\n\n### Timeline Considerations\n- Version 1.0-1.2: Core foundation (2-3 weeks each)\n- Version 1.3-1.5: AI integration (3-4 weeks each) \n- Version 1.6-1.7: User interface enhancements (2 weeks each)\n- Version 1.8+: Advanced features (2-4 weeks each)\n\nThis phased approach ensures users get value from early versions while building toward the complete feature set described in the reference document.","structuredPatch":[]}}
{"parentUuid":"40ad402e-16cc-4fd8-ae6d-34b7f4796605","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Bookkeeper","sessionId":"b0c1dfeb-33ca-4d6f-86e6-9e46cb791154","version":"1.0.96","gitBranch":"main","message":{"id":"msg_019jSDhRcrnge9SPwTerwHmF","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I've created the `OrganizerPhases.md` document that breaks down the comprehensive Organizer feature into incremental, logical implementation phases. Each version (1.0, 1.1, 1.2, etc.) adds a single, well-scoped feature that builds upon previous versions:\n\n- **Version 1.0**: Basic file listing with manual tags\n- **Version 1.1**: Category-based tag system  \n- **Version 1.2**: Virtual folder view\n- **Version 1.3**: AI categorization (manual trigger)\n- **Version 1.4**: Confidence-based routing\n- **Version 1.5**: Context-enhanced processing\n- **Version 1.6**: Basic document viewer\n- **Version 1.7**: BATES numbering system\n- **Version 1.8**: Advanced tag management\n- **Version 1.9**: Performance optimization\n- **Version 2.0**: Multi-level folder hierarchies\n\nEach version is designed to be fully functional and deployable on its own, providing immediate user value while building toward the complete feature set described in the reference document."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":2383,"cache_read_input_tokens":27594,"cache_creation":{"ephemeral_5m_input_tokens":2383,"ephemeral_1h_input_tokens":0},"output_tokens":252,"service_tier":"standard"}},"requestId":"req_011CScBRRNSHrbLzcCJvCwj2","type":"assistant","uuid":"725579e5-bd24-41f9-8944-290d97144551","timestamp":"2025-08-29T14:44:57.713Z"}

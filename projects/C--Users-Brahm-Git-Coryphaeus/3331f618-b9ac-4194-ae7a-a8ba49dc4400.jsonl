{"type":"summary","summary":"App Switcher Redesign: Simplified Navigation Logic","leafUuid":"51a50afd-bf0e-4a32-9649-7643e5ff81d5"}
{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":"Have we implemented team accounts?\\\n\\\nLooking at Firebase console, it looks to me like we are still using only a \"users\" collection in Firebase.\\\n\\\nLet's plan our Firestore data structure so that we can have team accounts with multiple users per team.  Can you do some web searching on best practices for organizing firestore to keep track of team accounts and users.\n"},"uuid":"d71f54a5-ab12-4c2a-b35a-bd11646f075b","timestamp":"2025-08-20T14:48:12.489Z"}
{"parentUuid":"d71f54a5-ab12-4c2a-b35a-bd11646f075b","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01AurkbRyH6fkrrvLNWSwgaC","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll help you plan the Firestore data structure for team accounts. Let me first search for current best practices and then analyze your existing structure."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":8744,"cache_read_input_tokens":11616,"cache_creation":{"ephemeral_5m_input_tokens":8744,"ephemeral_1h_input_tokens":0},"output_tokens":5,"service_tier":"standard"}},"requestId":"req_011CSK9PyTPHdMcuB5YZbJPe","type":"assistant","uuid":"f734771d-d8bd-442d-a38b-0ab5906ddc7b","timestamp":"2025-08-20T14:48:15.228Z"}
{"parentUuid":"f734771d-d8bd-442d-a38b-0ab5906ddc7b","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01AurkbRyH6fkrrvLNWSwgaC","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_015ZrZ52QdAwnpK1em6YQLp9","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Research Firestore best practices for team-based multi-tenant architecture","status":"pending"},{"id":"2","content":"Analyze current Firestore structure in the codebase","status":"pending"},{"id":"3","content":"Design optimal team-based Firestore data structure","status":"pending"},{"id":"4","content":"Create migration plan from current structure to team-based structure","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":8744,"cache_read_input_tokens":11616,"cache_creation":{"ephemeral_5m_input_tokens":8744,"ephemeral_1h_input_tokens":0},"output_tokens":249,"service_tier":"standard"}},"requestId":"req_011CSK9PyTPHdMcuB5YZbJPe","type":"assistant","uuid":"b2153014-b25e-4c50-bbad-1ea54eb1ad18","timestamp":"2025-08-20T14:48:17.522Z"}
{"parentUuid":"b2153014-b25e-4c50-bbad-1ea54eb1ad18","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_015ZrZ52QdAwnpK1em6YQLp9","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"4a54e3b6-e500-4756-9e18-7988313fd73f","timestamp":"2025-08-20T14:48:17.594Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"pending","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"pending","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"pending","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"pending","id":"4"}]}}
{"parentUuid":"4a54e3b6-e500-4756-9e18-7988313fd73f","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_012W9YTPVpM8BCwqCp3aycYT","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_011xybrFfeZ6Hc6mMahm7Asn","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Research Firestore best practices for team-based multi-tenant architecture","status":"in_progress"},{"id":"2","content":"Analyze current Firestore structure in the codebase","status":"pending"},{"id":"3","content":"Design optimal team-based Firestore data structure","status":"pending"},{"id":"4","content":"Create migration plan from current structure to team-based structure","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":387,"cache_read_input_tokens":20360,"cache_creation":{"ephemeral_5m_input_tokens":387,"ephemeral_1h_input_tokens":0},"output_tokens":173,"service_tier":"standard"}},"requestId":"req_011CSK9QLvDV6hjLxiz7YnGr","type":"assistant","uuid":"7a7d82a2-935b-47bd-a95f-e78e48477067","timestamp":"2025-08-20T14:48:20.885Z"}
{"parentUuid":"7a7d82a2-935b-47bd-a95f-e78e48477067","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_011xybrFfeZ6Hc6mMahm7Asn","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"a4819318-653c-4256-acfe-a04e7f73a1d8","timestamp":"2025-08-20T14:48:20.933Z","toolUseResult":{"oldTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"pending","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"pending","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"pending","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"pending","id":"4"}],"newTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"in_progress","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"pending","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"pending","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"pending","id":"4"}]}}
{"parentUuid":"a4819318-653c-4256-acfe-a04e7f73a1d8","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01C6MB1QwQNW3tRnDz6Xhjwp","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01G9ta6pEYti8QrkUbxwogAV","name":"WebSearch","input":{"query":"Firestore multi-tenant team-based architecture best practices data modeling 2024"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":363,"cache_read_input_tokens":20747,"cache_creation":{"ephemeral_5m_input_tokens":363,"ephemeral_1h_input_tokens":0},"output_tokens":68,"service_tier":"standard"}},"requestId":"req_011CSK9QawpkXxHbX3gxDmSp","type":"assistant","uuid":"74ee4fdf-357d-4e11-81ec-58144c5519a1","timestamp":"2025-08-20T14:48:23.448Z"}
{"parentUuid":"74ee4fdf-357d-4e11-81ec-58144c5519a1","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01G9ta6pEYti8QrkUbxwogAV","type":"tool_result","content":"Web search results for query: \"Firestore multi-tenant team-based architecture best practices data modeling 2024\"\n\nLinks: [{\"title\":\"Multitenancy | Cloud Datastore Documentation | Google Cloud\",\"url\":\"https://cloud.google.com/datastore/docs/concepts/multitenancy\"},{\"title\":\"firebase - How would one create a multitenant datamodel in a nosql solution like firestore? - Stack Overflow\",\"url\":\"https://stackoverflow.com/questions/55074267/how-would-one-create-a-multitenant-datamodel-in-a-nosql-solution-like-firestore\"},{\"title\":\"Model your Cloud Firestore Database The Right Way: A Chat Application Case Study | by Henry Ifebunandu | Medium\",\"url\":\"https://medium.com/@henryifebunandu/cloud-firestore-db-structure-for-your-chat-application-64ec77a9f9c0\"},{\"title\":\"Best practices for Cloud Firestore | Firebase\",\"url\":\"https://firebase.google.com/docs/firestore/best-practices\"},{\"title\":\"Firestore Data Model: An Easy Guide | Hevo\",\"url\":\"https://hevodata.com/learn/firestore-data-model/\"},{\"title\":\"Cloud Firestore Data model | Firebase\",\"url\":\"https://firebase.google.com/docs/firestore/data-model\"},{\"title\":\"Tutorial: Advanced Data Modeling with Firestore by Example | Fireship.io\",\"url\":\"https://fireship.io/lessons/advanced-firestore-nosql-data-structure-examples/\"},{\"title\":\"7+ Google Firestore Query Performance Best Practices for 2024 | Estuary\",\"url\":\"https://estuary.dev/blog/firestore-query-best-practices/\"},{\"title\":\"Multi-Tenant Database Design Patterns 2024\",\"url\":\"https://daily.dev/blog/multi-tenant-database-design-patterns-2024\"},{\"title\":\"How to build a team-based user management system with Firebase | by Richard Keil | Firebase Developers | Medium\",\"url\":\"https://medium.com/firebase-developers/how-to-build-a-team-based-user-management-system-with-firebase-6a9a6e5c740d\"}]\n\nBased on my search, I can provide you with comprehensive insights on Firestore multi-tenant team-based architecture best practices and data modeling for 2024.\n\n## Firestore Multi-Tenant Architecture Best Practices\n\n### Core Multi-Tenancy Patterns\n\nMulti-tenancy in applications is supported by providing separate data partitions for multiple client organizations (tenants), allowing customization of data values while maintaining the same data schema. Firestore in Datastore mode enables multitenancy through namespaces, using partitions to silo data for each tenant.\n\n### Team-Based Data Modeling Approaches\n\nFor team-based systems, the pattern typically involves a subject (user/player) being a member of multiple groups (accounts, tenants, teams, or rooms). Modeling authorization and team memberships through the database is often more convenient for multi-tenant systems that require user interfaces for managing permissions and members.\n\n### Data Modeling Best Practices (2024)\n\n#### 1. **Document and Collection Structure**\nCloud Firestore is a NoSQL, document-oriented database where data is stored in documents organized into collections, unlike SQL databases with tables and rows. Firestore is optimized for storing large collections of small documents.\n\n#### 2. **Denormalization Strategy**\nData duplication is a common technique to eliminate the need to read multiple documents - for example, duplicating usernames on every document to avoid secondary queries. Use denormalization and aggregation techniques by storing redundant data in multiple places to prevent expensive joins or lookups.\n\n#### 3. **Advanced Techniques**\nKey advanced patterns include:\n- Composite keys combining two or more unique document IDs (e.g., userXYZ_postABC) to enforce unique relationships between documents\n- Bucketing as a form of duplication/aggregation that breaks collections into single documents for efficient month-by-month data access\n\n### Performance and Scalability (2024)\n\n#### Traffic Management\nGradually ramp up traffic to new collections, starting with a maximum of 500 operations per second and increasing by 50% every 5 minutes. This is known as the \"500/50/5\" rule.\n\n#### Query Optimization\nFirestore provides various query types for filtering, sorting, limiting, and paginating data, but not all queries offer the same performance or scalability, requiring evaluation of different strategies.\n\n### Multi-Tenant Security Considerations\n\nUse Firestore security rules to allow only authorized users to read organization data by leveraging user IDs of organization members. Note that namespaces are not a security mechanism in Datastore mode.\n\n### Emerging Trends for 2024\n\nCloud computing, containerization, and serverless architectures are influencing multi-tenant database design. Technologies like Docker and Kubernetes are being used to simplify deployment and management by containerizing each tenant's database instance.\n\n### Implementation Recommendations\n\n1. **Team Management**: Model invitations through an invitations collection on teams, representing the \"right\" for unknown users to join, allowing users with specific emails to create memberships\n\n2. **Data Organization**: Create subcollections like organizationData under organizationId documents, using Firestore security rules to restrict access to organization members\n\n3. **Identity Management**: Leverage Google Cloud Identity Platform's multi-tenancy features and Firebase Auth's custom claims to ease management of organizations and users\n\nThese practices ensure scalable, secure, and maintainable multi-tenant team-based architectures in Firestore while leveraging 2024's latest capabilities and trends."}]},"uuid":"e8520c71-2d4d-47b9-b123-ad93a3ba6866","timestamp":"2025-08-20T14:49:16.480Z","toolUseResult":{"query":"Firestore multi-tenant team-based architecture best practices data modeling 2024","results":[{"tool_use_id":"srvtoolu_01CQx3muLkHY3XQEKvfBdvWL","content":[{"title":"Multitenancy | Cloud Datastore Documentation | Google Cloud","url":"https://cloud.google.com/datastore/docs/concepts/multitenancy"},{"title":"firebase - How would one create a multitenant datamodel in a nosql solution like firestore? - Stack Overflow","url":"https://stackoverflow.com/questions/55074267/how-would-one-create-a-multitenant-datamodel-in-a-nosql-solution-like-firestore"},{"title":"Model your Cloud Firestore Database The Right Way: A Chat Application Case Study | by Henry Ifebunandu | Medium","url":"https://medium.com/@henryifebunandu/cloud-firestore-db-structure-for-your-chat-application-64ec77a9f9c0"},{"title":"Best practices for Cloud Firestore | Firebase","url":"https://firebase.google.com/docs/firestore/best-practices"},{"title":"Firestore Data Model: An Easy Guide | Hevo","url":"https://hevodata.com/learn/firestore-data-model/"},{"title":"Cloud Firestore Data model | Firebase","url":"https://firebase.google.com/docs/firestore/data-model"},{"title":"Tutorial: Advanced Data Modeling with Firestore by Example | Fireship.io","url":"https://fireship.io/lessons/advanced-firestore-nosql-data-structure-examples/"},{"title":"7+ Google Firestore Query Performance Best Practices for 2024 | Estuary","url":"https://estuary.dev/blog/firestore-query-best-practices/"},{"title":"Multi-Tenant Database Design Patterns 2024","url":"https://daily.dev/blog/multi-tenant-database-design-patterns-2024"},{"title":"How to build a team-based user management system with Firebase | by Richard Keil | Firebase Developers | Medium","url":"https://medium.com/firebase-developers/how-to-build-a-team-based-user-management-system-with-firebase-6a9a6e5c740d"}]},"Based on my search, I can provide you with comprehensive insights on Firestore multi-tenant team-based architecture best practices and data modeling for 2024.\n\n## Firestore Multi-Tenant Architecture Best Practices\n\n### Core Multi-Tenancy Patterns\n\nMulti-tenancy in applications is supported by providing separate data partitions for multiple client organizations (tenants), allowing customization of data values while maintaining the same data schema. Firestore in Datastore mode enables multitenancy through namespaces, using partitions to silo data for each tenant.\n\n### Team-Based Data Modeling Approaches\n\nFor team-based systems, the pattern typically involves a subject (user/player) being a member of multiple groups (accounts, tenants, teams, or rooms). Modeling authorization and team memberships through the database is often more convenient for multi-tenant systems that require user interfaces for managing permissions and members.\n\n### Data Modeling Best Practices (2024)\n\n#### 1. **Document and Collection Structure**\nCloud Firestore is a NoSQL, document-oriented database where data is stored in documents organized into collections, unlike SQL databases with tables and rows. Firestore is optimized for storing large collections of small documents.\n\n#### 2. **Denormalization Strategy**\nData duplication is a common technique to eliminate the need to read multiple documents - for example, duplicating usernames on every document to avoid secondary queries. Use denormalization and aggregation techniques by storing redundant data in multiple places to prevent expensive joins or lookups.\n\n#### 3. **Advanced Techniques**\nKey advanced patterns include:\n- Composite keys combining two or more unique document IDs (e.g., userXYZ_postABC) to enforce unique relationships between documents\n- Bucketing as a form of duplication/aggregation that breaks collections into single documents for efficient month-by-month data access\n\n### Performance and Scalability (2024)\n\n#### Traffic Management\nGradually ramp up traffic to new collections, starting with a maximum of 500 operations per second and increasing by 50% every 5 minutes. This is known as the \"500/50/5\" rule.\n\n#### Query Optimization\nFirestore provides various query types for filtering, sorting, limiting, and paginating data, but not all queries offer the same performance or scalability, requiring evaluation of different strategies.\n\n### Multi-Tenant Security Considerations\n\nUse Firestore security rules to allow only authorized users to read organization data by leveraging user IDs of organization members. Note that namespaces are not a security mechanism in Datastore mode.\n\n### Emerging Trends for 2024\n\nCloud computing, containerization, and serverless architectures are influencing multi-tenant database design. Technologies like Docker and Kubernetes are being used to simplify deployment and management by containerizing each tenant's database instance.\n\n### Implementation Recommendations\n\n1. **Team Management**: Model invitations through an invitations collection on teams, representing the \"right\" for unknown users to join, allowing users with specific emails to create memberships\n\n2. **Data Organization**: Create subcollections like organizationData under organizationId documents, using Firestore security rules to restrict access to organization members\n\n3. **Identity Management**: Leverage Google Cloud Identity Platform's multi-tenancy features and Firebase Auth's custom claims to ease management of organizations and users\n\nThese practices ensure scalable, secure, and maintainable multi-tenant team-based architectures in Firestore while leveraging 2024's latest capabilities and trends."],"durationSeconds":48.87965579999995}}
{"parentUuid":"e8520c71-2d4d-47b9-b123-ad93a3ba6866","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01RSPzkeyP1b2qxsdXdNr78h","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_016XYvaqtsy3zswqkMfEbsKd","name":"WebSearch","input":{"query":"Firebase team-based user management system firestore data structure patterns"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1424,"cache_read_input_tokens":21110,"cache_creation":{"ephemeral_5m_input_tokens":1424,"ephemeral_1h_input_tokens":0},"output_tokens":63,"service_tier":"standard"}},"requestId":"req_011CSK9UgVJtXNXUumrE4bhF","type":"assistant","uuid":"ce66c7c7-2ee8-4c95-a861-5420f7df6b71","timestamp":"2025-08-20T14:49:18.983Z"}
{"parentUuid":"ce66c7c7-2ee8-4c95-a861-5420f7df6b71","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_016XYvaqtsy3zswqkMfEbsKd","type":"tool_result","content":"Web search results for query: \"Firebase team-based user management system firestore data structure patterns\"\n\nI'll search for information about Firebase team-based user management systems and Firestore data structure patterns.\n\nLinks: [{\"title\":\"How to build a team-based user management system with Firebase | by Richard Keil | Firebase Developers | Medium\",\"url\":\"https://medium.com/firebase-developers/how-to-build-a-team-based-user-management-system-with-firebase-6a9a6e5c740d\"},{\"title\":\"How to build a team-based user management system with Firebase | Richard's Blog\",\"url\":\"https://blog.richartkeil.com/how-to-build-a-team-based-user-management-system-in-firebase/\"},{\"title\":\"Cloud Firestore Data model | Firebase\",\"url\":\"https://firebase.google.com/docs/firestore/data-model\"},{\"title\":\"Choose a data structure | Firestore | Firebase\",\"url\":\"https://firebase.google.com/docs/firestore/manage-data/structure-data\"},{\"title\":\"Secure data access for users and groups | Firestore | Firebase\",\"url\":\"https://firebase.google.com/docs/firestore/solutions/role-based-access\"},{\"title\":\"firebase - Firestore data structure and rules for multi organisation, multi user setup with variable roles - Stack Overflow\",\"url\":\"https://stackoverflow.com/questions/75551243/firestore-data-structure-and-rules-for-multi-organisation-multi-user-setup-with\"},{\"title\":\"Structure Your Database | Firebase Realtime Database\",\"url\":\"https://firebase.google.com/docs/database/web/structure-data\"},{\"title\":\"Tutorial: Advanced Data Modeling with Firestore by Example | Fireship.io\",\"url\":\"https://fireship.io/lessons/advanced-firestore-nosql-data-structure-examples/\"},{\"title\":\"firebase - Firestore - proper NoSQL structure for user-specific data - Stack Overflow\",\"url\":\"https://stackoverflow.com/questions/68826443/firestore-proper-nosql-structure-for-user-specific-data\"},{\"title\":\"java - Firebase Firestore : How to structure data - Stack Overflow\",\"url\":\"https://stackoverflow.com/questions/46639990/firebase-firestore-how-to-structure-data\"}]\n\nBased on the search results, I found comprehensive information about Firebase team-based user management systems and Firestore data structure patterns. Here's what I discovered:\n\n## Core Data Structure Pattern\n\nIn order to build a robust team-based user management system in Firebase, you should store all memberships of a team within a subcollection of this team. The recommended structure includes:\n\n### Basic Collections\n- Setup a users collection where every document represents one user.(no content)This is basically a mirror of the Firebase Authentication Database, so when a new user signs up you should create an entry in this collection.\n- Setup a teams collection where every document represents one team.\n\n### Membership Management\nEach membership document contains duplicated data from the team (eg. name) and its user (eg. name, email).(no content)This data is kept in sync by two Cloud Functions that monitor the team and user documents for updates.(no content)A membership document also contains a reference to its user document and a role identifier if necessary.\n\n### Query Optimization\nWhen structuring data in Firestore we want to optimize for reads. So all the data we plan to retrieve in the future should be reachable through a single query.\n\nThe system supports these key queries:\n- Get all users of a given team.\n- Get all the teams a specified user is a member of.\n- Get the current team of a given user.\n\n### Collection Group Queries\nAll memberships are made accessible through a Collection Group Index so that one can retrieve the memberships of a user with a simple where-query.(no content)Collection Group Queries allow retrieving documents from collections that might be nested within other documents, which is exactly what we want for our memberships.\n\n## Security and Access Control\n\nTo restrict access to documents based on team membership you should check for the presence of a membership document within the concerned team.\n\nFor role-based access control, You can take advantage of Cloud Firestore's data model as well as custom security rules to implement role-based access control in your app.(no content)If you need to share with very large or complex groups, consider a system where roles are stored in their own collection rather than as a field on the target document.\n\n## Data Structure Best Practices\n\nData duplication is a very common technique to eliminate the need to read multiple documents. Simple example - we might duplicate or embed a username on every tweet doc to avoid making secondary query to the user doc.(no content)Subcollections allow you to structure data hierarchically, making data easier to access.(no content)Cloud Firestore is optimized for storing large collections of small documents.\n\nThis pattern provides an efficient way to manage team memberships while maintaining good query performance and security through Firestore's built-in features."}]},"uuid":"f6e5faca-f838-4d56-9fc1-1ced2475972c","timestamp":"2025-08-20T14:49:45.754Z","toolUseResult":{"query":"Firebase team-based user management system firestore data structure patterns","results":["I'll search for information about Firebase team-based user management systems and Firestore data structure patterns.",{"tool_use_id":"srvtoolu_01GxYKCUD2ezKGHv2Sp4uvao","content":[{"title":"How to build a team-based user management system with Firebase | by Richard Keil | Firebase Developers | Medium","url":"https://medium.com/firebase-developers/how-to-build-a-team-based-user-management-system-with-firebase-6a9a6e5c740d"},{"title":"How to build a team-based user management system with Firebase | Richard's Blog","url":"https://blog.richartkeil.com/how-to-build-a-team-based-user-management-system-in-firebase/"},{"title":"Cloud Firestore Data model | Firebase","url":"https://firebase.google.com/docs/firestore/data-model"},{"title":"Choose a data structure | Firestore | Firebase","url":"https://firebase.google.com/docs/firestore/manage-data/structure-data"},{"title":"Secure data access for users and groups | Firestore | Firebase","url":"https://firebase.google.com/docs/firestore/solutions/role-based-access"},{"title":"firebase - Firestore data structure and rules for multi organisation, multi user setup with variable roles - Stack Overflow","url":"https://stackoverflow.com/questions/75551243/firestore-data-structure-and-rules-for-multi-organisation-multi-user-setup-with"},{"title":"Structure Your Database | Firebase Realtime Database","url":"https://firebase.google.com/docs/database/web/structure-data"},{"title":"Tutorial: Advanced Data Modeling with Firestore by Example | Fireship.io","url":"https://fireship.io/lessons/advanced-firestore-nosql-data-structure-examples/"},{"title":"firebase - Firestore - proper NoSQL structure for user-specific data - Stack Overflow","url":"https://stackoverflow.com/questions/68826443/firestore-proper-nosql-structure-for-user-specific-data"},{"title":"java - Firebase Firestore : How to structure data - Stack Overflow","url":"https://stackoverflow.com/questions/46639990/firebase-firestore-how-to-structure-data"}]},"Based on the search results, I found comprehensive information about Firebase team-based user management systems and Firestore data structure patterns. Here's what I discovered:\n\n## Core Data Structure Pattern\n\nIn order to build a robust team-based user management system in Firebase, you should store all memberships of a team within a subcollection of this team. The recommended structure includes:\n\n### Basic Collections\n- Setup a users collection where every document represents one user.(no content)This is basically a mirror of the Firebase Authentication Database, so when a new user signs up you should create an entry in this collection.\n- Setup a teams collection where every document represents one team.\n\n### Membership Management\nEach membership document contains duplicated data from the team (eg. name) and its user (eg. name, email).(no content)This data is kept in sync by two Cloud Functions that monitor the team and user documents for updates.(no content)A membership document also contains a reference to its user document and a role identifier if necessary.\n\n### Query Optimization\nWhen structuring data in Firestore we want to optimize for reads. So all the data we plan to retrieve in the future should be reachable through a single query.\n\nThe system supports these key queries:\n- Get all users of a given team.\n- Get all the teams a specified user is a member of.\n- Get the current team of a given user.\n\n### Collection Group Queries\nAll memberships are made accessible through a Collection Group Index so that one can retrieve the memberships of a user with a simple where-query.(no content)Collection Group Queries allow retrieving documents from collections that might be nested within other documents, which is exactly what we want for our memberships.\n\n## Security and Access Control\n\nTo restrict access to documents based on team membership you should check for the presence of a membership document within the concerned team.\n\nFor role-based access control, You can take advantage of Cloud Firestore's data model as well as custom security rules to implement role-based access control in your app.(no content)If you need to share with very large or complex groups, consider a system where roles are stored in their own collection rather than as a field on the target document.\n\n## Data Structure Best Practices\n\nData duplication is a very common technique to eliminate the need to read multiple documents. Simple example - we might duplicate or embed a username on every tweet doc to avoid making secondary query to the user doc.(no content)Subcollections allow you to structure data hierarchically, making data easier to access.(no content)Cloud Firestore is optimized for storing large collections of small documents.\n\nThis pattern provides an efficient way to manage team memberships while maintaining good query performance and security through Firestore's built-in features."],"durationSeconds":26.732149299999932}}
{"parentUuid":"f6e5faca-f838-4d56-9fc1-1ced2475972c","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01PZVNmGtkrsa6J3Kp8w1V4G","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_014z9N2RDzABFyWZa6xzXFMk","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed"},{"id":"2","content":"Analyze current Firestore structure in the codebase","status":"in_progress"},{"id":"3","content":"Design optimal team-based Firestore data structure","status":"pending"},{"id":"4","content":"Create migration plan from current structure to team-based structure","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":1196,"cache_read_input_tokens":22534,"cache_creation":{"ephemeral_5m_input_tokens":1196,"ephemeral_1h_input_tokens":0},"output_tokens":173,"service_tier":"standard"}},"requestId":"req_011CSK9Wquu7YeJ73Yn9ktZ1","type":"assistant","uuid":"83eb8d8f-ce23-45b1-aa66-5a4bfa2f3eec","timestamp":"2025-08-20T14:49:48.817Z"}
{"parentUuid":"83eb8d8f-ce23-45b1-aa66-5a4bfa2f3eec","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_014z9N2RDzABFyWZa6xzXFMk","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"c985a6e4-dd76-4439-b83d-75856b1bfb13","timestamp":"2025-08-20T14:49:48.875Z","toolUseResult":{"oldTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"in_progress","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"pending","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"pending","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"pending","id":"4"}],"newTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"in_progress","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"pending","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"pending","id":"4"}]}}
{"parentUuid":"c985a6e4-dd76-4439-b83d-75856b1bfb13","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01BybM4oi6mdqXyr9dKNYz2B","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me analyze your current Firestore structure:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":363,"cache_read_input_tokens":23730,"cache_creation":{"ephemeral_5m_input_tokens":363,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSK9X51CQ2wAzEUd6cdct","type":"assistant","uuid":"13eca2e6-964f-44ed-a598-f002ac270926","timestamp":"2025-08-20T14:49:51.072Z"}
{"parentUuid":"13eca2e6-964f-44ed-a598-f002ac270926","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01BybM4oi6mdqXyr9dKNYz2B","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01QcvuXhFkNHbY4VVRK9Sg4q","name":"Grep","input":{"pattern":"firestore|Firestore","type":"js","output_mode":"files_with_matches"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":363,"cache_read_input_tokens":23730,"cache_creation":{"ephemeral_5m_input_tokens":363,"ephemeral_1h_input_tokens":0},"output_tokens":109,"service_tier":"standard"}},"requestId":"req_011CSK9X51CQ2wAzEUd6cdct","type":"assistant","uuid":"87196680-2973-4f0a-9fec-183ce13faa66","timestamp":"2025-08-20T14:49:52.159Z"}
{"parentUuid":"87196680-2973-4f0a-9fec-183ce13faa66","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01QcvuXhFkNHbY4VVRK9Sg4q","type":"tool_result","content":"Found 7 files\nC:\\Users\\Brahm\\Git\\Coryphaeus\\src\\views\\Home.vue\nC:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\teamService.js\nC:\\Users\\Brahm\\Git\\Coryphaeus\\src\\stores\\auth.js\nC:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\userService.js\nC:\\Users\\Brahm\\Git\\Coryphaeus\\src\\views\\About.vue\nC:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\authService.js\nC:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\firebase.js"}]},"uuid":"eee1c488-178e-4f86-8472-c3fce0604e2f","timestamp":"2025-08-20T14:49:52.243Z","toolUseResult":{"mode":"files_with_matches","filenames":["C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\views\\Home.vue","C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\teamService.js","C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\stores\\auth.js","C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\userService.js","C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\views\\About.vue","C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\authService.js","C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\firebase.js"],"numFiles":7}}
{"parentUuid":"eee1c488-178e-4f86-8472-c3fce0604e2f","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_015yqUU1RPFpsAGvfLUdhXQP","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01TFCvLa3MzB3eDpRCW2mRAY","name":"Read","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\firebase.js"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":290,"cache_read_input_tokens":24093,"cache_creation":{"ephemeral_5m_input_tokens":290,"ephemeral_1h_input_tokens":0},"output_tokens":25,"service_tier":"standard"}},"requestId":"req_011CSK9XKHgSr7fBBrmgdJzY","type":"assistant","uuid":"0f7076d2-c8d3-4232-8bf5-c60226f8dea3","timestamp":"2025-08-20T14:49:55.560Z"}
{"parentUuid":"0f7076d2-c8d3-4232-8bf5-c60226f8dea3","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_015yqUU1RPFpsAGvfLUdhXQP","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01ANKRgiErrTwHXWY4FLzyfZ","name":"Read","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\userService.js"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":290,"cache_read_input_tokens":24093,"cache_creation":{"ephemeral_5m_input_tokens":290,"ephemeral_1h_input_tokens":0},"output_tokens":25,"service_tier":"standard"}},"requestId":"req_011CSK9XKHgSr7fBBrmgdJzY","type":"assistant","uuid":"9ea67be2-6879-442f-8645-2d9c3ea40fa2","timestamp":"2025-08-20T14:49:56.035Z"}
{"parentUuid":"9ea67be2-6879-442f-8645-2d9c3ea40fa2","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_015yqUU1RPFpsAGvfLUdhXQP","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_012ZCfPSSxQm9GCa3G3ryGgn","name":"Read","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\teamService.js"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":290,"cache_read_input_tokens":24093,"cache_creation":{"ephemeral_5m_input_tokens":290,"ephemeral_1h_input_tokens":0},"output_tokens":190,"service_tier":"standard"}},"requestId":"req_011CSK9XKHgSr7fBBrmgdJzY","type":"assistant","uuid":"d45cfb4a-56db-468d-89fd-651236e14630","timestamp":"2025-08-20T14:49:56.303Z"}
{"parentUuid":"d45cfb4a-56db-468d-89fd-651236e14630","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01TFCvLa3MzB3eDpRCW2mRAY","type":"tool_result","content":"     1→import { initializeApp } from 'firebase/app'\n     2→import { getAuth } from 'firebase/auth'\n     3→import { getFirestore } from 'firebase/firestore'\n     4→import { getStorage } from 'firebase/storage'\n     5→\n     6→// Firebase configuration\n     7→const firebaseConfig = {\n     8→  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n     9→  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n    10→  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n    11→  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,\n    12→  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n    13→  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n    14→}\n    15→\n    16→// Validate required environment variables\n    17→const requiredEnvVars = [\n    18→  'VITE_FIREBASE_API_KEY',\n    19→  'VITE_FIREBASE_AUTH_DOMAIN',\n    20→  'VITE_FIREBASE_PROJECT_ID',\n    21→  'VITE_FIREBASE_STORAGE_BUCKET',\n    22→  'VITE_FIREBASE_MESSAGING_SENDER_ID',\n    23→  'VITE_FIREBASE_APP_ID'\n    24→]\n    25→\n    26→for (const envVar of requiredEnvVars) {\n    27→  if (!import.meta.env[envVar]) {\n    28→    throw new Error(`Missing required Firebase environment variable: ${envVar}`)\n    29→  }\n    30→}\n    31→\n    32→// Initialize Firebase\n    33→const app = initializeApp(firebaseConfig)\n    34→const auth = getAuth(app)\n    35→const db = getFirestore(app)\n    36→const storage = getStorage(app)\n    37→\n    38→export { app, auth, db, storage }\n    39→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"91e272a9-1f84-4fad-9fb9-61de6fe0d152","timestamp":"2025-08-20T14:49:56.347Z","toolUseResult":{"type":"text","file":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\firebase.js","content":"import { initializeApp } from 'firebase/app'\nimport { getAuth } from 'firebase/auth'\nimport { getFirestore } from 'firebase/firestore'\nimport { getStorage } from 'firebase/storage'\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n}\n\n// Validate required environment variables\nconst requiredEnvVars = [\n  'VITE_FIREBASE_API_KEY',\n  'VITE_FIREBASE_AUTH_DOMAIN',\n  'VITE_FIREBASE_PROJECT_ID',\n  'VITE_FIREBASE_STORAGE_BUCKET',\n  'VITE_FIREBASE_MESSAGING_SENDER_ID',\n  'VITE_FIREBASE_APP_ID'\n]\n\nfor (const envVar of requiredEnvVars) {\n  if (!import.meta.env[envVar]) {\n    throw new Error(`Missing required Firebase environment variable: ${envVar}`)\n  }\n}\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig)\nconst auth = getAuth(app)\nconst db = getFirestore(app)\nconst storage = getStorage(app)\n\nexport { app, auth, db, storage }\n","numLines":39,"startLine":1,"totalLines":39}}}
{"parentUuid":"91e272a9-1f84-4fad-9fb9-61de6fe0d152","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01ANKRgiErrTwHXWY4FLzyfZ","type":"tool_result","content":"     1→import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore'\n     2→import { db, auth } from './firebase.js'\n     3→\n     4→/**\n     5→ * UserService - Manages user information and display names\n     6→ */\n     7→export class UserService {\n     8→  // Cache to prevent repeated lookups for the same user\n     9→  static userCache = new Map()\n    10→\n    11→  /**\n    12→   * Get display name for a user ID\n    13→   * @param {string} userId - Firebase user UID\n    14→   * @returns {Promise<string>} Display name or fallback\n    15→   */\n    16→  static async getUserDisplayName(userId) {\n    17→    if (!userId) {\n    18→      return 'Unknown User'\n    19→    }\n    20→\n    21→    // Check cache first\n    22→    if (this.userCache.has(userId)) {\n    23→      return this.userCache.get(userId)\n    24→    }\n    25→\n    26→\n    27→    try {\n    28→      // Try to get basic info from current Firebase Auth user if it's the same user\n    29→      if (auth.currentUser && auth.currentUser.uid === userId) {\n    30→        const displayName =\n    31→          auth.currentUser.displayName || auth.currentUser.email?.split('@')[0] || 'Current User'\n    32→        this.userCache.set(userId, displayName)\n    33→        return displayName\n    34→      }\n    35→\n    36→      // For other users, we can't get display names from Firebase Auth (security restriction)\n    37→      // and we no longer store identity data in Firestore (single source of truth)\n    38→      // So we fall back to UID-based display names\n    39→\n    40→      let displayName = 'Unknown User'\n    41→      \n    42→      if (userId.includes('@')) {\n    43→        // If userId looks like an email, use the part before @\n    44→        displayName = userId.split('@')[0]\n    45→      } else if (userId.length > 10) {\n    46→        // For long UIDs, show a shortened version\n    47→        displayName = `User-${userId.substring(0, 8)}`\n    48→      } else {\n    49→        displayName = 'Unknown User'\n    50→      }\n    51→\n    52→      // Cache the result\n    53→      this.userCache.set(userId, displayName)\n    54→      return displayName\n    55→    } catch (error) {\n    56→      console.error('Error fetching user display name:', error)\n    57→\n    58→      // Cache the fallback to prevent repeated failed lookups\n    59→      this.userCache.set(userId, 'Unknown User')\n    60→      return 'Unknown User'\n    61→    }\n    62→  }\n    63→\n    64→  /**\n    65→   * Create or update user app-specific data in Firestore\n    66→   * Note: Identity data (email, displayName, photoURL) comes from Firebase Auth\n    67→   * @param {Object} firebaseUser - Firebase Auth user object\n    68→   * @param {Object} additionalData - Additional user data (role, etc.)\n    69→   * @returns {Promise<void>}\n    70→   */\n    71→  static async createOrUpdateUserDocument(firebaseUser, additionalData = {}) {\n    72→    if (!firebaseUser || !firebaseUser.uid) {\n    73→      throw new Error('Valid Firebase user required')\n    74→    }\n    75→\n    76→\n    77→    try {\n    78→      const userDocRef = doc(db, 'users', firebaseUser.uid)\n    79→\n    80→      // Only store application-specific data, not identity data\n    81→      const userData = {\n    82→        // Application-specific fields only\n    83→        role: additionalData.role || 'user',\n    84→        department: additionalData.department || null,\n    85→        teamId: additionalData.teamId || null,\n    86→        preferences: additionalData.preferences || {},\n    87→\n    88→        // Activity timestamps\n    89→        updatedAt: serverTimestamp(),\n    90→        lastLogin: serverTimestamp(),\n    91→      }\n    92→\n    93→      // Check if document already exists\n    94→      const existingDoc = await getDoc(userDocRef)\n    95→      if (!existingDoc.exists()) {\n    96→        userData.createdAt = serverTimestamp()\n    97→      }\n    98→\n    99→      await setDoc(userDocRef, userData, { merge: true })\n   100→\n   101→      // Clear cache to force refresh of user data\n   102→      this.userCache.delete(firebaseUser.uid)\n   103→    } catch (error) {\n   104→      console.error('Error creating/updating user document:', error)\n   105→      throw error\n   106→    }\n   107→  }\n   108→\n   109→  /**\n   110→   * Clear the user cache (useful for testing or when user data changes)\n   111→   */\n   112→  static clearCache() {\n   113→    this.userCache.clear()\n   114→  }\n   115→\n   116→  /**\n   117→   * Preload multiple user display names for better performance\n   118→   * @param {string[]} userIds - Array of user IDs to preload\n   119→   * @returns {Promise<Map>} Map of userId -> displayName\n   120→   */\n   121→  static async preloadUserDisplayNames(userIds) {\n   122→    const results = new Map()\n   123→    const promises = userIds.map(async (userId) => {\n   124→      const displayName = await this.getUserDisplayName(userId)\n   125→      results.set(userId, displayName)\n   126→    })\n   127→\n   128→    await Promise.all(promises)\n   129→    return results\n   130→  }\n   131→}\n   132→\n   133→export default UserService\n   134→\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"2ccce649-b129-498c-a17a-8b8b41806c71","timestamp":"2025-08-20T14:49:56.347Z","toolUseResult":{"type":"text","file":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\userService.js","content":"import { doc, getDoc, setDoc, serverTimestamp } from 'firebase/firestore'\nimport { db, auth } from './firebase.js'\n\n/**\n * UserService - Manages user information and display names\n */\nexport class UserService {\n  // Cache to prevent repeated lookups for the same user\n  static userCache = new Map()\n\n  /**\n   * Get display name for a user ID\n   * @param {string} userId - Firebase user UID\n   * @returns {Promise<string>} Display name or fallback\n   */\n  static async getUserDisplayName(userId) {\n    if (!userId) {\n      return 'Unknown User'\n    }\n\n    // Check cache first\n    if (this.userCache.has(userId)) {\n      return this.userCache.get(userId)\n    }\n\n\n    try {\n      // Try to get basic info from current Firebase Auth user if it's the same user\n      if (auth.currentUser && auth.currentUser.uid === userId) {\n        const displayName =\n          auth.currentUser.displayName || auth.currentUser.email?.split('@')[0] || 'Current User'\n        this.userCache.set(userId, displayName)\n        return displayName\n      }\n\n      // For other users, we can't get display names from Firebase Auth (security restriction)\n      // and we no longer store identity data in Firestore (single source of truth)\n      // So we fall back to UID-based display names\n\n      let displayName = 'Unknown User'\n      \n      if (userId.includes('@')) {\n        // If userId looks like an email, use the part before @\n        displayName = userId.split('@')[0]\n      } else if (userId.length > 10) {\n        // For long UIDs, show a shortened version\n        displayName = `User-${userId.substring(0, 8)}`\n      } else {\n        displayName = 'Unknown User'\n      }\n\n      // Cache the result\n      this.userCache.set(userId, displayName)\n      return displayName\n    } catch (error) {\n      console.error('Error fetching user display name:', error)\n\n      // Cache the fallback to prevent repeated failed lookups\n      this.userCache.set(userId, 'Unknown User')\n      return 'Unknown User'\n    }\n  }\n\n  /**\n   * Create or update user app-specific data in Firestore\n   * Note: Identity data (email, displayName, photoURL) comes from Firebase Auth\n   * @param {Object} firebaseUser - Firebase Auth user object\n   * @param {Object} additionalData - Additional user data (role, etc.)\n   * @returns {Promise<void>}\n   */\n  static async createOrUpdateUserDocument(firebaseUser, additionalData = {}) {\n    if (!firebaseUser || !firebaseUser.uid) {\n      throw new Error('Valid Firebase user required')\n    }\n\n\n    try {\n      const userDocRef = doc(db, 'users', firebaseUser.uid)\n\n      // Only store application-specific data, not identity data\n      const userData = {\n        // Application-specific fields only\n        role: additionalData.role || 'user',\n        department: additionalData.department || null,\n        teamId: additionalData.teamId || null,\n        preferences: additionalData.preferences || {},\n\n        // Activity timestamps\n        updatedAt: serverTimestamp(),\n        lastLogin: serverTimestamp(),\n      }\n\n      // Check if document already exists\n      const existingDoc = await getDoc(userDocRef)\n      if (!existingDoc.exists()) {\n        userData.createdAt = serverTimestamp()\n      }\n\n      await setDoc(userDocRef, userData, { merge: true })\n\n      // Clear cache to force refresh of user data\n      this.userCache.delete(firebaseUser.uid)\n    } catch (error) {\n      console.error('Error creating/updating user document:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Clear the user cache (useful for testing or when user data changes)\n   */\n  static clearCache() {\n    this.userCache.clear()\n  }\n\n  /**\n   * Preload multiple user display names for better performance\n   * @param {string[]} userIds - Array of user IDs to preload\n   * @returns {Promise<Map>} Map of userId -> displayName\n   */\n  static async preloadUserDisplayNames(userIds) {\n    const results = new Map()\n    const promises = userIds.map(async (userId) => {\n      const displayName = await this.getUserDisplayName(userId)\n      results.set(userId, displayName)\n    })\n\n    await Promise.all(promises)\n    return results\n  }\n}\n\nexport default UserService\n","numLines":134,"startLine":1,"totalLines":134}}}
{"parentUuid":"2ccce649-b129-498c-a17a-8b8b41806c71","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_012ZCfPSSxQm9GCa3G3ryGgn","type":"tool_result","content":"     1→import { doc, getDoc, setDoc, collection, getDocs, serverTimestamp } from 'firebase/firestore'\n     2→import { db } from './firebase.js'\n     3→\n     4→/**\n     5→ * TeamService - Manages team operations for Multi-App SSO\n     6→ */\n     7→export class TeamService {\n     8→  /**\n     9→   * Create a new team\n    10→   * @param {string} teamId - Unique team identifier\n    11→   * @param {Object} teamData - Team information\n    12→   * @returns {Promise<void>}\n    13→   */\n    14→  static async createTeam(teamId, teamData) {\n    15→    if (!teamId || !teamData.name) {\n    16→      throw new Error('Team ID and name are required')\n    17→    }\n    18→\n    19→    try {\n    20→      const teamDocRef = doc(db, 'teams', teamId)\n    21→      \n    22→      const team = {\n    23→        name: teamData.name,\n    24→        description: teamData.description || '',\n    25→        members: {},\n    26→        settings: teamData.settings || {},\n    27→        createdAt: serverTimestamp(),\n    28→        updatedAt: serverTimestamp(),\n    29→      }\n    30→\n    31→      await setDoc(teamDocRef, team)\n    32→      console.log(`Team created: ${teamId}`)\n    33→    } catch (error) {\n    34→      console.error('Error creating team:', error)\n    35→      throw error\n    36→    }\n    37→  }\n    38→\n    39→  /**\n    40→   * Get team information\n    41→   * @param {string} teamId - Team identifier\n    42→   * @returns {Promise<Object|null>} Team data or null if not found\n    43→   */\n    44→  static async getTeam(teamId) {\n    45→    if (!teamId) {\n    46→      return null\n    47→    }\n    48→\n    49→    try {\n    50→      const teamDocRef = doc(db, 'teams', teamId)\n    51→      const teamDoc = await getDoc(teamDocRef)\n    52→      \n    53→      if (teamDoc.exists()) {\n    54→        return { id: teamDoc.id, ...teamDoc.data() }\n    55→      }\n    56→      \n    57→      return null\n    58→    } catch (error) {\n    59→      console.error('Error fetching team:', error)\n    60→      throw error\n    61→    }\n    62→  }\n    63→\n    64→  /**\n    65→   * Add user to team\n    66→   * @param {string} teamId - Team identifier\n    67→   * @param {string} userId - User identifier\n    68→   * @param {Object} memberData - Member information (email, role, etc.)\n    69→   * @returns {Promise<void>}\n    70→   */\n    71→  static async addTeamMember(teamId, userId, memberData) {\n    72→    if (!teamId || !userId || !memberData.email) {\n    73→      throw new Error('Team ID, User ID, and email are required')\n    74→    }\n    75→\n    76→    try {\n    77→      const teamDocRef = doc(db, 'teams', teamId)\n    78→      const teamDoc = await getDoc(teamDocRef)\n    79→      \n    80→      if (!teamDoc.exists()) {\n    81→        throw new Error('Team does not exist')\n    82→      }\n    83→\n    84→      const teamData = teamDoc.data()\n    85→      const members = teamData.members || {}\n    86→\n    87→      // Add new member\n    88→      members[userId] = {\n    89→        email: memberData.email,\n    90→        role: memberData.role || 'member',\n    91→        joinedAt: serverTimestamp(),\n    92→      }\n    93→\n    94→      // Update team document\n    95→      await setDoc(teamDocRef, {\n    96→        ...teamData,\n    97→        members,\n    98→        updatedAt: serverTimestamp(),\n    99→      })\n   100→\n   101→      console.log(`User ${userId} added to team ${teamId}`)\n   102→    } catch (error) {\n   103→      console.error('Error adding team member:', error)\n   104→      throw error\n   105→    }\n   106→  }\n   107→\n   108→  /**\n   109→   * Remove user from team\n   110→   * @param {string} teamId - Team identifier\n   111→   * @param {string} userId - User identifier\n   112→   * @returns {Promise<void>}\n   113→   */\n   114→  static async removeTeamMember(teamId, userId) {\n   115→    if (!teamId || !userId) {\n   116→      throw new Error('Team ID and User ID are required')\n   117→    }\n   118→\n   119→    try {\n   120→      const teamDocRef = doc(db, 'teams', teamId)\n   121→      const teamDoc = await getDoc(teamDocRef)\n   122→      \n   123→      if (!teamDoc.exists()) {\n   124→        throw new Error('Team does not exist')\n   125→      }\n   126→\n   127→      const teamData = teamDoc.data()\n   128→      const members = teamData.members || {}\n   129→\n   130→      // Remove member\n   131→      delete members[userId]\n   132→\n   133→      // Update team document\n   134→      await setDoc(teamDocRef, {\n   135→        ...teamData,\n   136→        members,\n   137→        updatedAt: serverTimestamp(),\n   138→      })\n   139→\n   140→      console.log(`User ${userId} removed from team ${teamId}`)\n   141→    } catch (error) {\n   142→      console.error('Error removing team member:', error)\n   143→      throw error\n   144→    }\n   145→  }\n   146→\n   147→  /**\n   148→   * Check if user is member of team\n   149→   * @param {string} teamId - Team identifier\n   150→   * @param {string} userId - User identifier\n   151→   * @returns {Promise<boolean>} True if user is member\n   152→   */\n   153→  static async isTeamMember(teamId, userId) {\n   154→    if (!teamId || !userId) {\n   155→      return false\n   156→    }\n   157→\n   158→    try {\n   159→      const team = await this.getTeam(teamId)\n   160→      return team && team.members && team.members[userId] !== undefined\n   161→    } catch (error) {\n   162→      console.error('Error checking team membership:', error)\n   163→      return false\n   164→    }\n   165→  }\n   166→\n   167→  /**\n   168→   * Get user's teams\n   169→   * @param {string} userId - User identifier\n   170→   * @returns {Promise<Array>} Array of teams user belongs to\n   171→   */\n   172→  static async getUserTeams(userId) {\n   173→    if (!userId) {\n   174→      return []\n   175→    }\n   176→\n   177→    try {\n   178→      // This is a simple implementation - in production you might want to \n   179→      // maintain a separate index or use a more efficient query structure\n   180→      const teamsRef = collection(db, 'teams')\n   181→      const teamsSnapshot = await getDocs(teamsRef)\n   182→      \n   183→      const userTeams = []\n   184→      teamsSnapshot.forEach((doc) => {\n   185→        const teamData = doc.data()\n   186→        if (teamData.members && teamData.members[userId]) {\n   187→          userTeams.push({\n   188→            id: doc.id,\n   189→            ...teamData,\n   190→            userRole: teamData.members[userId].role\n   191→          })\n   192→        }\n   193→      })\n   194→\n   195→      return userTeams\n   196→    } catch (error) {\n   197→      console.error('Error fetching user teams:', error)\n   198→      return []\n   199→    }\n   200→  }\n   201→\n   202→  /**\n   203→   * Update team member role\n   204→   * @param {string} teamId - Team identifier\n   205→   * @param {string} userId - User identifier\n   206→   * @param {string} newRole - New role for the user\n   207→   * @returns {Promise<void>}\n   208→   */\n   209→  static async updateMemberRole(teamId, userId, newRole) {\n   210→    if (!teamId || !userId || !newRole) {\n   211→      throw new Error('Team ID, User ID, and new role are required')\n   212→    }\n   213→\n   214→    try {\n   215→      const teamDocRef = doc(db, 'teams', teamId)\n   216→      const teamDoc = await getDoc(teamDocRef)\n   217→      \n   218→      if (!teamDoc.exists()) {\n   219→        throw new Error('Team does not exist')\n   220→      }\n   221→\n   222→      const teamData = teamDoc.data()\n   223→      const members = teamData.members || {}\n   224→\n   225→      if (!members[userId]) {\n   226→        throw new Error('User is not a member of this team')\n   227→      }\n   228→\n   229→      // Update member role\n   230→      members[userId].role = newRole\n   231→\n   232→      // Update team document\n   233→      await setDoc(teamDocRef, {\n   234→        ...teamData,\n   235→        members,\n   236→        updatedAt: serverTimestamp(),\n   237→      })\n   238→\n   239→      console.log(`User ${userId} role updated to ${newRole} in team ${teamId}`)\n   240→    } catch (error) {\n   241→      console.error('Error updating member role:', error)\n   242→      throw error\n   243→    }\n   244→  }\n   245→}\n   246→\n   247→export default TeamService\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"1873a846-daec-4518-b9e0-73d8655c9dcd","timestamp":"2025-08-20T14:49:56.347Z","toolUseResult":{"type":"text","file":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\src\\services\\teamService.js","content":"import { doc, getDoc, setDoc, collection, getDocs, serverTimestamp } from 'firebase/firestore'\nimport { db } from './firebase.js'\n\n/**\n * TeamService - Manages team operations for Multi-App SSO\n */\nexport class TeamService {\n  /**\n   * Create a new team\n   * @param {string} teamId - Unique team identifier\n   * @param {Object} teamData - Team information\n   * @returns {Promise<void>}\n   */\n  static async createTeam(teamId, teamData) {\n    if (!teamId || !teamData.name) {\n      throw new Error('Team ID and name are required')\n    }\n\n    try {\n      const teamDocRef = doc(db, 'teams', teamId)\n      \n      const team = {\n        name: teamData.name,\n        description: teamData.description || '',\n        members: {},\n        settings: teamData.settings || {},\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      }\n\n      await setDoc(teamDocRef, team)\n      console.log(`Team created: ${teamId}`)\n    } catch (error) {\n      console.error('Error creating team:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get team information\n   * @param {string} teamId - Team identifier\n   * @returns {Promise<Object|null>} Team data or null if not found\n   */\n  static async getTeam(teamId) {\n    if (!teamId) {\n      return null\n    }\n\n    try {\n      const teamDocRef = doc(db, 'teams', teamId)\n      const teamDoc = await getDoc(teamDocRef)\n      \n      if (teamDoc.exists()) {\n        return { id: teamDoc.id, ...teamDoc.data() }\n      }\n      \n      return null\n    } catch (error) {\n      console.error('Error fetching team:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Add user to team\n   * @param {string} teamId - Team identifier\n   * @param {string} userId - User identifier\n   * @param {Object} memberData - Member information (email, role, etc.)\n   * @returns {Promise<void>}\n   */\n  static async addTeamMember(teamId, userId, memberData) {\n    if (!teamId || !userId || !memberData.email) {\n      throw new Error('Team ID, User ID, and email are required')\n    }\n\n    try {\n      const teamDocRef = doc(db, 'teams', teamId)\n      const teamDoc = await getDoc(teamDocRef)\n      \n      if (!teamDoc.exists()) {\n        throw new Error('Team does not exist')\n      }\n\n      const teamData = teamDoc.data()\n      const members = teamData.members || {}\n\n      // Add new member\n      members[userId] = {\n        email: memberData.email,\n        role: memberData.role || 'member',\n        joinedAt: serverTimestamp(),\n      }\n\n      // Update team document\n      await setDoc(teamDocRef, {\n        ...teamData,\n        members,\n        updatedAt: serverTimestamp(),\n      })\n\n      console.log(`User ${userId} added to team ${teamId}`)\n    } catch (error) {\n      console.error('Error adding team member:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Remove user from team\n   * @param {string} teamId - Team identifier\n   * @param {string} userId - User identifier\n   * @returns {Promise<void>}\n   */\n  static async removeTeamMember(teamId, userId) {\n    if (!teamId || !userId) {\n      throw new Error('Team ID and User ID are required')\n    }\n\n    try {\n      const teamDocRef = doc(db, 'teams', teamId)\n      const teamDoc = await getDoc(teamDocRef)\n      \n      if (!teamDoc.exists()) {\n        throw new Error('Team does not exist')\n      }\n\n      const teamData = teamDoc.data()\n      const members = teamData.members || {}\n\n      // Remove member\n      delete members[userId]\n\n      // Update team document\n      await setDoc(teamDocRef, {\n        ...teamData,\n        members,\n        updatedAt: serverTimestamp(),\n      })\n\n      console.log(`User ${userId} removed from team ${teamId}`)\n    } catch (error) {\n      console.error('Error removing team member:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Check if user is member of team\n   * @param {string} teamId - Team identifier\n   * @param {string} userId - User identifier\n   * @returns {Promise<boolean>} True if user is member\n   */\n  static async isTeamMember(teamId, userId) {\n    if (!teamId || !userId) {\n      return false\n    }\n\n    try {\n      const team = await this.getTeam(teamId)\n      return team && team.members && team.members[userId] !== undefined\n    } catch (error) {\n      console.error('Error checking team membership:', error)\n      return false\n    }\n  }\n\n  /**\n   * Get user's teams\n   * @param {string} userId - User identifier\n   * @returns {Promise<Array>} Array of teams user belongs to\n   */\n  static async getUserTeams(userId) {\n    if (!userId) {\n      return []\n    }\n\n    try {\n      // This is a simple implementation - in production you might want to \n      // maintain a separate index or use a more efficient query structure\n      const teamsRef = collection(db, 'teams')\n      const teamsSnapshot = await getDocs(teamsRef)\n      \n      const userTeams = []\n      teamsSnapshot.forEach((doc) => {\n        const teamData = doc.data()\n        if (teamData.members && teamData.members[userId]) {\n          userTeams.push({\n            id: doc.id,\n            ...teamData,\n            userRole: teamData.members[userId].role\n          })\n        }\n      })\n\n      return userTeams\n    } catch (error) {\n      console.error('Error fetching user teams:', error)\n      return []\n    }\n  }\n\n  /**\n   * Update team member role\n   * @param {string} teamId - Team identifier\n   * @param {string} userId - User identifier\n   * @param {string} newRole - New role for the user\n   * @returns {Promise<void>}\n   */\n  static async updateMemberRole(teamId, userId, newRole) {\n    if (!teamId || !userId || !newRole) {\n      throw new Error('Team ID, User ID, and new role are required')\n    }\n\n    try {\n      const teamDocRef = doc(db, 'teams', teamId)\n      const teamDoc = await getDoc(teamDocRef)\n      \n      if (!teamDoc.exists()) {\n        throw new Error('Team does not exist')\n      }\n\n      const teamData = teamDoc.data()\n      const members = teamData.members || {}\n\n      if (!members[userId]) {\n        throw new Error('User is not a member of this team')\n      }\n\n      // Update member role\n      members[userId].role = newRole\n\n      // Update team document\n      await setDoc(teamDocRef, {\n        ...teamData,\n        members,\n        updatedAt: serverTimestamp(),\n      })\n\n      console.log(`User ${userId} role updated to ${newRole} in team ${teamId}`)\n    } catch (error) {\n      console.error('Error updating member role:', error)\n      throw error\n    }\n  }\n}\n\nexport default TeamService","numLines":247,"startLine":1,"totalLines":247}}}
{"parentUuid":"1873a846-daec-4518-b9e0-73d8655c9dcd","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01JvFuy3jPjwHNJK38cKAzA6","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_011QTT3QxciuLobzVspbFLMS","name":"Glob","input":{"pattern":"firestore.rules"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":5222,"cache_read_input_tokens":24383,"cache_creation":{"ephemeral_5m_input_tokens":5222,"ephemeral_1h_input_tokens":0},"output_tokens":55,"service_tier":"standard"}},"requestId":"req_011CSK9Xd6W1frnUwcjKA1Vc","type":"assistant","uuid":"ca184188-72dd-449d-b4ed-76675b3bd13e","timestamp":"2025-08-20T14:49:59.003Z"}
{"parentUuid":"ca184188-72dd-449d-b4ed-76675b3bd13e","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_011QTT3QxciuLobzVspbFLMS","type":"tool_result","content":"C:\\Users\\Brahm\\Git\\Coryphaeus\\firestore.rules"}]},"uuid":"1decaebf-c0b6-484f-9037-45686c6d6ae1","timestamp":"2025-08-20T14:49:59.067Z","toolUseResult":{"filenames":["C:\\Users\\Brahm\\Git\\Coryphaeus\\firestore.rules"],"durationMs":9,"numFiles":1,"truncated":false}}
{"parentUuid":"1decaebf-c0b6-484f-9037-45686c6d6ae1","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01T5xaf2EesAEwB2AXdPA87i","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01WGqztx5U1osonfDYg2JSBE","name":"Read","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\firestore.rules"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":87,"cache_read_input_tokens":29605,"cache_creation":{"ephemeral_5m_input_tokens":87,"ephemeral_1h_input_tokens":0},"output_tokens":71,"service_tier":"standard"}},"requestId":"req_011CSK9XpUrarNkLqEk59aBy","type":"assistant","uuid":"b7a2dada-a733-45c0-b249-edeb39b8fb2e","timestamp":"2025-08-20T14:50:02.618Z"}
{"parentUuid":"b7a2dada-a733-45c0-b249-edeb39b8fb2e","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01WGqztx5U1osonfDYg2JSBE","type":"tool_result","content":"     1→rules_version = '2';\n     2→service cloud.firestore {\n     3→  match /databases/{database}/documents {\n     4→    \n     5→    // Users collection - users can read/write their own document\n     6→    match /users/{userId} {\n     7→      allow read, write: if request.auth != null && request.auth.uid == userId;\n     8→    }\n     9→    \n    10→    // Teams collection - team-based access control\n    11→    match /teams/{teamId} {\n    12→      // Allow read if user is authenticated and is a member of the team\n    13→      allow read: if request.auth != null && \n    14→        (\n    15→          // Check custom claims for teamId (preferred for SSO)\n    16→          request.auth.token.teamId == teamId ||\n    17→          // Fallback: check if user is listed as a member in the team document\n    18→          request.auth.uid in resource.data.members.keys()\n    19→        );\n    20→      \n    21→      // Allow write if user is authenticated and is an admin of the team\n    22→      allow write: if request.auth != null && \n    23→        (\n    24→          // Check if user has admin role in custom claims\n    25→          (request.auth.token.teamId == teamId && request.auth.token.role == 'admin') ||\n    26→          // Fallback: check if user is an admin member in the team document\n    27→          (request.auth.uid in resource.data.members.keys() && \n    28→           resource.data.members[request.auth.uid].role == 'admin')\n    29→        );\n    30→      \n    31→      // Allow create if user is authenticated (for initial team creation)\n    32→      allow create: if request.auth != null;\n    33→    }\n    34→    \n    35→    // Team-specific data collections (if you add sub-collections to teams)\n    36→    match /teams/{teamId}/{document=**} {\n    37→      // Users can access team data if they're team members\n    38→      allow read, write: if request.auth != null && \n    39→        (\n    40→          // Check custom claims for teamId\n    41→          request.auth.token.teamId == teamId ||\n    42→          // Fallback: check team membership (requires additional read)\n    43→          exists(/databases/$(database)/documents/teams/$(teamId)) &&\n    44→          request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.members.keys()\n    45→        );\n    46→    }\n    47→    \n    48→    // App-specific collections with team scoping\n    49→    // Example: documents, projects, etc. that should be team-scoped\n    50→    match /documents/{documentId} {\n    51→      allow read, write: if request.auth != null && \n    52→        request.auth.token.teamId != null &&\n    53→        // Ensure document belongs to user's team\n    54→        resource.data.teamId == request.auth.token.teamId;\n    55→      \n    56→      allow create: if request.auth != null && \n    57→        request.auth.token.teamId != null &&\n    58→        // Ensure new document is assigned to user's team\n    59→        request.resource.data.teamId == request.auth.token.teamId;\n    60→    }\n    61→    \n    62→    // Global admin access (optional - for super admins)\n    63→    match /{document=**} {\n    64→      allow read, write: if request.auth != null && \n    65→        request.auth.token.role == 'superadmin';\n    66→    }\n    67→    \n    68→    // Default: deny all other access\n    69→    match /{document=**} {\n    70→      allow read, write: if false;\n    71→    }\n    72→  }\n    73→}\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"90fa4662-3823-4152-bbed-306143718c24","timestamp":"2025-08-20T14:50:02.694Z","toolUseResult":{"type":"text","file":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\firestore.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Users collection - users can read/write their own document\n    match /users/{userId} {\n      allow read, write: if request.auth != null && request.auth.uid == userId;\n    }\n    \n    // Teams collection - team-based access control\n    match /teams/{teamId} {\n      // Allow read if user is authenticated and is a member of the team\n      allow read: if request.auth != null && \n        (\n          // Check custom claims for teamId (preferred for SSO)\n          request.auth.token.teamId == teamId ||\n          // Fallback: check if user is listed as a member in the team document\n          request.auth.uid in resource.data.members.keys()\n        );\n      \n      // Allow write if user is authenticated and is an admin of the team\n      allow write: if request.auth != null && \n        (\n          // Check if user has admin role in custom claims\n          (request.auth.token.teamId == teamId && request.auth.token.role == 'admin') ||\n          // Fallback: check if user is an admin member in the team document\n          (request.auth.uid in resource.data.members.keys() && \n           resource.data.members[request.auth.uid].role == 'admin')\n        );\n      \n      // Allow create if user is authenticated (for initial team creation)\n      allow create: if request.auth != null;\n    }\n    \n    // Team-specific data collections (if you add sub-collections to teams)\n    match /teams/{teamId}/{document=**} {\n      // Users can access team data if they're team members\n      allow read, write: if request.auth != null && \n        (\n          // Check custom claims for teamId\n          request.auth.token.teamId == teamId ||\n          // Fallback: check team membership (requires additional read)\n          exists(/databases/$(database)/documents/teams/$(teamId)) &&\n          request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.members.keys()\n        );\n    }\n    \n    // App-specific collections with team scoping\n    // Example: documents, projects, etc. that should be team-scoped\n    match /documents/{documentId} {\n      allow read, write: if request.auth != null && \n        request.auth.token.teamId != null &&\n        // Ensure document belongs to user's team\n        resource.data.teamId == request.auth.token.teamId;\n      \n      allow create: if request.auth != null && \n        request.auth.token.teamId != null &&\n        // Ensure new document is assigned to user's team\n        request.resource.data.teamId == request.auth.token.teamId;\n    }\n    \n    // Global admin access (optional - for super admins)\n    match /{document=**} {\n      allow read, write: if request.auth != null && \n        request.auth.token.role == 'superadmin';\n    }\n    \n    // Default: deny all other access\n    match /{document=**} {\n      allow read, write: if false;\n    }\n  }\n}","numLines":73,"startLine":1,"totalLines":73}}}
{"parentUuid":"90fa4662-3823-4152-bbed-306143718c24","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_016ZJGwy9JUqvABFWmZHUT4f","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01J619GR8gLVn9gXGRMVPtDG","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed"},{"id":"2","content":"Analyze current Firestore structure in the codebase","status":"completed"},{"id":"3","content":"Design optimal team-based Firestore data structure","status":"in_progress"},{"id":"4","content":"Create migration plan from current structure to team-based structure","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":1148,"cache_read_input_tokens":29692,"cache_creation":{"ephemeral_5m_input_tokens":1148,"ephemeral_1h_input_tokens":0},"output_tokens":173,"service_tier":"standard"}},"requestId":"req_011CSK9Y62VNc5vEo8GZXfgk","type":"assistant","uuid":"24be65d5-6768-4af2-9f5a-3756b602267a","timestamp":"2025-08-20T14:50:07.860Z"}
{"parentUuid":"24be65d5-6768-4af2-9f5a-3756b602267a","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01J619GR8gLVn9gXGRMVPtDG","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"32918868-f21f-4430-a1cd-1be28d1019c3","timestamp":"2025-08-20T14:50:07.895Z","toolUseResult":{"oldTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"in_progress","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"pending","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"pending","id":"4"}],"newTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"completed","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"in_progress","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"pending","id":"4"}]}}
{"parentUuid":"32918868-f21f-4430-a1cd-1be28d1019c3","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01JPcCHYZyyJFzM33bJVMsFd","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Based on my analysis, I can see that you **have already partially implemented team accounts**! Your current structure includes:\n\n## Current Implementation Status\n\n✅ **Already Implemented:**\n- `teams` collection with proper structure\n- Team membership management in `TeamService`  \n- Security rules for team-based access control\n- Custom claims for efficient authorization\n- Multi-tenant architecture with `teamId` field in user documents\n\n✅ **Current Collections:**\n- `users/{userId}` - User application data with `teamId` reference\n- `teams/{teamId}` - Team documents with embedded members map\n\nHowever, there are some opportunities for optimization. Let me design the optimal structure:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":363,"cache_read_input_tokens":30840,"cache_creation":{"ephemeral_5m_input_tokens":363,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSK9YUMfevFYJ4tDZJFv2","type":"assistant","uuid":"2fa25307-13b8-48c1-baa6-9bd60ca834f7","timestamp":"2025-08-20T14:50:14.048Z"}
{"parentUuid":"2fa25307-13b8-48c1-baa6-9bd60ca834f7","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01JPcCHYZyyJFzM33bJVMsFd","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_019hXgEqCCyqdt6Bm3EQg2K3","name":"Write","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","content":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Current Implementation Analysis\n\n### ✅ What's Already Working\n- Basic team-based multi-tenancy with `teams` and `users` collections\n- Security rules with custom claims for efficient authorization\n- Team membership embedded in team documents\n- Multi-App SSO authentication flow\n\n### 🔄 Areas for Optimization\n- Large teams may hit Firestore document size limits (1MB) with embedded members\n- Querying user memberships requires scanning all teams (inefficient at scale)\n- No invitation system for adding members\n- Missing audit trails for membership changes\n\n## Optimal Data Structure\n\n### Core Collections\n\n#### 1. Users Collection: `/users/{userId}`\n**Purpose**: Store application-specific user data (NOT identity data - that stays in Firebase Auth)\n\n```javascript\n{\n  // Application-specific data only\n  role: 'user' | 'admin',\n  department: 'Engineering',\n  defaultTeamId: 'team-abc-123',  // User's primary team\n  preferences: {\n    theme: 'light',\n    notifications: true,\n    language: 'en'\n  },\n  \n  // Activity tracking\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  lastLogin: Timestamp,\n  \n  // Note: email, displayName, photoURL come from Firebase Auth\n  // teamId is set via custom claims, not stored here\n}\n```\n\n#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information\n\n```javascript\n{\n  name: 'ACME Corporation',\n  description: 'Engineering team for Project X',\n  domain: 'acme.com',  // Optional: for email domain-based auto-join\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    features: ['files', 'projects', 'billing']\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```\n\n#### 3. Team Memberships Subcollection: `/teams/{teamId}/memberships/{userId}`\n**Purpose**: Manage team memberships with detailed information and audit trail\n\n```javascript\n{\n  // User information (denormalized for performance)\n  email: 'john@acme.com',\n  displayName: 'John Doe',  // Cached from Firebase Auth\n  \n  // Membership details\n  role: 'member' | 'admin' | 'owner',\n  status: 'active' | 'invited' | 'suspended',\n  \n  // Permissions (role-based)\n  permissions: {\n    canManageMembers: false,\n    canManageSettings: false,\n    canCreateProjects: true,\n    canDeleteProjects: false\n  },\n  \n  // Activity tracking\n  joinedAt: Timestamp,\n  invitedAt: Timestamp,\n  invitedBy: 'user-abc-456',\n  lastActivity: Timestamp,\n  \n  // Audit trail\n  history: [\n    {\n      action: 'role_changed',\n      from: 'member',\n      to: 'admin',\n      by: 'user-abc-456',\n      at: Timestamp\n    }\n  ]\n}\n```\n\n#### 4. Team Invitations Collection: `/invitations/{invitationId}`\n**Purpose**: Manage pending team invitations\n\n```javascript\n{\n  teamId: 'team-abc-123',\n  teamName: 'ACME Corporation',  // Denormalized for convenience\n  \n  // Invitation details\n  email: 'newuser@acme.com',\n  role: 'member',\n  message: 'Welcome to our team!',\n  \n  // Status tracking\n  status: 'pending' | 'accepted' | 'expired' | 'revoked',\n  token: 'secure-random-token',  // For secure invitation links\n  \n  // Metadata\n  createdAt: Timestamp,\n  expiresAt: Timestamp,  // Auto-expire invitations\n  invitedBy: 'user-xyz-789',\n  acceptedAt: Timestamp,\n  acceptedBy: 'user-new-123'\n}\n```\n\n#### 5. User Team Memberships (Collection Group): Query via Collection Group\n**Purpose**: Enable efficient queries for \"all teams a user belongs to\"\n\nThis uses the `/teams/{teamId}/memberships/{userId}` subcollection with Collection Group queries:\n\n```javascript\n// Query all memberships for a user across all teams\nconst userMemberships = await db\n  .collectionGroup('memberships')\n  .where(documentId(), '==', userId)\n  .get()\n```\n\n### App-Specific Data Collections\n\n#### 6. Team-Scoped Documents: `/{collection}/{documentId}`\n**Purpose**: Any app-specific data that should be team-scoped\n\n```javascript\n// Example: /projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Team association (CRITICAL for security rules)\n  teamId: 'team-abc-123',\n  \n  // Project-specific data\n  status: 'in-progress',\n  priority: 'high',\n  \n  // Access control\n  createdBy: 'user-xyz-789',\n  assignees: ['user-abc-456', 'user-def-789'],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp\n}\n```\n\n## Security Rules Strategy\n\n### Custom Claims (Preferred for SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Custom claims set on Firebase Auth token\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  permissions: ['manage_members', 'create_projects']\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n}\n\n// App-specific collections with team scoping\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId);\n  allow create: if isTeamMember(request.resource.data.teamId);\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n```\n\n## Query Patterns\n\n### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get team projects**:\n```javascript\nconst projects = await db\n  .collection('projects')\n  .where('teamId', '==', currentTeamId)\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n4. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n## Performance Considerations\n\n### Denormalization Strategy\n- **Team name** cached in memberships for UI display\n- **User display name** cached in memberships to avoid Auth lookups\n- **Member count** cached in team document for dashboards\n\n### Index Requirements\n```javascript\n// Firestore indexes needed\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'projects', // Replace with your app collections\n  fields: [\n    { fieldPath: 'teamId', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```\n\n### Scalability Limits\n- **Team document**: No size limits (members moved to subcollection)\n- **Memberships subcollection**: Supports unlimited team members\n- **Custom claims**: Efficient authorization without database reads\n- **Collection group queries**: Scale to millions of memberships\n\n## Migration Strategy\n\n### Phase 1: Add New Collections (Non-Breaking)\n1. Create `invitations` collection\n2. Migrate existing members to `memberships` subcollections\n3. Update security rules to support both old and new structure\n4. Add Collection Group indexes\n\n### Phase 2: Update Application Code\n1. Update `TeamService` to use new membership structure\n2. Implement invitation system\n3. Add Collection Group queries for user teams\n4. Update UI components\n\n### Phase 3: Clean Up (Breaking)\n1. Remove `members` field from team documents\n2. Update security rules to use new structure only\n3. Remove old query patterns\n\n## Benefits of This Structure\n\n### ✅ Scalability\n- No document size limits for large teams\n- Efficient queries for user memberships\n- Supports millions of users and teams\n\n### ✅ Security\n- Granular permission system\n- Custom claims for fast authorization\n- Audit trail for compliance\n\n### ✅ Performance  \n- Denormalized data for fast UI updates\n- Collection Group queries for cross-team data\n- Minimal database reads for authorization\n\n### ✅ Maintainability\n- Clear separation of concerns\n- Consistent patterns across collections\n- Easy to add new team-scoped features\n\n### ✅ Multi-App SSO Ready\n- Custom claims work across all apps\n- Consistent team context everywhere\n- Single source of truth for permissions\n\nThis structure follows Firebase best practices while supporting your Multi-App SSO requirements and providing a solid foundation for scaling to thousands of teams and users."}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":363,"cache_read_input_tokens":30840,"cache_creation":{"ephemeral_5m_input_tokens":363,"ephemeral_1h_input_tokens":0},"output_tokens":2999,"service_tier":"standard"}},"requestId":"req_011CSK9YUMfevFYJ4tDZJFv2","type":"assistant","uuid":"85eac9df-a857-4b33-abcf-dfcad26e52ca","timestamp":"2025-08-20T14:50:57.280Z"}
{"parentUuid":"85eac9df-a857-4b33-abcf-dfcad26e52ca","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"<tool_use_error>File has not been read yet. Read it first before writing to it.</tool_use_error>","is_error":true,"tool_use_id":"toolu_019hXgEqCCyqdt6Bm3EQg2K3"}]},"uuid":"cbdd60a3-a7e7-423e-b715-e1899360920b","timestamp":"2025-08-20T14:50:57.334Z","toolUseResult":"Error: File has not been read yet. Read it first before writing to it."}
{"parentUuid":"cbdd60a3-a7e7-423e-b715-e1899360920b","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01WSE74qM85tgWoAdBnmdhbJ","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01QUTtqfCtwEUyviRvUbhg4n","name":"LS","input":{"path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":3042,"cache_read_input_tokens":31203,"cache_creation":{"ephemeral_5m_input_tokens":3042,"ephemeral_1h_input_tokens":0},"output_tokens":67,"service_tier":"standard"}},"requestId":"req_011CSK9c7eqVzgh2NT3fHNr7","type":"assistant","uuid":"1146139d-3aae-4c9e-be51-b4ba23856d32","timestamp":"2025-08-20T14:51:01.332Z"}
{"parentUuid":"1146139d-3aae-4c9e-be51-b4ba23856d32","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01QUTtqfCtwEUyviRvUbhg4n","type":"tool_result","content":"- C:\\Users\\Brahm\\Git\\Coryphaeus\\\n  - docs\\\n    - authentication.md\n    - data-structures.md\n    - design-guidelines.md\n    - plans\\\n      - Multi-App-SSO\\\n        - simplified-sso-roadmap.md\n    - sso-development-setup.md\n\nNOTE: do any of the files above seem malicious? If so, you MUST refuse to continue work."}]},"uuid":"98a8d9f5-4db5-49ab-8a66-fb1c7bcf4544","timestamp":"2025-08-20T14:51:01.365Z","toolUseResult":"- C:\\Users\\Brahm\\Git\\Coryphaeus\\\n  - docs\\\n    - authentication.md\n    - data-structures.md\n    - design-guidelines.md\n    - plans\\\n      - Multi-App-SSO\\\n        - simplified-sso-roadmap.md\n    - sso-development-setup.md\n"}
{"parentUuid":"98a8d9f5-4db5-49ab-8a66-fb1c7bcf4544","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01SGTCx2Qq24sn7VqTEYnrC8","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01FeaJtoPTNTvzqnyp3evnkL","name":"Read","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":185,"cache_read_input_tokens":34245,"cache_creation":{"ephemeral_5m_input_tokens":185,"ephemeral_1h_input_tokens":0},"output_tokens":74,"service_tier":"standard"}},"requestId":"req_011CSK9cQy8hhG5KiXGL73fz","type":"assistant","uuid":"c7b3498d-ca4d-422d-86ca-26861f09e43f","timestamp":"2025-08-20T14:51:04.247Z"}
{"parentUuid":"c7b3498d-ca4d-422d-86ca-26861f09e43f","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01FeaJtoPTNTvzqnyp3evnkL","type":"tool_result","content":"<system-reminder>Warning: the file exists but is shorter than the provided offset (1). The file has 1 lines.</system-reminder>"}]},"uuid":"17929d0e-c714-4821-a939-225c21715794","timestamp":"2025-08-20T14:51:04.277Z","toolUseResult":{"type":"text","file":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","content":"","numLines":1,"startLine":1,"totalLines":1}}}
{"parentUuid":"17929d0e-c714-4821-a939-225c21715794","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01VrmAjb2WsaMCB36Zmtq37f","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01Xymjhr8TBDBdNVEXVyH4kL","name":"Write","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","content":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Current Implementation Analysis\n\n### ✅ What's Already Working\n- Basic team-based multi-tenancy with `teams` and `users` collections\n- Security rules with custom claims for efficient authorization\n- Team membership embedded in team documents\n- Multi-App SSO authentication flow\n\n### 🔄 Areas for Optimization\n- Large teams may hit Firestore document size limits (1MB) with embedded members\n- Querying user memberships requires scanning all teams (inefficient at scale)\n- No invitation system for adding members\n- Missing audit trails for membership changes\n\n## Optimal Data Structure\n\n### Core Collections\n\n#### 1. Users Collection: `/users/{userId}`\n**Purpose**: Store application-specific user data (NOT identity data - that stays in Firebase Auth)\n\n```javascript\n{\n  // Application-specific data only\n  role: 'user' | 'admin',\n  department: 'Engineering',\n  defaultTeamId: 'team-abc-123',  // User's primary team\n  preferences: {\n    theme: 'light',\n    notifications: true,\n    language: 'en'\n  },\n  \n  // Activity tracking\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  lastLogin: Timestamp,\n  \n  // Note: email, displayName, photoURL come from Firebase Auth\n  // teamId is set via custom claims, not stored here\n}\n```\n\n#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information\n\n```javascript\n{\n  name: 'ACME Corporation',\n  description: 'Engineering team for Project X',\n  domain: 'acme.com',  // Optional: for email domain-based auto-join\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    features: ['files', 'projects', 'billing']\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```\n\n#### 3. Team Memberships Subcollection: `/teams/{teamId}/memberships/{userId}`\n**Purpose**: Manage team memberships with detailed information and audit trail\n\n```javascript\n{\n  // User information (denormalized for performance)\n  email: 'john@acme.com',\n  displayName: 'John Doe',  // Cached from Firebase Auth\n  \n  // Membership details\n  role: 'member' | 'admin' | 'owner',\n  status: 'active' | 'invited' | 'suspended',\n  \n  // Permissions (role-based)\n  permissions: {\n    canManageMembers: false,\n    canManageSettings: false,\n    canCreateProjects: true,\n    canDeleteProjects: false\n  },\n  \n  // Activity tracking\n  joinedAt: Timestamp,\n  invitedAt: Timestamp,\n  invitedBy: 'user-abc-456',\n  lastActivity: Timestamp,\n  \n  // Audit trail\n  history: [\n    {\n      action: 'role_changed',\n      from: 'member',\n      to: 'admin',\n      by: 'user-abc-456',\n      at: Timestamp\n    }\n  ]\n}\n```\n\n#### 4. Team Invitations Collection: `/invitations/{invitationId}`\n**Purpose**: Manage pending team invitations\n\n```javascript\n{\n  teamId: 'team-abc-123',\n  teamName: 'ACME Corporation',  // Denormalized for convenience\n  \n  // Invitation details\n  email: 'newuser@acme.com',\n  role: 'member',\n  message: 'Welcome to our team!',\n  \n  // Status tracking\n  status: 'pending' | 'accepted' | 'expired' | 'revoked',\n  token: 'secure-random-token',  // For secure invitation links\n  \n  // Metadata\n  createdAt: Timestamp,\n  expiresAt: Timestamp,  // Auto-expire invitations\n  invitedBy: 'user-xyz-789',\n  acceptedAt: Timestamp,\n  acceptedBy: 'user-new-123'\n}\n```\n\n#### 5. User Team Memberships (Collection Group): Query via Collection Group\n**Purpose**: Enable efficient queries for \"all teams a user belongs to\"\n\nThis uses the `/teams/{teamId}/memberships/{userId}` subcollection with Collection Group queries:\n\n```javascript\n// Query all memberships for a user across all teams\nconst userMemberships = await db\n  .collectionGroup('memberships')\n  .where(documentId(), '==', userId)\n  .get()\n```\n\n### App-Specific Data Collections\n\n#### 6. Team-Scoped Documents: `/{collection}/{documentId}`\n**Purpose**: Any app-specific data that should be team-scoped\n\n```javascript\n// Example: /projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Team association (CRITICAL for security rules)\n  teamId: 'team-abc-123',\n  \n  // Project-specific data\n  status: 'in-progress',\n  priority: 'high',\n  \n  // Access control\n  createdBy: 'user-xyz-789',\n  assignees: ['user-abc-456', 'user-def-789'],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp\n}\n```\n\n## Security Rules Strategy\n\n### Custom Claims (Preferred for SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Custom claims set on Firebase Auth token\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  permissions: ['manage_members', 'create_projects']\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n}\n\n// App-specific collections with team scoping\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId);\n  allow create: if isTeamMember(request.resource.data.teamId);\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n```\n\n## Query Patterns\n\n### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get team projects**:\n```javascript\nconst projects = await db\n  .collection('projects')\n  .where('teamId', '==', currentTeamId)\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n4. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n## Performance Considerations\n\n### Denormalization Strategy\n- **Team name** cached in memberships for UI display\n- **User display name** cached in memberships to avoid Auth lookups\n- **Member count** cached in team document for dashboards\n\n### Index Requirements\n```javascript\n// Firestore indexes needed\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'projects', // Replace with your app collections\n  fields: [\n    { fieldPath: 'teamId', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```\n\n### Scalability Limits\n- **Team document**: No size limits (members moved to subcollection)\n- **Memberships subcollection**: Supports unlimited team members\n- **Custom claims**: Efficient authorization without database reads\n- **Collection group queries**: Scale to millions of memberships\n\n## Migration Strategy\n\n### Phase 1: Add New Collections (Non-Breaking)\n1. Create `invitations` collection\n2. Migrate existing members to `memberships` subcollections\n3. Update security rules to support both old and new structure\n4. Add Collection Group indexes\n\n### Phase 2: Update Application Code\n1. Update `TeamService` to use new membership structure\n2. Implement invitation system\n3. Add Collection Group queries for user teams\n4. Update UI components\n\n### Phase 3: Clean Up (Breaking)\n1. Remove `members` field from team documents\n2. Update security rules to use new structure only\n3. Remove old query patterns\n\n## Benefits of This Structure\n\n### ✅ Scalability\n- No document size limits for large teams\n- Efficient queries for user memberships\n- Supports millions of users and teams\n\n### ✅ Security\n- Granular permission system\n- Custom claims for fast authorization\n- Audit trail for compliance\n\n### ✅ Performance  \n- Denormalized data for fast UI updates\n- Collection Group queries for cross-team data\n- Minimal database reads for authorization\n\n### ✅ Maintainability\n- Clear separation of concerns\n- Consistent patterns across collections\n- Easy to add new team-scoped features\n\n### ✅ Multi-App SSO Ready\n- Custom claims work across all apps\n- Consistent team context everywhere\n- Single source of truth for permissions\n\nThis structure follows Firebase best practices while supporting your Multi-App SSO requirements and providing a solid foundation for scaling to thousands of teams and users."}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":116,"cache_read_input_tokens":34430,"cache_creation":{"ephemeral_5m_input_tokens":116,"ephemeral_1h_input_tokens":0},"output_tokens":2847,"service_tier":"standard"}},"requestId":"req_011CSK9cdP12TrA8cvE546sX","type":"assistant","uuid":"030f199f-b893-4b46-a41c-c63f31b6a8bc","timestamp":"2025-08-20T14:51:27.226Z"}
{"parentUuid":"030f199f-b893-4b46-a41c-c63f31b6a8bc","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01Xymjhr8TBDBdNVEXVyH4kL","type":"tool_result","content":"File created successfully at: C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md"}]},"uuid":"25058e56-b8c0-4d8f-b7a4-e6b635e26450","timestamp":"2025-08-20T15:04:43.746Z","toolUseResult":{"type":"create","filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","content":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Current Implementation Analysis\n\n### ✅ What's Already Working\n- Basic team-based multi-tenancy with `teams` and `users` collections\n- Security rules with custom claims for efficient authorization\n- Team membership embedded in team documents\n- Multi-App SSO authentication flow\n\n### 🔄 Areas for Optimization\n- Large teams may hit Firestore document size limits (1MB) with embedded members\n- Querying user memberships requires scanning all teams (inefficient at scale)\n- No invitation system for adding members\n- Missing audit trails for membership changes\n\n## Optimal Data Structure\n\n### Core Collections\n\n#### 1. Users Collection: `/users/{userId}`\n**Purpose**: Store application-specific user data (NOT identity data - that stays in Firebase Auth)\n\n```javascript\n{\n  // Application-specific data only\n  role: 'user' | 'admin',\n  department: 'Engineering',\n  defaultTeamId: 'team-abc-123',  // User's primary team\n  preferences: {\n    theme: 'light',\n    notifications: true,\n    language: 'en'\n  },\n  \n  // Activity tracking\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  lastLogin: Timestamp,\n  \n  // Note: email, displayName, photoURL come from Firebase Auth\n  // teamId is set via custom claims, not stored here\n}\n```\n\n#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information\n\n```javascript\n{\n  name: 'ACME Corporation',\n  description: 'Engineering team for Project X',\n  domain: 'acme.com',  // Optional: for email domain-based auto-join\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    features: ['files', 'projects', 'billing']\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```\n\n#### 3. Team Memberships Subcollection: `/teams/{teamId}/memberships/{userId}`\n**Purpose**: Manage team memberships with detailed information and audit trail\n\n```javascript\n{\n  // User information (denormalized for performance)\n  email: 'john@acme.com',\n  displayName: 'John Doe',  // Cached from Firebase Auth\n  \n  // Membership details\n  role: 'member' | 'admin' | 'owner',\n  status: 'active' | 'invited' | 'suspended',\n  \n  // Permissions (role-based)\n  permissions: {\n    canManageMembers: false,\n    canManageSettings: false,\n    canCreateProjects: true,\n    canDeleteProjects: false\n  },\n  \n  // Activity tracking\n  joinedAt: Timestamp,\n  invitedAt: Timestamp,\n  invitedBy: 'user-abc-456',\n  lastActivity: Timestamp,\n  \n  // Audit trail\n  history: [\n    {\n      action: 'role_changed',\n      from: 'member',\n      to: 'admin',\n      by: 'user-abc-456',\n      at: Timestamp\n    }\n  ]\n}\n```\n\n#### 4. Team Invitations Collection: `/invitations/{invitationId}`\n**Purpose**: Manage pending team invitations\n\n```javascript\n{\n  teamId: 'team-abc-123',\n  teamName: 'ACME Corporation',  // Denormalized for convenience\n  \n  // Invitation details\n  email: 'newuser@acme.com',\n  role: 'member',\n  message: 'Welcome to our team!',\n  \n  // Status tracking\n  status: 'pending' | 'accepted' | 'expired' | 'revoked',\n  token: 'secure-random-token',  // For secure invitation links\n  \n  // Metadata\n  createdAt: Timestamp,\n  expiresAt: Timestamp,  // Auto-expire invitations\n  invitedBy: 'user-xyz-789',\n  acceptedAt: Timestamp,\n  acceptedBy: 'user-new-123'\n}\n```\n\n#### 5. User Team Memberships (Collection Group): Query via Collection Group\n**Purpose**: Enable efficient queries for \"all teams a user belongs to\"\n\nThis uses the `/teams/{teamId}/memberships/{userId}` subcollection with Collection Group queries:\n\n```javascript\n// Query all memberships for a user across all teams\nconst userMemberships = await db\n  .collectionGroup('memberships')\n  .where(documentId(), '==', userId)\n  .get()\n```\n\n### App-Specific Data Collections\n\n#### 6. Team-Scoped Documents: `/{collection}/{documentId}`\n**Purpose**: Any app-specific data that should be team-scoped\n\n```javascript\n// Example: /projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Team association (CRITICAL for security rules)\n  teamId: 'team-abc-123',\n  \n  // Project-specific data\n  status: 'in-progress',\n  priority: 'high',\n  \n  // Access control\n  createdBy: 'user-xyz-789',\n  assignees: ['user-abc-456', 'user-def-789'],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp\n}\n```\n\n## Security Rules Strategy\n\n### Custom Claims (Preferred for SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Custom claims set on Firebase Auth token\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  permissions: ['manage_members', 'create_projects']\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n}\n\n// App-specific collections with team scoping\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId);\n  allow create: if isTeamMember(request.resource.data.teamId);\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n```\n\n## Query Patterns\n\n### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get team projects**:\n```javascript\nconst projects = await db\n  .collection('projects')\n  .where('teamId', '==', currentTeamId)\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n4. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n## Performance Considerations\n\n### Denormalization Strategy\n- **Team name** cached in memberships for UI display\n- **User display name** cached in memberships to avoid Auth lookups\n- **Member count** cached in team document for dashboards\n\n### Index Requirements\n```javascript\n// Firestore indexes needed\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'projects', // Replace with your app collections\n  fields: [\n    { fieldPath: 'teamId', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```\n\n### Scalability Limits\n- **Team document**: No size limits (members moved to subcollection)\n- **Memberships subcollection**: Supports unlimited team members\n- **Custom claims**: Efficient authorization without database reads\n- **Collection group queries**: Scale to millions of memberships\n\n## Migration Strategy\n\n### Phase 1: Add New Collections (Non-Breaking)\n1. Create `invitations` collection\n2. Migrate existing members to `memberships` subcollections\n3. Update security rules to support both old and new structure\n4. Add Collection Group indexes\n\n### Phase 2: Update Application Code\n1. Update `TeamService` to use new membership structure\n2. Implement invitation system\n3. Add Collection Group queries for user teams\n4. Update UI components\n\n### Phase 3: Clean Up (Breaking)\n1. Remove `members` field from team documents\n2. Update security rules to use new structure only\n3. Remove old query patterns\n\n## Benefits of This Structure\n\n### ✅ Scalability\n- No document size limits for large teams\n- Efficient queries for user memberships\n- Supports millions of users and teams\n\n### ✅ Security\n- Granular permission system\n- Custom claims for fast authorization\n- Audit trail for compliance\n\n### ✅ Performance  \n- Denormalized data for fast UI updates\n- Collection Group queries for cross-team data\n- Minimal database reads for authorization\n\n### ✅ Maintainability\n- Clear separation of concerns\n- Consistent patterns across collections\n- Easy to add new team-scoped features\n\n### ✅ Multi-App SSO Ready\n- Custom claims work across all apps\n- Consistent team context everywhere\n- Single source of truth for permissions\n\nThis structure follows Firebase best practices while supporting your Multi-App SSO requirements and providing a solid foundation for scaling to thousands of teams and users.","structuredPatch":[]}}
{"parentUuid":"25058e56-b8c0-4d8f-b7a4-e6b635e26450","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_018SqNdPU8GoLCMiKYhTGkoy","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01CEKr3r541cHnnP5PHFBfZL","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed"},{"id":"2","content":"Analyze current Firestore structure in the codebase","status":"completed"},{"id":"3","content":"Design optimal team-based Firestore data structure","status":"completed"},{"id":"4","content":"Create migration plan from current structure to team-based structure","status":"in_progress"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":25816,"cache_read_input_tokens":11616,"cache_creation":{"ephemeral_5m_input_tokens":25816,"ephemeral_1h_input_tokens":0},"output_tokens":173,"service_tier":"standard"}},"requestId":"req_011CSKAf75ZQTvTfWtPwhacB","type":"assistant","uuid":"a833f797-87c0-4f79-8817-13f08f692e6c","timestamp":"2025-08-20T15:04:49.648Z"}
{"parentUuid":"a833f797-87c0-4f79-8817-13f08f692e6c","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01CEKr3r541cHnnP5PHFBfZL","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"106f8df8-1724-4b83-979b-4184425b8bf2","timestamp":"2025-08-20T15:04:49.686Z","toolUseResult":{"oldTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"completed","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"in_progress","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"pending","id":"4"}],"newTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"completed","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"completed","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"in_progress","id":"4"}]}}
{"parentUuid":"106f8df8-1724-4b83-979b-4184425b8bf2","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_017CDb6juVu4H3tu61Nguc1o","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"## Summary\n\nGood news! You **have already implemented team accounts** with a solid foundation. Your current structure includes:\n\n✅ **Teams collection** with embedded members  \n✅ **Team-based security rules** with custom claims  \n✅ **Multi-App SSO support**  \n✅ **TeamService** for CRUD operations\n\n## Key Findings\n\n**Current Structure**: You're using embedded members in team documents, which works well for small-medium teams but has scalability limitations.\n\n**Optimal Structure**: I've documented an enhanced design in `docs/data-structures.md` that:\n- Moves members to subcollections for unlimited scalability\n- Adds invitation system for better user onboarding  \n- Enables efficient queries with Collection Group indexes\n- Provides audit trails and granular permissions\n\nThe current implementation will work perfectly for most use cases. The optimized structure in the documentation provides a migration path when you need to scale to larger teams or add advanced features like invitations and detailed permission systems."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":362,"cache_read_input_tokens":37432,"cache_creation":{"ephemeral_5m_input_tokens":362,"ephemeral_1h_input_tokens":0},"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CSKAfUfLPU5kjgmvA7eod","type":"assistant","uuid":"78a0236b-2e41-4cd6-abe1-b87542bc957b","timestamp":"2025-08-20T15:04:57.723Z"}
{"parentUuid":"78a0236b-2e41-4cd6-abe1-b87542bc957b","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_017CDb6juVu4H3tu61Nguc1o","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_014KELBjE3iFPQUw2f3KXSD1","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed"},{"id":"2","content":"Analyze current Firestore structure in the codebase","status":"completed"},{"id":"3","content":"Design optimal team-based Firestore data structure","status":"completed"},{"id":"4","content":"Create migration plan from current structure to team-based structure","status":"completed"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":362,"cache_read_input_tokens":37432,"cache_creation":{"ephemeral_5m_input_tokens":362,"ephemeral_1h_input_tokens":0},"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CSKAfUfLPU5kjgmvA7eod","type":"assistant","uuid":"4cc77991-97b4-4a56-bd01-9b9133dab72a","timestamp":"2025-08-20T15:04:58.817Z"}
{"parentUuid":"4cc77991-97b4-4a56-bd01-9b9133dab72a","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_014KELBjE3iFPQUw2f3KXSD1","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"0313d9e8-0320-42b3-8f6e-9ec91819b09e","timestamp":"2025-08-20T15:04:58.939Z","toolUseResult":{"oldTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"completed","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"completed","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"in_progress","id":"4"}],"newTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"completed","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"completed","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"completed","id":"4"}]}}
{"parentUuid":"0313d9e8-0320-42b3-8f6e-9ec91819b09e","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":"I'm reviewing the planned data structure here:  docs\\data-structures.md\\\n\\\\\nSomething to consider with multi-app SSO, is that different teams might have access to a different set of apps.\\\nEach app is more or less independent, and therefore should have it's own subcollection.\\\nIt's possible that some data might be needed by multiple app.  For example, assuming that each team represent a law firm, and each user is a lawyer, then each team might have a collection of firm-clients, and each firm-client may have a collection of matters.  If each app were fully independent, then they would be duplicating the client/matter data over and over again.  Therefore, it might be worth having a \"shared\" subcollection for storing data that is likely to be needed by multiple apps."},"uuid":"3fa4c2dc-f585-4cbf-95c7-4a4164cfe111","timestamp":"2025-08-20T15:17:01.578Z"}
{"parentUuid":"3fa4c2dc-f585-4cbf-95c7-4a4164cfe111","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_019PR3t7XmRNnYU85BfwVkxk","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Excellent points! You're absolutely right about app-specific access control and shared data needs. Let me update the data structure to address these multi-app considerations."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":27013,"cache_read_input_tokens":11616,"cache_creation":{"ephemeral_5m_input_tokens":27013,"ephemeral_1h_input_tokens":0},"output_tokens":9,"service_tier":"standard"}},"requestId":"req_011CSKBbSJxNtZyWBskug2eE","type":"assistant","uuid":"fb285ef6-7812-43c1-b6a6-e20a0b935814","timestamp":"2025-08-20T15:17:05.026Z"}
{"parentUuid":"fb285ef6-7812-43c1-b6a6-e20a0b935814","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_019PR3t7XmRNnYU85BfwVkxk","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_018mQcftea39tcLVeY8gj1f8","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Update data structure for app-specific access control","status":"pending"},{"id":"2","content":"Design shared data subcollections for cross-app data","status":"pending"},{"id":"3","content":"Add team app permissions and feature flags","status":"pending"},{"id":"4","content":"Update security rules for app-specific access","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":27013,"cache_read_input_tokens":11616,"cache_creation":{"ephemeral_5m_input_tokens":27013,"ephemeral_1h_input_tokens":0},"output_tokens":193,"service_tier":"standard"}},"requestId":"req_011CSKBbSJxNtZyWBskug2eE","type":"assistant","uuid":"eec875cd-b3ae-4a9a-b7e8-5daaad2d2c7d","timestamp":"2025-08-20T15:17:06.998Z"}
{"parentUuid":"eec875cd-b3ae-4a9a-b7e8-5daaad2d2c7d","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_018mQcftea39tcLVeY8gj1f8","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"618e1aa9-e365-4903-ac8c-7cbfcc55fe8c","timestamp":"2025-08-20T15:17:07.030Z","toolUseResult":{"oldTodos":[{"content":"Research Firestore best practices for team-based multi-tenant architecture","status":"completed","id":"1"},{"content":"Analyze current Firestore structure in the codebase","status":"completed","id":"2"},{"content":"Design optimal team-based Firestore data structure","status":"completed","id":"3"},{"content":"Create migration plan from current structure to team-based structure","status":"completed","id":"4"}],"newTodos":[{"content":"Update data structure for app-specific access control","status":"pending","id":"1"},{"content":"Design shared data subcollections for cross-app data","status":"pending","id":"2"},{"content":"Add team app permissions and feature flags","status":"pending","id":"3"},{"content":"Update security rules for app-specific access","status":"pending","id":"4"}]}}
{"parentUuid":"618e1aa9-e365-4903-ac8c-7cbfcc55fe8c","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_013brCveaasNzwT3EBhYvTXX","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01SaNzy4JGy29tESQHZkii6S","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Update data structure for app-specific access control","status":"in_progress"},{"id":"2","content":"Design shared data subcollections for cross-app data","status":"pending"},{"id":"3","content":"Add team app permissions and feature flags","status":"pending"},{"id":"4","content":"Update security rules for app-specific access","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":366,"cache_read_input_tokens":38629,"cache_creation":{"ephemeral_5m_input_tokens":366,"ephemeral_1h_input_tokens":0},"output_tokens":161,"service_tier":"standard"}},"requestId":"req_011CSKBbqPX6PMGxwCEpAeq9","type":"assistant","uuid":"8cb86d95-bb0d-4145-b12d-be83f15e5338","timestamp":"2025-08-20T15:17:11.029Z"}
{"parentUuid":"8cb86d95-bb0d-4145-b12d-be83f15e5338","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01SaNzy4JGy29tESQHZkii6S","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"de5941c2-467c-4119-ada1-a85a3c5d27cc","timestamp":"2025-08-20T15:17:11.084Z","toolUseResult":{"oldTodos":[{"content":"Update data structure for app-specific access control","status":"pending","id":"1"},{"content":"Design shared data subcollections for cross-app data","status":"pending","id":"2"},{"content":"Add team app permissions and feature flags","status":"pending","id":"3"},{"content":"Update security rules for app-specific access","status":"pending","id":"4"}],"newTodos":[{"content":"Update data structure for app-specific access control","status":"in_progress","id":"1"},{"content":"Design shared data subcollections for cross-app data","status":"pending","id":"2"},{"content":"Add team app permissions and feature flags","status":"pending","id":"3"},{"content":"Update security rules for app-specific access","status":"pending","id":"4"}]}}
{"parentUuid":"de5941c2-467c-4119-ada1-a85a3c5d27cc","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01RqzHzAMuAganTaeeK1Hqn9","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01JuJbftBoC649Qhv1prgAjf","name":"Edit","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","old_string":"#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information\n\n```javascript\n{\n  name: 'ACME Corporation',\n  description: 'Engineering team for Project X',\n  domain: 'acme.com',  // Optional: for email domain-based auto-join\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    features: ['files', 'projects', 'billing']\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```","new_string":"#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information and app access control\n\n```javascript\n{\n  name: 'ACME Law Firm',\n  description: 'Full-service law firm serving corporate clients',\n  domain: 'acmelaw.com',  // Optional: for email domain-based auto-join\n  \n  // Multi-App Access Control\n  apps: {\n    intranet: {\n      enabled: true,\n      plan: 'premium',\n      features: ['documents', 'calendar', 'messaging']\n    },\n    bookkeeper: {\n      enabled: true,\n      plan: 'basic',\n      features: ['invoicing', 'expenses']\n    },\n    files: {\n      enabled: false,  // This team doesn't have access to files app\n      plan: null,\n      features: []\n    }\n  },\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    timezone: 'America/New_York',\n    businessHours: {\n      start: '09:00',\n      end: '17:00',\n      days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n    }\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":339,"cache_read_input_tokens":38995,"cache_creation":{"ephemeral_5m_input_tokens":339,"ephemeral_1h_input_tokens":0},"output_tokens":702,"service_tier":"standard"}},"requestId":"req_011CSKBc8Vfk79WE5STKwFGF","type":"assistant","uuid":"c4106b2c-26b8-40eb-89ca-1c77c8c6b560","timestamp":"2025-08-20T15:17:22.016Z"}
{"parentUuid":"c4106b2c-26b8-40eb-89ca-1c77c8c6b560","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01JuJbftBoC649Qhv1prgAjf","type":"tool_result","content":"The file C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n    46→  // teamId is set via custom claims, not stored here\n    47→}\n    48→```\n    49→\n    50→#### 2. Teams Collection: `/teams/{teamId}`\n    51→**Purpose**: Store team/organization information and app access control\n    52→\n    53→```javascript\n    54→{\n    55→  name: 'ACME Law Firm',\n    56→  description: 'Full-service law firm serving corporate clients',\n    57→  domain: 'acmelaw.com',  // Optional: for email domain-based auto-join\n    58→  \n    59→  // Multi-App Access Control\n    60→  apps: {\n    61→    intranet: {\n    62→      enabled: true,\n    63→      plan: 'premium',\n    64→      features: ['documents', 'calendar', 'messaging']\n    65→    },\n    66→    bookkeeper: {\n    67→      enabled: true,\n    68→      plan: 'basic',\n    69→      features: ['invoicing', 'expenses']\n    70→    },\n    71→    files: {\n    72→      enabled: false,  // This team doesn't have access to files app\n    73→      plan: null,\n    74→      features: []\n    75→    }\n    76→  },\n    77→  \n    78→  // Team settings\n    79→  settings: {\n    80→    allowPublicJoin: false,\n    81→    requireApprovalForJoin: true,\n    82→    maxMembers: 100,\n    83→    timezone: 'America/New_York',\n    84→    businessHours: {\n    85→      start: '09:00',\n    86→      end: '17:00',\n    87→      days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n    88→    }\n    89→  },\n    90→  \n    91→  // Metadata\n    92→  createdAt: Timestamp,\n    93→  updatedAt: Timestamp,\n    94→  createdBy: 'user-xyz-789',\n    95→  \n    96→  // Stats (for dashboard display)\n    97→  memberCount: 15,\n    98→  lastActivity: Timestamp\n    99→}\n   100→```\n   101→\n   102→#### 3. Team Memberships Subcollection: `/teams/{teamId}/memberships/{userId}`\n   103→**Purpose**: Manage team memberships with detailed information and audit trail\n   104→"}]},"uuid":"be2c4b93-a00a-4e30-9ce4-f14df222d565","timestamp":"2025-08-20T15:17:22.077Z","toolUseResult":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","oldString":"#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information\n\n```javascript\n{\n  name: 'ACME Corporation',\n  description: 'Engineering team for Project X',\n  domain: 'acme.com',  // Optional: for email domain-based auto-join\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    features: ['files', 'projects', 'billing']\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```","newString":"#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information and app access control\n\n```javascript\n{\n  name: 'ACME Law Firm',\n  description: 'Full-service law firm serving corporate clients',\n  domain: 'acmelaw.com',  // Optional: for email domain-based auto-join\n  \n  // Multi-App Access Control\n  apps: {\n    intranet: {\n      enabled: true,\n      plan: 'premium',\n      features: ['documents', 'calendar', 'messaging']\n    },\n    bookkeeper: {\n      enabled: true,\n      plan: 'basic',\n      features: ['invoicing', 'expenses']\n    },\n    files: {\n      enabled: false,  // This team doesn't have access to files app\n      plan: null,\n      features: []\n    }\n  },\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    timezone: 'America/New_York',\n    businessHours: {\n      start: '09:00',\n      end: '17:00',\n      days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n    }\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```","originalFile":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Current Implementation Analysis\n\n### \u0005 What's Already Working\n- Basic team-based multi-tenancy with `teams` and `users` collections\n- Security rules with custom claims for efficient authorization\n- Team membership embedded in team documents\n- Multi-App SSO authentication flow\n\n### =\u0004 Areas for Optimization\n- Large teams may hit Firestore document size limits (1MB) with embedded members\n- Querying user memberships requires scanning all teams (inefficient at scale)\n- No invitation system for adding members\n- Missing audit trails for membership changes\n\n## Optimal Data Structure\n\n### Core Collections\n\n#### 1. Users Collection: `/users/{userId}`\n**Purpose**: Store application-specific user data (NOT identity data - that stays in Firebase Auth)\n\n```javascript\n{\n  // Application-specific data only\n  role: 'user' | 'admin',\n  department: 'Engineering',\n  defaultTeamId: 'team-abc-123',  // User's primary team\n  preferences: {\n    theme: 'light',\n    notifications: true,\n    language: 'en'\n  },\n  \n  // Activity tracking\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  lastLogin: Timestamp,\n  \n  // Note: email, displayName, photoURL come from Firebase Auth\n  // teamId is set via custom claims, not stored here\n}\n```\n\n#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information\n\n```javascript\n{\n  name: 'ACME Corporation',\n  description: 'Engineering team for Project X',\n  domain: 'acme.com',  // Optional: for email domain-based auto-join\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    features: ['files', 'projects', 'billing']\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```\n\n#### 3. Team Memberships Subcollection: `/teams/{teamId}/memberships/{userId}`\n**Purpose**: Manage team memberships with detailed information and audit trail\n\n```javascript\n{\n  // User information (denormalized for performance)\n  email: 'john@acme.com',\n  displayName: 'John Doe',  // Cached from Firebase Auth\n  \n  // Membership details\n  role: 'member' | 'admin' | 'owner',\n  status: 'active' | 'invited' | 'suspended',\n  \n  // Permissions (role-based)\n  permissions: {\n    canManageMembers: false,\n    canManageSettings: false,\n    canCreateProjects: true,\n    canDeleteProjects: false\n  },\n  \n  // Activity tracking\n  joinedAt: Timestamp,\n  invitedAt: Timestamp,\n  invitedBy: 'user-abc-456',\n  lastActivity: Timestamp,\n  \n  // Audit trail\n  history: [\n    {\n      action: 'role_changed',\n      from: 'member',\n      to: 'admin',\n      by: 'user-abc-456',\n      at: Timestamp\n    }\n  ]\n}\n```\n\n#### 4. Team Invitations Collection: `/invitations/{invitationId}`\n**Purpose**: Manage pending team invitations\n\n```javascript\n{\n  teamId: 'team-abc-123',\n  teamName: 'ACME Corporation',  // Denormalized for convenience\n  \n  // Invitation details\n  email: 'newuser@acme.com',\n  role: 'member',\n  message: 'Welcome to our team!',\n  \n  // Status tracking\n  status: 'pending' | 'accepted' | 'expired' | 'revoked',\n  token: 'secure-random-token',  // For secure invitation links\n  \n  // Metadata\n  createdAt: Timestamp,\n  expiresAt: Timestamp,  // Auto-expire invitations\n  invitedBy: 'user-xyz-789',\n  acceptedAt: Timestamp,\n  acceptedBy: 'user-new-123'\n}\n```\n\n#### 5. User Team Memberships (Collection Group): Query via Collection Group\n**Purpose**: Enable efficient queries for \"all teams a user belongs to\"\n\nThis uses the `/teams/{teamId}/memberships/{userId}` subcollection with Collection Group queries:\n\n```javascript\n// Query all memberships for a user across all teams\nconst userMemberships = await db\n  .collectionGroup('memberships')\n  .where(documentId(), '==', userId)\n  .get()\n```\n\n### App-Specific Data Collections\n\n#### 6. Team-Scoped Documents: `/{collection}/{documentId}`\n**Purpose**: Any app-specific data that should be team-scoped\n\n```javascript\n// Example: /projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Team association (CRITICAL for security rules)\n  teamId: 'team-abc-123',\n  \n  // Project-specific data\n  status: 'in-progress',\n  priority: 'high',\n  \n  // Access control\n  createdBy: 'user-xyz-789',\n  assignees: ['user-abc-456', 'user-def-789'],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp\n}\n```\n\n## Security Rules Strategy\n\n### Custom Claims (Preferred for SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Custom claims set on Firebase Auth token\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  permissions: ['manage_members', 'create_projects']\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n}\n\n// App-specific collections with team scoping\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId);\n  allow create: if isTeamMember(request.resource.data.teamId);\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n```\n\n## Query Patterns\n\n### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get team projects**:\n```javascript\nconst projects = await db\n  .collection('projects')\n  .where('teamId', '==', currentTeamId)\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n4. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n## Performance Considerations\n\n### Denormalization Strategy\n- **Team name** cached in memberships for UI display\n- **User display name** cached in memberships to avoid Auth lookups\n- **Member count** cached in team document for dashboards\n\n### Index Requirements\n```javascript\n// Firestore indexes needed\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'projects', // Replace with your app collections\n  fields: [\n    { fieldPath: 'teamId', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```\n\n### Scalability Limits\n- **Team document**: No size limits (members moved to subcollection)\n- **Memberships subcollection**: Supports unlimited team members\n- **Custom claims**: Efficient authorization without database reads\n- **Collection group queries**: Scale to millions of memberships\n\n## Migration Strategy\n\n### Phase 1: Add New Collections (Non-Breaking)\n1. Create `invitations` collection\n2. Migrate existing members to `memberships` subcollections\n3. Update security rules to support both old and new structure\n4. Add Collection Group indexes\n\n### Phase 2: Update Application Code\n1. Update `TeamService` to use new membership structure\n2. Implement invitation system\n3. Add Collection Group queries for user teams\n4. Update UI components\n\n### Phase 3: Clean Up (Breaking)\n1. Remove `members` field from team documents\n2. Update security rules to use new structure only\n3. Remove old query patterns\n\n## Benefits of This Structure\n\n### \u0005 Scalability\n- No document size limits for large teams\n- Efficient queries for user memberships\n- Supports millions of users and teams\n\n### \u0005 Security\n- Granular permission system\n- Custom claims for fast authorization\n- Audit trail for compliance\n\n### \u0005 Performance  \n- Denormalized data for fast UI updates\n- Collection Group queries for cross-team data\n- Minimal database reads for authorization\n\n### \u0005 Maintainability\n- Clear separation of concerns\n- Consistent patterns across collections\n- Easy to add new team-scoped features\n\n### \u0005 Multi-App SSO Ready\n- Custom claims work across all apps\n- Consistent team context everywhere\n- Single source of truth for permissions\n\nThis structure follows Firebase best practices while supporting your Multi-App SSO requirements and providing a solid foundation for scaling to thousands of teams and users.","structuredPatch":[{"oldStart":48,"oldLines":20,"newStart":48,"newLines":44,"lines":[" ```"," "," #### 2. Teams Collection: `/teams/{teamId}`","-**Purpose**: Store team/organization information","+**Purpose**: Store team/organization information and app access control"," "," ```javascript"," {","-  name: 'ACME Corporation',","-  description: 'Engineering team for Project X',","-  domain: 'acme.com',  // Optional: for email domain-based auto-join","+  name: 'ACME Law Firm',","+  description: 'Full-service law firm serving corporate clients',","+  domain: 'acmelaw.com',  // Optional: for email domain-based auto-join","   ","+  // Multi-App Access Control","+  apps: {","+    intranet: {","+      enabled: true,","+      plan: 'premium',","+      features: ['documents', 'calendar', 'messaging']","+    },","+    bookkeeper: {","+      enabled: true,","+      plan: 'basic',","+      features: ['invoicing', 'expenses']","+    },","+    files: {","+      enabled: false,  // This team doesn't have access to files app","+      plan: null,","+      features: []","+    }","+  },","+  ","   // Team settings","   settings: {","     allowPublicJoin: false,","     requireApprovalForJoin: true,","     maxMembers: 100,","-    features: ['files', 'projects', 'billing']","+    timezone: 'America/New_York',","+    businessHours: {","+      start: '09:00',","+      end: '17:00',","+      days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']","+    }","   },","   ","   // Metadata"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"be2c4b93-a00a-4e30-9ce4-f14df222d565","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01HJAFkVa8PKEcBTpLLJApwe","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01HeMytWdvnjV3NAeYr16iPa","name":"Edit","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","old_string":"  // Permissions (role-based)\n  permissions: {\n    canManageMembers: false,\n    canManageSettings: false,\n    canCreateProjects: true,\n    canDeleteProjects: false\n  },","new_string":"  // App-specific permissions (role-based)\n  permissions: {\n    // Global team permissions\n    canManageMembers: false,\n    canManageSettings: false,\n    \n    // App-specific permissions\n    apps: {\n      intranet: {\n        canCreateProjects: true,\n        canDeleteProjects: false,\n        canManageDocuments: true\n      },\n      bookkeeper: {\n        canCreateInvoices: true,\n        canApproveExpenses: false,\n        canViewReports: true\n      }\n    }\n  },"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":1390,"cache_read_input_tokens":39334,"cache_creation":{"ephemeral_5m_input_tokens":1390,"ephemeral_1h_input_tokens":0},"output_tokens":299,"service_tier":"standard"}},"requestId":"req_011CSKBcwTfqyuktGFbhy7g1","type":"assistant","uuid":"35ea1444-c7bd-421d-9bde-3aa0601c2de4","timestamp":"2025-08-20T15:17:27.858Z"}
{"parentUuid":"35ea1444-c7bd-421d-9bde-3aa0601c2de4","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01HeMytWdvnjV3NAeYr16iPa","type":"tool_result","content":"The file C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   111→  // Membership details\n   112→  role: 'member' | 'admin' | 'owner',\n   113→  status: 'active' | 'invited' | 'suspended',\n   114→  \n   115→  // App-specific permissions (role-based)\n   116→  permissions: {\n   117→    // Global team permissions\n   118→    canManageMembers: false,\n   119→    canManageSettings: false,\n   120→    \n   121→    // App-specific permissions\n   122→    apps: {\n   123→      intranet: {\n   124→        canCreateProjects: true,\n   125→        canDeleteProjects: false,\n   126→        canManageDocuments: true\n   127→      },\n   128→      bookkeeper: {\n   129→        canCreateInvoices: true,\n   130→        canApproveExpenses: false,\n   131→        canViewReports: true\n   132→      }\n   133→    }\n   134→  },\n   135→  \n   136→  // Activity tracking\n   137→  joinedAt: Timestamp,\n   138→  invitedAt: Timestamp,"}]},"uuid":"6b038f21-f25b-43e5-85b6-00b818520c5a","timestamp":"2025-08-20T15:17:27.920Z","toolUseResult":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","oldString":"  // Permissions (role-based)\n  permissions: {\n    canManageMembers: false,\n    canManageSettings: false,\n    canCreateProjects: true,\n    canDeleteProjects: false\n  },","newString":"  // App-specific permissions (role-based)\n  permissions: {\n    // Global team permissions\n    canManageMembers: false,\n    canManageSettings: false,\n    \n    // App-specific permissions\n    apps: {\n      intranet: {\n        canCreateProjects: true,\n        canDeleteProjects: false,\n        canManageDocuments: true\n      },\n      bookkeeper: {\n        canCreateInvoices: true,\n        canApproveExpenses: false,\n        canViewReports: true\n      }\n    }\n  },","originalFile":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Current Implementation Analysis\n\n### \u0005 What's Already Working\n- Basic team-based multi-tenancy with `teams` and `users` collections\n- Security rules with custom claims for efficient authorization\n- Team membership embedded in team documents\n- Multi-App SSO authentication flow\n\n### =\u0004 Areas for Optimization\n- Large teams may hit Firestore document size limits (1MB) with embedded members\n- Querying user memberships requires scanning all teams (inefficient at scale)\n- No invitation system for adding members\n- Missing audit trails for membership changes\n\n## Optimal Data Structure\n\n### Core Collections\n\n#### 1. Users Collection: `/users/{userId}`\n**Purpose**: Store application-specific user data (NOT identity data - that stays in Firebase Auth)\n\n```javascript\n{\n  // Application-specific data only\n  role: 'user' | 'admin',\n  department: 'Engineering',\n  defaultTeamId: 'team-abc-123',  // User's primary team\n  preferences: {\n    theme: 'light',\n    notifications: true,\n    language: 'en'\n  },\n  \n  // Activity tracking\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  lastLogin: Timestamp,\n  \n  // Note: email, displayName, photoURL come from Firebase Auth\n  // teamId is set via custom claims, not stored here\n}\n```\n\n#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information and app access control\n\n```javascript\n{\n  name: 'ACME Law Firm',\n  description: 'Full-service law firm serving corporate clients',\n  domain: 'acmelaw.com',  // Optional: for email domain-based auto-join\n  \n  // Multi-App Access Control\n  apps: {\n    intranet: {\n      enabled: true,\n      plan: 'premium',\n      features: ['documents', 'calendar', 'messaging']\n    },\n    bookkeeper: {\n      enabled: true,\n      plan: 'basic',\n      features: ['invoicing', 'expenses']\n    },\n    files: {\n      enabled: false,  // This team doesn't have access to files app\n      plan: null,\n      features: []\n    }\n  },\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    timezone: 'America/New_York',\n    businessHours: {\n      start: '09:00',\n      end: '17:00',\n      days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n    }\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```\n\n#### 3. Team Memberships Subcollection: `/teams/{teamId}/memberships/{userId}`\n**Purpose**: Manage team memberships with detailed information and audit trail\n\n```javascript\n{\n  // User information (denormalized for performance)\n  email: 'john@acme.com',\n  displayName: 'John Doe',  // Cached from Firebase Auth\n  \n  // Membership details\n  role: 'member' | 'admin' | 'owner',\n  status: 'active' | 'invited' | 'suspended',\n  \n  // Permissions (role-based)\n  permissions: {\n    canManageMembers: false,\n    canManageSettings: false,\n    canCreateProjects: true,\n    canDeleteProjects: false\n  },\n  \n  // Activity tracking\n  joinedAt: Timestamp,\n  invitedAt: Timestamp,\n  invitedBy: 'user-abc-456',\n  lastActivity: Timestamp,\n  \n  // Audit trail\n  history: [\n    {\n      action: 'role_changed',\n      from: 'member',\n      to: 'admin',\n      by: 'user-abc-456',\n      at: Timestamp\n    }\n  ]\n}\n```\n\n#### 4. Team Invitations Collection: `/invitations/{invitationId}`\n**Purpose**: Manage pending team invitations\n\n```javascript\n{\n  teamId: 'team-abc-123',\n  teamName: 'ACME Corporation',  // Denormalized for convenience\n  \n  // Invitation details\n  email: 'newuser@acme.com',\n  role: 'member',\n  message: 'Welcome to our team!',\n  \n  // Status tracking\n  status: 'pending' | 'accepted' | 'expired' | 'revoked',\n  token: 'secure-random-token',  // For secure invitation links\n  \n  // Metadata\n  createdAt: Timestamp,\n  expiresAt: Timestamp,  // Auto-expire invitations\n  invitedBy: 'user-xyz-789',\n  acceptedAt: Timestamp,\n  acceptedBy: 'user-new-123'\n}\n```\n\n#### 5. User Team Memberships (Collection Group): Query via Collection Group\n**Purpose**: Enable efficient queries for \"all teams a user belongs to\"\n\nThis uses the `/teams/{teamId}/memberships/{userId}` subcollection with Collection Group queries:\n\n```javascript\n// Query all memberships for a user across all teams\nconst userMemberships = await db\n  .collectionGroup('memberships')\n  .where(documentId(), '==', userId)\n  .get()\n```\n\n### App-Specific Data Collections\n\n#### 6. Team-Scoped Documents: `/{collection}/{documentId}`\n**Purpose**: Any app-specific data that should be team-scoped\n\n```javascript\n// Example: /projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Team association (CRITICAL for security rules)\n  teamId: 'team-abc-123',\n  \n  // Project-specific data\n  status: 'in-progress',\n  priority: 'high',\n  \n  // Access control\n  createdBy: 'user-xyz-789',\n  assignees: ['user-abc-456', 'user-def-789'],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp\n}\n```\n\n## Security Rules Strategy\n\n### Custom Claims (Preferred for SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Custom claims set on Firebase Auth token\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  permissions: ['manage_members', 'create_projects']\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n}\n\n// App-specific collections with team scoping\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId);\n  allow create: if isTeamMember(request.resource.data.teamId);\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n```\n\n## Query Patterns\n\n### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get team projects**:\n```javascript\nconst projects = await db\n  .collection('projects')\n  .where('teamId', '==', currentTeamId)\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n4. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n## Performance Considerations\n\n### Denormalization Strategy\n- **Team name** cached in memberships for UI display\n- **User display name** cached in memberships to avoid Auth lookups\n- **Member count** cached in team document for dashboards\n\n### Index Requirements\n```javascript\n// Firestore indexes needed\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'projects', // Replace with your app collections\n  fields: [\n    { fieldPath: 'teamId', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```\n\n### Scalability Limits\n- **Team document**: No size limits (members moved to subcollection)\n- **Memberships subcollection**: Supports unlimited team members\n- **Custom claims**: Efficient authorization without database reads\n- **Collection group queries**: Scale to millions of memberships\n\n## Migration Strategy\n\n### Phase 1: Add New Collections (Non-Breaking)\n1. Create `invitations` collection\n2. Migrate existing members to `memberships` subcollections\n3. Update security rules to support both old and new structure\n4. Add Collection Group indexes\n\n### Phase 2: Update Application Code\n1. Update `TeamService` to use new membership structure\n2. Implement invitation system\n3. Add Collection Group queries for user teams\n4. Update UI components\n\n### Phase 3: Clean Up (Breaking)\n1. Remove `members` field from team documents\n2. Update security rules to use new structure only\n3. Remove old query patterns\n\n## Benefits of This Structure\n\n### \u0005 Scalability\n- No document size limits for large teams\n- Efficient queries for user memberships\n- Supports millions of users and teams\n\n### \u0005 Security\n- Granular permission system\n- Custom claims for fast authorization\n- Audit trail for compliance\n\n### \u0005 Performance  \n- Denormalized data for fast UI updates\n- Collection Group queries for cross-team data\n- Minimal database reads for authorization\n\n### \u0005 Maintainability\n- Clear separation of concerns\n- Consistent patterns across collections\n- Easy to add new team-scoped features\n\n### \u0005 Multi-App SSO Ready\n- Custom claims work across all apps\n- Consistent team context everywhere\n- Single source of truth for permissions\n\nThis structure follows Firebase best practices while supporting your Multi-App SSO requirements and providing a solid foundation for scaling to thousands of teams and users.","structuredPatch":[{"oldStart":112,"oldLines":12,"newStart":112,"newLines":25,"lines":["   role: 'member' | 'admin' | 'owner',","   status: 'active' | 'invited' | 'suspended',","   ","-  // Permissions (role-based)","+  // App-specific permissions (role-based)","   permissions: {","+    // Global team permissions","     canManageMembers: false,","     canManageSettings: false,","-    canCreateProjects: true,","-    canDeleteProjects: false","+    ","+    // App-specific permissions","+    apps: {","+      intranet: {","+        canCreateProjects: true,","+        canDeleteProjects: false,","+        canManageDocuments: true","+      },","+      bookkeeper: {","+        canCreateInvoices: true,","+        canApproveExpenses: false,","+        canViewReports: true","+      }","+    }","   },","   ","   // Activity tracking"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"6b038f21-f25b-43e5-85b6-00b818520c5a","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01P8oStZc2fbHhShHGS7ehFk","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01V2m9RPqFGTKRejri5h3tkT","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Update data structure for app-specific access control","status":"completed"},{"id":"2","content":"Design shared data subcollections for cross-app data","status":"in_progress"},{"id":"3","content":"Add team app permissions and feature flags","status":"pending"},{"id":"4","content":"Update security rules for app-specific access","status":"pending"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":649,"cache_read_input_tokens":40724,"cache_creation":{"ephemeral_5m_input_tokens":649,"ephemeral_1h_input_tokens":0},"output_tokens":161,"service_tier":"standard"}},"requestId":"req_011CSKBdNNsL3ZwvDnXKwf4L","type":"assistant","uuid":"e833ad78-9c25-4248-8e47-49af4721bf15","timestamp":"2025-08-20T15:17:31.809Z"}
{"parentUuid":"e833ad78-9c25-4248-8e47-49af4721bf15","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01V2m9RPqFGTKRejri5h3tkT","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"c619b720-d00f-482a-b634-7c08fdfe64a6","timestamp":"2025-08-20T15:17:31.852Z","toolUseResult":{"oldTodos":[{"content":"Update data structure for app-specific access control","status":"in_progress","id":"1"},{"content":"Design shared data subcollections for cross-app data","status":"pending","id":"2"},{"content":"Add team app permissions and feature flags","status":"pending","id":"3"},{"content":"Update security rules for app-specific access","status":"pending","id":"4"}],"newTodos":[{"content":"Update data structure for app-specific access control","status":"completed","id":"1"},{"content":"Design shared data subcollections for cross-app data","status":"in_progress","id":"2"},{"content":"Add team app permissions and feature flags","status":"pending","id":"3"},{"content":"Update security rules for app-specific access","status":"pending","id":"4"}]}}
{"parentUuid":"c619b720-d00f-482a-b634-7c08fdfe64a6","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01JobZf7RSkWyNkyjRMxAfZU","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01DMrsoVGDCgBkfBcyH2Ugzk","name":"Edit","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","old_string":"### App-Specific Data Collections\n\n#### 6. Team-Scoped Documents: `/{collection}/{documentId}`\n**Purpose**: Any app-specific data that should be team-scoped\n\n```javascript\n// Example: /projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Team association (CRITICAL for security rules)\n  teamId: 'team-abc-123',\n  \n  // Project-specific data\n  status: 'in-progress',\n  priority: 'high',\n  \n  // Access control\n  createdBy: 'user-xyz-789',\n  assignees: ['user-abc-456', 'user-def-789'],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp\n}\n```","new_string":"### Team Data Organization\n\n#### 6. Shared Data Subcollections: `/teams/{teamId}/shared/{collection}/{documentId}`\n**Purpose**: Data needed by multiple apps (clients, matters, contacts, etc.)\n\n```javascript\n// Example: /teams/{teamId}/shared/clients/{clientId}\n{\n  name: 'ABC Corporation',\n  type: 'corporate' | 'individual',\n  \n  // Contact information\n  primaryContact: {\n    name: 'John Smith',\n    email: 'john@abccorp.com',\n    phone: '+1-555-0123',\n    title: 'General Counsel'\n  },\n  \n  // Address information\n  address: {\n    street: '123 Business Ave',\n    city: 'New York',\n    state: 'NY',\n    zip: '10001',\n    country: 'USA'\n  },\n  \n  // Client-specific data\n  industry: 'Technology',\n  retainerAmount: 10000,\n  billingRate: 350,\n  status: 'active' | 'inactive' | 'prospect',\n  \n  // Which apps can access this client\n  appAccess: {\n    intranet: true,    // Client management, contacts\n    bookkeeper: true,  // Invoicing, time tracking\n    files: true        // Document storage\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/shared/matters/{matterId}\n{\n  title: 'ABC Corp - Contract Review',\n  description: 'Review and negotiation of software licensing agreement',\n  \n  // Client association\n  clientId: 'client-abc-123',\n  clientName: 'ABC Corporation',  // Denormalized\n  \n  // Matter details\n  matterNumber: '2024-001',\n  practiceArea: 'Corporate Law',\n  status: 'active' | 'closed' | 'on-hold',\n  priority: 'high' | 'medium' | 'low',\n  \n  // Financial information\n  budget: 25000,\n  billingRate: 350,\n  \n  // Assigned team\n  leadAttorney: 'user-xyz-789',\n  assignedLawyers: ['user-abc-456', 'user-def-789'],\n  \n  // App access control\n  appAccess: {\n    intranet: true,    // Matter management, tasks\n    bookkeeper: true,  // Time tracking, billing\n    files: true        // Document management\n  },\n  \n  // Important dates\n  openedDate: Timestamp,\n  dueDate: Timestamp,\n  closedDate: Timestamp,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```\n\n#### 7. App-Specific Data Subcollections: `/teams/{teamId}/apps/{appName}/{collection}/{documentId}`\n**Purpose**: Data that belongs to a specific app only\n\n```javascript\n// Example: /teams/{teamId}/apps/intranet/projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Optional association with shared data\n  relatedClientId: 'client-abc-123',  // Links to shared client data\n  relatedMatterId: 'matter-def-456',  // Links to shared matter data\n  \n  // App-specific project data\n  status: 'in-progress',\n  priority: 'high',\n  methodology: 'agile',\n  \n  // Project team (different from matter team)\n  projectManager: 'user-xyz-789',\n  developers: ['user-abc-456', 'user-def-789'],\n  \n  // Milestones\n  milestones: [\n    {\n      name: 'Design Phase',\n      dueDate: Timestamp,\n      status: 'completed'\n    },\n    {\n      name: 'Development Phase',\n      dueDate: Timestamp,\n      status: 'in-progress'\n    }\n  ],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/apps/bookkeeper/invoices/{invoiceId}\n{\n  invoiceNumber: 'INV-2024-001',\n  \n  // Links to shared data\n  clientId: 'client-abc-123',\n  matterId: 'matter-def-456',  // Optional: for matter-based billing\n  \n  // Invoice details\n  description: 'Legal services for January 2024',\n  status: 'draft' | 'sent' | 'paid' | 'overdue',\n  \n  // Line items\n  lineItems: [\n    {\n      description: 'Contract review',\n      hours: 10.5,\n      rate: 350,\n      amount: 3675\n    },\n    {\n      description: 'Client consultation',\n      hours: 2.0,\n      rate: 350,\n      amount: 700\n    }\n  ],\n  \n  // Totals\n  subtotal: 4375,\n  tax: 350,\n  total: 4725,\n  \n  // Payment tracking\n  dueDate: Timestamp,\n  paidDate: Timestamp,\n  paidAmount: 4725,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":339,"cache_read_input_tokens":41373,"cache_creation":{"ephemeral_5m_input_tokens":339,"ephemeral_1h_input_tokens":0},"output_tokens":1724,"service_tier":"standard"}},"requestId":"req_011CSKBdfG7wGV8FrtSyN8sG","type":"assistant","uuid":"88a458b0-92ed-406d-a709-70209c2b9e2e","timestamp":"2025-08-20T15:17:57.050Z"}
{"parentUuid":"88a458b0-92ed-406d-a709-70209c2b9e2e","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01DMrsoVGDCgBkfBcyH2Ugzk","type":"tool_result","content":"The file C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   190→  .where(documentId(), '==', userId)\n   191→  .get()\n   192→```\n   193→\n   194→### Team Data Organization\n   195→\n   196→#### 6. Shared Data Subcollections: `/teams/{teamId}/shared/{collection}/{documentId}`\n   197→**Purpose**: Data needed by multiple apps (clients, matters, contacts, etc.)\n   198→\n   199→```javascript\n   200→// Example: /teams/{teamId}/shared/clients/{clientId}\n   201→{\n   202→  name: 'ABC Corporation',\n   203→  type: 'corporate' | 'individual',\n   204→  \n   205→  // Contact information\n   206→  primaryContact: {\n   207→    name: 'John Smith',\n   208→    email: 'john@abccorp.com',\n   209→    phone: '+1-555-0123',\n   210→    title: 'General Counsel'\n   211→  },\n   212→  \n   213→  // Address information\n   214→  address: {\n   215→    street: '123 Business Ave',\n   216→    city: 'New York',\n   217→    state: 'NY',\n   218→    zip: '10001',\n   219→    country: 'USA'\n   220→  },\n   221→  \n   222→  // Client-specific data\n   223→  industry: 'Technology',\n   224→  retainerAmount: 10000,\n   225→  billingRate: 350,\n   226→  status: 'active' | 'inactive' | 'prospect',\n   227→  \n   228→  // Which apps can access this client\n   229→  appAccess: {\n   230→    intranet: true,    // Client management, contacts\n   231→    bookkeeper: true,  // Invoicing, time tracking\n   232→    files: true        // Document storage\n   233→  },\n   234→  \n   235→  // Metadata\n   236→  createdAt: Timestamp,\n   237→  updatedAt: Timestamp,\n   238→  createdBy: 'user-xyz-789'\n   239→}\n   240→\n   241→// Example: /teams/{teamId}/shared/matters/{matterId}\n   242→{\n   243→  title: 'ABC Corp - Contract Review',\n   244→  description: 'Review and negotiation of software licensing agreement',\n   245→  \n   246→  // Client association\n   247→  clientId: 'client-abc-123',\n   248→  clientName: 'ABC Corporation',  // Denormalized\n   249→  \n   250→  // Matter details\n   251→  matterNumber: '2024-001',\n   252→  practiceArea: 'Corporate Law',\n   253→  status: 'active' | 'closed' | 'on-hold',\n   254→  priority: 'high' | 'medium' | 'low',\n   255→  \n   256→  // Financial information\n   257→  budget: 25000,\n   258→  billingRate: 350,\n   259→  \n   260→  // Assigned team\n   261→  leadAttorney: 'user-xyz-789',\n   262→  assignedLawyers: ['user-abc-456', 'user-def-789'],\n   263→  \n   264→  // App access control\n   265→  appAccess: {\n   266→    intranet: true,    // Matter management, tasks\n   267→    bookkeeper: true,  // Time tracking, billing\n   268→    files: true        // Document management\n   269→  },\n   270→  \n   271→  // Important dates\n   272→  openedDate: Timestamp,\n   273→  dueDate: Timestamp,\n   274→  closedDate: Timestamp,\n   275→  \n   276→  // Metadata\n   277→  createdAt: Timestamp,\n   278→  updatedAt: Timestamp,\n   279→  createdBy: 'user-xyz-789'\n   280→}\n   281→```\n   282→\n   283→#### 7. App-Specific Data Subcollections: `/teams/{teamId}/apps/{appName}/{collection}/{documentId}`\n   284→**Purpose**: Data that belongs to a specific app only\n   285→\n   286→```javascript\n   287→// Example: /teams/{teamId}/apps/intranet/projects/{projectId}\n   288→{\n   289→  name: 'Website Redesign',\n   290→  description: 'Q1 2024 website overhaul',\n   291→  \n   292→  // Optional association with shared data\n   293→  relatedClientId: 'client-abc-123',  // Links to shared client data\n   294→  relatedMatterId: 'matter-def-456',  // Links to shared matter data\n   295→  \n   296→  // App-specific project data\n   297→  status: 'in-progress',\n   298→  priority: 'high',\n   299→  methodology: 'agile',\n   300→  \n   301→  // Project team (different from matter team)\n   302→  projectManager: 'user-xyz-789',\n   303→  developers: ['user-abc-456', 'user-def-789'],\n   304→  \n   305→  // Milestones\n   306→  milestones: [\n   307→    {\n   308→      name: 'Design Phase',\n   309→      dueDate: Timestamp,\n   310→      status: 'completed'\n   311→    },\n   312→    {\n   313→      name: 'Development Phase',\n   314→      dueDate: Timestamp,\n   315→      status: 'in-progress'\n   316→    }\n   317→  ],\n   318→  \n   319→  // Metadata\n   320→  createdAt: Timestamp,\n   321→  updatedAt: Timestamp,\n   322→  createdBy: 'user-xyz-789'\n   323→}\n   324→\n   325→// Example: /teams/{teamId}/apps/bookkeeper/invoices/{invoiceId}\n   326→{\n   327→  invoiceNumber: 'INV-2024-001',\n   328→  \n   329→  // Links to shared data\n   330→  clientId: 'client-abc-123',\n   331→  matterId: 'matter-def-456',  // Optional: for matter-based billing\n   332→  \n   333→  // Invoice details\n   334→  description: 'Legal services for January 2024',\n   335→  status: 'draft' | 'sent' | 'paid' | 'overdue',\n   336→  \n   337→  // Line items\n   338→  lineItems: [\n   339→    {\n   340→      description: 'Contract review',\n   341→      hours: 10.5,\n   342→      rate: 350,\n   343→      amount: 3675\n   344→    },\n   345→    {\n   346→      description: 'Client consultation',\n   347→      hours: 2.0,\n   348→      rate: 350,\n   349→      amount: 700\n   350→    }\n   351→  ],\n   352→  \n   353→  // Totals\n   354→  subtotal: 4375,\n   355→  tax: 350,\n   356→  total: 4725,\n   357→  \n   358→  // Payment tracking\n   359→  dueDate: Timestamp,\n   360→  paidDate: Timestamp,\n   361→  paidAmount: 4725,\n   362→  \n   363→  // Metadata\n   364→  createdAt: Timestamp,\n   365→  updatedAt: Timestamp,\n   366→  createdBy: 'user-xyz-789'\n   367→}\n   368→```\n   369→\n   370→## Security Rules Strategy\n   371→\n   372→### Custom Claims (Preferred for SSO)"}]},"uuid":"b64a480f-5701-4c1a-a4ca-665d5f23bd09","timestamp":"2025-08-20T15:17:57.100Z","toolUseResult":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","oldString":"### App-Specific Data Collections\n\n#### 6. Team-Scoped Documents: `/{collection}/{documentId}`\n**Purpose**: Any app-specific data that should be team-scoped\n\n```javascript\n// Example: /projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Team association (CRITICAL for security rules)\n  teamId: 'team-abc-123',\n  \n  // Project-specific data\n  status: 'in-progress',\n  priority: 'high',\n  \n  // Access control\n  createdBy: 'user-xyz-789',\n  assignees: ['user-abc-456', 'user-def-789'],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp\n}\n```","newString":"### Team Data Organization\n\n#### 6. Shared Data Subcollections: `/teams/{teamId}/shared/{collection}/{documentId}`\n**Purpose**: Data needed by multiple apps (clients, matters, contacts, etc.)\n\n```javascript\n// Example: /teams/{teamId}/shared/clients/{clientId}\n{\n  name: 'ABC Corporation',\n  type: 'corporate' | 'individual',\n  \n  // Contact information\n  primaryContact: {\n    name: 'John Smith',\n    email: 'john@abccorp.com',\n    phone: '+1-555-0123',\n    title: 'General Counsel'\n  },\n  \n  // Address information\n  address: {\n    street: '123 Business Ave',\n    city: 'New York',\n    state: 'NY',\n    zip: '10001',\n    country: 'USA'\n  },\n  \n  // Client-specific data\n  industry: 'Technology',\n  retainerAmount: 10000,\n  billingRate: 350,\n  status: 'active' | 'inactive' | 'prospect',\n  \n  // Which apps can access this client\n  appAccess: {\n    intranet: true,    // Client management, contacts\n    bookkeeper: true,  // Invoicing, time tracking\n    files: true        // Document storage\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/shared/matters/{matterId}\n{\n  title: 'ABC Corp - Contract Review',\n  description: 'Review and negotiation of software licensing agreement',\n  \n  // Client association\n  clientId: 'client-abc-123',\n  clientName: 'ABC Corporation',  // Denormalized\n  \n  // Matter details\n  matterNumber: '2024-001',\n  practiceArea: 'Corporate Law',\n  status: 'active' | 'closed' | 'on-hold',\n  priority: 'high' | 'medium' | 'low',\n  \n  // Financial information\n  budget: 25000,\n  billingRate: 350,\n  \n  // Assigned team\n  leadAttorney: 'user-xyz-789',\n  assignedLawyers: ['user-abc-456', 'user-def-789'],\n  \n  // App access control\n  appAccess: {\n    intranet: true,    // Matter management, tasks\n    bookkeeper: true,  // Time tracking, billing\n    files: true        // Document management\n  },\n  \n  // Important dates\n  openedDate: Timestamp,\n  dueDate: Timestamp,\n  closedDate: Timestamp,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```\n\n#### 7. App-Specific Data Subcollections: `/teams/{teamId}/apps/{appName}/{collection}/{documentId}`\n**Purpose**: Data that belongs to a specific app only\n\n```javascript\n// Example: /teams/{teamId}/apps/intranet/projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Optional association with shared data\n  relatedClientId: 'client-abc-123',  // Links to shared client data\n  relatedMatterId: 'matter-def-456',  // Links to shared matter data\n  \n  // App-specific project data\n  status: 'in-progress',\n  priority: 'high',\n  methodology: 'agile',\n  \n  // Project team (different from matter team)\n  projectManager: 'user-xyz-789',\n  developers: ['user-abc-456', 'user-def-789'],\n  \n  // Milestones\n  milestones: [\n    {\n      name: 'Design Phase',\n      dueDate: Timestamp,\n      status: 'completed'\n    },\n    {\n      name: 'Development Phase',\n      dueDate: Timestamp,\n      status: 'in-progress'\n    }\n  ],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/apps/bookkeeper/invoices/{invoiceId}\n{\n  invoiceNumber: 'INV-2024-001',\n  \n  // Links to shared data\n  clientId: 'client-abc-123',\n  matterId: 'matter-def-456',  // Optional: for matter-based billing\n  \n  // Invoice details\n  description: 'Legal services for January 2024',\n  status: 'draft' | 'sent' | 'paid' | 'overdue',\n  \n  // Line items\n  lineItems: [\n    {\n      description: 'Contract review',\n      hours: 10.5,\n      rate: 350,\n      amount: 3675\n    },\n    {\n      description: 'Client consultation',\n      hours: 2.0,\n      rate: 350,\n      amount: 700\n    }\n  ],\n  \n  // Totals\n  subtotal: 4375,\n  tax: 350,\n  total: 4725,\n  \n  // Payment tracking\n  dueDate: Timestamp,\n  paidDate: Timestamp,\n  paidAmount: 4725,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```","originalFile":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Current Implementation Analysis\n\n### \u0005 What's Already Working\n- Basic team-based multi-tenancy with `teams` and `users` collections\n- Security rules with custom claims for efficient authorization\n- Team membership embedded in team documents\n- Multi-App SSO authentication flow\n\n### =\u0004 Areas for Optimization\n- Large teams may hit Firestore document size limits (1MB) with embedded members\n- Querying user memberships requires scanning all teams (inefficient at scale)\n- No invitation system for adding members\n- Missing audit trails for membership changes\n\n## Optimal Data Structure\n\n### Core Collections\n\n#### 1. Users Collection: `/users/{userId}`\n**Purpose**: Store application-specific user data (NOT identity data - that stays in Firebase Auth)\n\n```javascript\n{\n  // Application-specific data only\n  role: 'user' | 'admin',\n  department: 'Engineering',\n  defaultTeamId: 'team-abc-123',  // User's primary team\n  preferences: {\n    theme: 'light',\n    notifications: true,\n    language: 'en'\n  },\n  \n  // Activity tracking\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  lastLogin: Timestamp,\n  \n  // Note: email, displayName, photoURL come from Firebase Auth\n  // teamId is set via custom claims, not stored here\n}\n```\n\n#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information and app access control\n\n```javascript\n{\n  name: 'ACME Law Firm',\n  description: 'Full-service law firm serving corporate clients',\n  domain: 'acmelaw.com',  // Optional: for email domain-based auto-join\n  \n  // Multi-App Access Control\n  apps: {\n    intranet: {\n      enabled: true,\n      plan: 'premium',\n      features: ['documents', 'calendar', 'messaging']\n    },\n    bookkeeper: {\n      enabled: true,\n      plan: 'basic',\n      features: ['invoicing', 'expenses']\n    },\n    files: {\n      enabled: false,  // This team doesn't have access to files app\n      plan: null,\n      features: []\n    }\n  },\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    timezone: 'America/New_York',\n    businessHours: {\n      start: '09:00',\n      end: '17:00',\n      days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n    }\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```\n\n#### 3. Team Memberships Subcollection: `/teams/{teamId}/memberships/{userId}`\n**Purpose**: Manage team memberships with detailed information and audit trail\n\n```javascript\n{\n  // User information (denormalized for performance)\n  email: 'john@acme.com',\n  displayName: 'John Doe',  // Cached from Firebase Auth\n  \n  // Membership details\n  role: 'member' | 'admin' | 'owner',\n  status: 'active' | 'invited' | 'suspended',\n  \n  // App-specific permissions (role-based)\n  permissions: {\n    // Global team permissions\n    canManageMembers: false,\n    canManageSettings: false,\n    \n    // App-specific permissions\n    apps: {\n      intranet: {\n        canCreateProjects: true,\n        canDeleteProjects: false,\n        canManageDocuments: true\n      },\n      bookkeeper: {\n        canCreateInvoices: true,\n        canApproveExpenses: false,\n        canViewReports: true\n      }\n    }\n  },\n  \n  // Activity tracking\n  joinedAt: Timestamp,\n  invitedAt: Timestamp,\n  invitedBy: 'user-abc-456',\n  lastActivity: Timestamp,\n  \n  // Audit trail\n  history: [\n    {\n      action: 'role_changed',\n      from: 'member',\n      to: 'admin',\n      by: 'user-abc-456',\n      at: Timestamp\n    }\n  ]\n}\n```\n\n#### 4. Team Invitations Collection: `/invitations/{invitationId}`\n**Purpose**: Manage pending team invitations\n\n```javascript\n{\n  teamId: 'team-abc-123',\n  teamName: 'ACME Corporation',  // Denormalized for convenience\n  \n  // Invitation details\n  email: 'newuser@acme.com',\n  role: 'member',\n  message: 'Welcome to our team!',\n  \n  // Status tracking\n  status: 'pending' | 'accepted' | 'expired' | 'revoked',\n  token: 'secure-random-token',  // For secure invitation links\n  \n  // Metadata\n  createdAt: Timestamp,\n  expiresAt: Timestamp,  // Auto-expire invitations\n  invitedBy: 'user-xyz-789',\n  acceptedAt: Timestamp,\n  acceptedBy: 'user-new-123'\n}\n```\n\n#### 5. User Team Memberships (Collection Group): Query via Collection Group\n**Purpose**: Enable efficient queries for \"all teams a user belongs to\"\n\nThis uses the `/teams/{teamId}/memberships/{userId}` subcollection with Collection Group queries:\n\n```javascript\n// Query all memberships for a user across all teams\nconst userMemberships = await db\n  .collectionGroup('memberships')\n  .where(documentId(), '==', userId)\n  .get()\n```\n\n### App-Specific Data Collections\n\n#### 6. Team-Scoped Documents: `/{collection}/{documentId}`\n**Purpose**: Any app-specific data that should be team-scoped\n\n```javascript\n// Example: /projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Team association (CRITICAL for security rules)\n  teamId: 'team-abc-123',\n  \n  // Project-specific data\n  status: 'in-progress',\n  priority: 'high',\n  \n  // Access control\n  createdBy: 'user-xyz-789',\n  assignees: ['user-abc-456', 'user-def-789'],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp\n}\n```\n\n## Security Rules Strategy\n\n### Custom Claims (Preferred for SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Custom claims set on Firebase Auth token\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  permissions: ['manage_members', 'create_projects']\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n}\n\n// App-specific collections with team scoping\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId);\n  allow create: if isTeamMember(request.resource.data.teamId);\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n```\n\n## Query Patterns\n\n### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get team projects**:\n```javascript\nconst projects = await db\n  .collection('projects')\n  .where('teamId', '==', currentTeamId)\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n4. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n## Performance Considerations\n\n### Denormalization Strategy\n- **Team name** cached in memberships for UI display\n- **User display name** cached in memberships to avoid Auth lookups\n- **Member count** cached in team document for dashboards\n\n### Index Requirements\n```javascript\n// Firestore indexes needed\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'projects', // Replace with your app collections\n  fields: [\n    { fieldPath: 'teamId', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```\n\n### Scalability Limits\n- **Team document**: No size limits (members moved to subcollection)\n- **Memberships subcollection**: Supports unlimited team members\n- **Custom claims**: Efficient authorization without database reads\n- **Collection group queries**: Scale to millions of memberships\n\n## Migration Strategy\n\n### Phase 1: Add New Collections (Non-Breaking)\n1. Create `invitations` collection\n2. Migrate existing members to `memberships` subcollections\n3. Update security rules to support both old and new structure\n4. Add Collection Group indexes\n\n### Phase 2: Update Application Code\n1. Update `TeamService` to use new membership structure\n2. Implement invitation system\n3. Add Collection Group queries for user teams\n4. Update UI components\n\n### Phase 3: Clean Up (Breaking)\n1. Remove `members` field from team documents\n2. Update security rules to use new structure only\n3. Remove old query patterns\n\n## Benefits of This Structure\n\n### \u0005 Scalability\n- No document size limits for large teams\n- Efficient queries for user memberships\n- Supports millions of users and teams\n\n### \u0005 Security\n- Granular permission system\n- Custom claims for fast authorization\n- Audit trail for compliance\n\n### \u0005 Performance  \n- Denormalized data for fast UI updates\n- Collection Group queries for cross-team data\n- Minimal database reads for authorization\n\n### \u0005 Maintainability\n- Clear separation of concerns\n- Consistent patterns across collections\n- Easy to add new team-scoped features\n\n### \u0005 Multi-App SSO Ready\n- Custom claims work across all apps\n- Consistent team context everywhere\n- Single source of truth for permissions\n\nThis structure follows Firebase best practices while supporting your Multi-App SSO requirements and providing a solid foundation for scaling to thousands of teams and users.","structuredPatch":[{"oldStart":191,"oldLines":32,"newStart":191,"newLines":180,"lines":["   .get()"," ```"," ","-### App-Specific Data Collections","+### Team Data Organization"," ","-#### 6. Team-Scoped Documents: `/{collection}/{documentId}`","-**Purpose**: Any app-specific data that should be team-scoped","+#### 6. Shared Data Subcollections: `/teams/{teamId}/shared/{collection}/{documentId}`","+**Purpose**: Data needed by multiple apps (clients, matters, contacts, etc.)"," "," ```javascript","-// Example: /projects/{projectId}","+// Example: /teams/{teamId}/shared/clients/{clientId}"," {","+  name: 'ABC Corporation',","+  type: 'corporate' | 'individual',","+  ","+  // Contact information","+  primaryContact: {","+    name: 'John Smith',","+    email: 'john@abccorp.com',","+    phone: '+1-555-0123',","+    title: 'General Counsel'","+  },","+  ","+  // Address information","+  address: {","+    street: '123 Business Ave',","+    city: 'New York',","+    state: 'NY',","+    zip: '10001',","+    country: 'USA'","+  },","+  ","+  // Client-specific data","+  industry: 'Technology',","+  retainerAmount: 10000,","+  billingRate: 350,","+  status: 'active' | 'inactive' | 'prospect',","+  ","+  // Which apps can access this client","+  appAccess: {","+    intranet: true,    // Client management, contacts","+    bookkeeper: true,  // Invoicing, time tracking","+    files: true        // Document storage","+  },","+  ","+  // Metadata","+  createdAt: Timestamp,","+  updatedAt: Timestamp,","+  createdBy: 'user-xyz-789'","+}","+","+// Example: /teams/{teamId}/shared/matters/{matterId}","+{","+  title: 'ABC Corp - Contract Review',","+  description: 'Review and negotiation of software licensing agreement',","+  ","+  // Client association","+  clientId: 'client-abc-123',","+  clientName: 'ABC Corporation',  // Denormalized","+  ","+  // Matter details","+  matterNumber: '2024-001',","+  practiceArea: 'Corporate Law',","+  status: 'active' | 'closed' | 'on-hold',","+  priority: 'high' | 'medium' | 'low',","+  ","+  // Financial information","+  budget: 25000,","+  billingRate: 350,","+  ","+  // Assigned team","+  leadAttorney: 'user-xyz-789',","+  assignedLawyers: ['user-abc-456', 'user-def-789'],","+  ","+  // App access control","+  appAccess: {","+    intranet: true,    // Matter management, tasks","+    bookkeeper: true,  // Time tracking, billing","+    files: true        // Document management","+  },","+  ","+  // Important dates","+  openedDate: Timestamp,","+  dueDate: Timestamp,","+  closedDate: Timestamp,","+  ","+  // Metadata","+  createdAt: Timestamp,","+  updatedAt: Timestamp,","+  createdBy: 'user-xyz-789'","+}","+```","+","+#### 7. App-Specific Data Subcollections: `/teams/{teamId}/apps/{appName}/{collection}/{documentId}`","+**Purpose**: Data that belongs to a specific app only","+","+```javascript","+// Example: /teams/{teamId}/apps/intranet/projects/{projectId}","+{","   name: 'Website Redesign',","   description: 'Q1 2024 website overhaul',","   ","-  // Team association (CRITICAL for security rules)","-  teamId: 'team-abc-123',","+  // Optional association with shared data","+  relatedClientId: 'client-abc-123',  // Links to shared client data","+  relatedMatterId: 'matter-def-456',  // Links to shared matter data","   ","-  // Project-specific data","+  // App-specific project data","   status: 'in-progress',","   priority: 'high',","+  methodology: 'agile',","   ","-  // Access control","-  createdBy: 'user-xyz-789',","-  assignees: ['user-abc-456', 'user-def-789'],","+  // Project team (different from matter team)","+  projectManager: 'user-xyz-789',","+  developers: ['user-abc-456', 'user-def-789'],","   ","+  // Milestones","+  milestones: [","+    {","+      name: 'Design Phase',","+      dueDate: Timestamp,","+      status: 'completed'","+    },","+    {","+      name: 'Development Phase',","+      dueDate: Timestamp,","+      status: 'in-progress'","+    }","+  ],","+  ","   // Metadata","   createdAt: Timestamp,","-  updatedAt: Timestamp","+  updatedAt: Timestamp,","+  createdBy: 'user-xyz-789'"," }","+","+// Example: /teams/{teamId}/apps/bookkeeper/invoices/{invoiceId}","+{","+  invoiceNumber: 'INV-2024-001',","+  ","+  // Links to shared data","+  clientId: 'client-abc-123',","+  matterId: 'matter-def-456',  // Optional: for matter-based billing","+  ","+  // Invoice details","+  description: 'Legal services for January 2024',","+  status: 'draft' | 'sent' | 'paid' | 'overdue',","+  ","+  // Line items","+  lineItems: [","+    {","+      description: 'Contract review',","+      hours: 10.5,","+      rate: 350,","+      amount: 3675","+    },","+    {","+      description: 'Client consultation',","+      hours: 2.0,","+      rate: 350,","+      amount: 700","+    }","+  ],","+  ","+  // Totals","+  subtotal: 4375,","+  tax: 350,","+  total: 4725,","+  ","+  // Payment tracking","+  dueDate: Timestamp,","+  paidDate: Timestamp,","+  paidAmount: 4725,","+  ","+  // Metadata","+  createdAt: Timestamp,","+  updatedAt: Timestamp,","+  createdBy: 'user-xyz-789'","+}"," ```"," "," ## Security Rules Strategy"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"b64a480f-5701-4c1a-a4ca-665d5f23bd09","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01KA4EKmNjH5m1ktHmxoN7gq","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01FNg2FU6S1m9sLKXfWeaubC","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Update data structure for app-specific access control","status":"completed"},{"id":"2","content":"Design shared data subcollections for cross-app data","status":"completed"},{"id":"3","content":"Add team app permissions and feature flags","status":"completed"},{"id":"4","content":"Update security rules for app-specific access","status":"in_progress"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":3784,"cache_read_input_tokens":41712,"cache_creation":{"ephemeral_5m_input_tokens":3784,"ephemeral_1h_input_tokens":0},"output_tokens":161,"service_tier":"standard"}},"requestId":"req_011CSKBfXU84hL4fNChynLZG","type":"assistant","uuid":"67a8ea2b-92bd-44cf-9b2c-f9e72af250d7","timestamp":"2025-08-20T15:18:01.155Z"}
{"parentUuid":"67a8ea2b-92bd-44cf-9b2c-f9e72af250d7","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01FNg2FU6S1m9sLKXfWeaubC","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"bede3e85-46c1-475b-a3e9-86b1be417583","timestamp":"2025-08-20T15:18:01.198Z","toolUseResult":{"oldTodos":[{"content":"Update data structure for app-specific access control","status":"completed","id":"1"},{"content":"Design shared data subcollections for cross-app data","status":"in_progress","id":"2"},{"content":"Add team app permissions and feature flags","status":"pending","id":"3"},{"content":"Update security rules for app-specific access","status":"pending","id":"4"}],"newTodos":[{"content":"Update data structure for app-specific access control","status":"completed","id":"1"},{"content":"Design shared data subcollections for cross-app data","status":"completed","id":"2"},{"content":"Add team app permissions and feature flags","status":"completed","id":"3"},{"content":"Update security rules for app-specific access","status":"in_progress","id":"4"}]}}
{"parentUuid":"bede3e85-46c1-475b-a3e9-86b1be417583","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01XLptmucoSkXGDpjM42xZqh","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01GiX2zLcqDyo2TCVogZUPw7","name":"Edit","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","old_string":"### Custom Claims (Preferred for SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Custom claims set on Firebase Auth token\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  permissions: ['manage_members', 'create_projects']\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n}\n\n// App-specific collections with team scoping\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId);\n  allow create: if isTeamMember(request.resource.data.teamId);\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n```","new_string":"### Custom Claims (Enhanced for Multi-App SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Enhanced custom claims with app-specific permissions\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  apps: {\n    intranet: {\n      enabled: true,\n      permissions: ['manage_projects', 'view_reports']\n    },\n    bookkeeper: {\n      enabled: true,\n      permissions: ['create_invoices', 'approve_expenses']\n    },\n    files: {\n      enabled: false,  // User doesn't have access to files app\n      permissions: []\n    }\n  }\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n  \n  // Shared data subcollections (accessible by multiple apps)\n  match /shared/{collection}/{documentId} {\n    allow read: if isTeamMember(teamId) && hasSharedDataAccess(collection);\n    allow write: if isTeamMember(teamId) && hasSharedDataWriteAccess(collection);\n  }\n  \n  // App-specific data subcollections\n  match /apps/{appName}/{collection}/{documentId} {\n    allow read: if isTeamMember(teamId) && hasAppAccess(appName);\n    allow write: if isTeamMember(teamId) && hasAppAccess(appName) && \n                    hasAppPermission(appName, 'write_' + collection);\n  }\n}\n\n// Legacy app-specific collections (if you still have top-level collections)\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId) && \n                        hasAppAccess('intranet');\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n\nfunction hasAppAccess(appName) {\n  return request.auth != null && \n         request.auth.token.apps != null &&\n         request.auth.token.apps[appName] != null &&\n         request.auth.token.apps[appName].enabled == true;\n}\n\nfunction hasAppPermission(appName, permission) {\n  return hasAppAccess(appName) &&\n         permission in request.auth.token.apps[appName].permissions;\n}\n\nfunction hasSharedDataAccess(collection) {\n  // Allow access to shared data if user has access to any app that uses it\n  return hasAppAccess('intranet') || \n         hasAppAccess('bookkeeper') || \n         hasAppAccess('files');\n}\n\nfunction hasSharedDataWriteAccess(collection) {\n  // More restrictive write access - require specific permissions\n  return (collection == 'clients' && \n          (hasAppPermission('intranet', 'manage_clients') ||\n           hasAppPermission('bookkeeper', 'manage_clients'))) ||\n         (collection == 'matters' && \n          hasAppPermission('intranet', 'manage_matters'));\n}\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":339,"cache_read_input_tokens":45496,"cache_creation":{"ephemeral_5m_input_tokens":339,"ephemeral_1h_input_tokens":0},"output_tokens":1452,"service_tier":"standard"}},"requestId":"req_011CSKBfpoQcf8cLkKvG3DBV","type":"assistant","uuid":"6730947c-8d38-4175-beea-1bf98439007d","timestamp":"2025-08-20T15:18:21.000Z"}
{"parentUuid":"6730947c-8d38-4175-beea-1bf98439007d","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01GiX2zLcqDyo2TCVogZUPw7","type":"tool_result","content":"The file C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   368→```\n   369→\n   370→## Security Rules Strategy\n   371→\n   372→### Custom Claims (Enhanced for Multi-App SSO)\n   373→Set via Firebase Admin SDK when user authenticates:\n   374→\n   375→```javascript\n   376→// Enhanced custom claims with app-specific permissions\n   377→{\n   378→  teamId: 'team-abc-123',\n   379→  role: 'admin',\n   380→  apps: {\n   381→    intranet: {\n   382→      enabled: true,\n   383→      permissions: ['manage_projects', 'view_reports']\n   384→    },\n   385→    bookkeeper: {\n   386→      enabled: true,\n   387→      permissions: ['create_invoices', 'approve_expenses']\n   388→    },\n   389→    files: {\n   390→      enabled: false,  // User doesn't have access to files app\n   391→      permissions: []\n   392→    }\n   393→  }\n   394→}\n   395→```\n   396→\n   397→### Firestore Rules Examples\n   398→\n   399→```javascript\n   400→// Users can only access their own document\n   401→match /users/{userId} {\n   402→  allow read, write: if request.auth != null && request.auth.uid == userId;\n   403→}\n   404→\n   405→// Team access based on membership\n   406→match /teams/{teamId} {\n   407→  allow read: if isTeamMember(teamId);\n   408→  allow write: if isTeamAdmin(teamId);\n   409→  \n   410→  // Team memberships subcollection\n   411→  match /memberships/{userId} {\n   412→    allow read: if isTeamMember(teamId);\n   413→    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n   414→  }\n   415→  \n   416→  // Shared data subcollections (accessible by multiple apps)\n   417→  match /shared/{collection}/{documentId} {\n   418→    allow read: if isTeamMember(teamId) && hasSharedDataAccess(collection);\n   419→    allow write: if isTeamMember(teamId) && hasSharedDataWriteAccess(collection);\n   420→  }\n   421→  \n   422→  // App-specific data subcollections\n   423→  match /apps/{appName}/{collection}/{documentId} {\n   424→    allow read: if isTeamMember(teamId) && hasAppAccess(appName);\n   425→    allow write: if isTeamMember(teamId) && hasAppAccess(appName) && \n   426→                    hasAppPermission(appName, 'write_' + collection);\n   427→  }\n   428→}\n   429→\n   430→// Legacy app-specific collections (if you still have top-level collections)\n   431→match /projects/{projectId} {\n   432→  allow read, write: if isTeamMember(resource.data.teamId) && \n   433→                        hasAppAccess('intranet');\n   434→}\n   435→\n   436→// Helper functions\n   437→function isTeamMember(teamId) {\n   438→  return request.auth != null && request.auth.token.teamId == teamId;\n   439→}\n   440→\n   441→function isTeamAdmin(teamId) {\n   442→  return isTeamMember(teamId) && \n   443→         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n   444→}\n   445→\n   446→function hasAppAccess(appName) {\n   447→  return request.auth != null && \n   448→         request.auth.token.apps != null &&\n   449→         request.auth.token.apps[appName] != null &&\n   450→         request.auth.token.apps[appName].enabled == true;\n   451→}\n   452→\n   453→function hasAppPermission(appName, permission) {\n   454→  return hasAppAccess(appName) &&\n   455→         permission in request.auth.token.apps[appName].permissions;\n   456→}\n   457→\n   458→function hasSharedDataAccess(collection) {\n   459→  // Allow access to shared data if user has access to any app that uses it\n   460→  return hasAppAccess('intranet') || \n   461→         hasAppAccess('bookkeeper') || \n   462→         hasAppAccess('files');\n   463→}\n   464→\n   465→function hasSharedDataWriteAccess(collection) {\n   466→  // More restrictive write access - require specific permissions\n   467→  return (collection == 'clients' && \n   468→          (hasAppPermission('intranet', 'manage_clients') ||\n   469→           hasAppPermission('bookkeeper', 'manage_clients'))) ||\n   470→         (collection == 'matters' && \n   471→          hasAppPermission('intranet', 'manage_matters'));\n   472→}\n   473→```\n   474→\n   475→## Query Patterns\n   476→\n   477→### High-Performance Queries Enabled"}]},"uuid":"2abf0561-30aa-486b-94c5-7ae054861a14","timestamp":"2025-08-20T15:18:21.070Z","toolUseResult":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","oldString":"### Custom Claims (Preferred for SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Custom claims set on Firebase Auth token\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  permissions: ['manage_members', 'create_projects']\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n}\n\n// App-specific collections with team scoping\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId);\n  allow create: if isTeamMember(request.resource.data.teamId);\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n```","newString":"### Custom Claims (Enhanced for Multi-App SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Enhanced custom claims with app-specific permissions\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  apps: {\n    intranet: {\n      enabled: true,\n      permissions: ['manage_projects', 'view_reports']\n    },\n    bookkeeper: {\n      enabled: true,\n      permissions: ['create_invoices', 'approve_expenses']\n    },\n    files: {\n      enabled: false,  // User doesn't have access to files app\n      permissions: []\n    }\n  }\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n  \n  // Shared data subcollections (accessible by multiple apps)\n  match /shared/{collection}/{documentId} {\n    allow read: if isTeamMember(teamId) && hasSharedDataAccess(collection);\n    allow write: if isTeamMember(teamId) && hasSharedDataWriteAccess(collection);\n  }\n  \n  // App-specific data subcollections\n  match /apps/{appName}/{collection}/{documentId} {\n    allow read: if isTeamMember(teamId) && hasAppAccess(appName);\n    allow write: if isTeamMember(teamId) && hasAppAccess(appName) && \n                    hasAppPermission(appName, 'write_' + collection);\n  }\n}\n\n// Legacy app-specific collections (if you still have top-level collections)\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId) && \n                        hasAppAccess('intranet');\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n\nfunction hasAppAccess(appName) {\n  return request.auth != null && \n         request.auth.token.apps != null &&\n         request.auth.token.apps[appName] != null &&\n         request.auth.token.apps[appName].enabled == true;\n}\n\nfunction hasAppPermission(appName, permission) {\n  return hasAppAccess(appName) &&\n         permission in request.auth.token.apps[appName].permissions;\n}\n\nfunction hasSharedDataAccess(collection) {\n  // Allow access to shared data if user has access to any app that uses it\n  return hasAppAccess('intranet') || \n         hasAppAccess('bookkeeper') || \n         hasAppAccess('files');\n}\n\nfunction hasSharedDataWriteAccess(collection) {\n  // More restrictive write access - require specific permissions\n  return (collection == 'clients' && \n          (hasAppPermission('intranet', 'manage_clients') ||\n           hasAppPermission('bookkeeper', 'manage_clients'))) ||\n         (collection == 'matters' && \n          hasAppPermission('intranet', 'manage_matters'));\n}\n```","originalFile":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Current Implementation Analysis\n\n### \u0005 What's Already Working\n- Basic team-based multi-tenancy with `teams` and `users` collections\n- Security rules with custom claims for efficient authorization\n- Team membership embedded in team documents\n- Multi-App SSO authentication flow\n\n### =\u0004 Areas for Optimization\n- Large teams may hit Firestore document size limits (1MB) with embedded members\n- Querying user memberships requires scanning all teams (inefficient at scale)\n- No invitation system for adding members\n- Missing audit trails for membership changes\n\n## Optimal Data Structure\n\n### Core Collections\n\n#### 1. Users Collection: `/users/{userId}`\n**Purpose**: Store application-specific user data (NOT identity data - that stays in Firebase Auth)\n\n```javascript\n{\n  // Application-specific data only\n  role: 'user' | 'admin',\n  department: 'Engineering',\n  defaultTeamId: 'team-abc-123',  // User's primary team\n  preferences: {\n    theme: 'light',\n    notifications: true,\n    language: 'en'\n  },\n  \n  // Activity tracking\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  lastLogin: Timestamp,\n  \n  // Note: email, displayName, photoURL come from Firebase Auth\n  // teamId is set via custom claims, not stored here\n}\n```\n\n#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information and app access control\n\n```javascript\n{\n  name: 'ACME Law Firm',\n  description: 'Full-service law firm serving corporate clients',\n  domain: 'acmelaw.com',  // Optional: for email domain-based auto-join\n  \n  // Multi-App Access Control\n  apps: {\n    intranet: {\n      enabled: true,\n      plan: 'premium',\n      features: ['documents', 'calendar', 'messaging']\n    },\n    bookkeeper: {\n      enabled: true,\n      plan: 'basic',\n      features: ['invoicing', 'expenses']\n    },\n    files: {\n      enabled: false,  // This team doesn't have access to files app\n      plan: null,\n      features: []\n    }\n  },\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    timezone: 'America/New_York',\n    businessHours: {\n      start: '09:00',\n      end: '17:00',\n      days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n    }\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```\n\n#### 3. Team Memberships Subcollection: `/teams/{teamId}/memberships/{userId}`\n**Purpose**: Manage team memberships with detailed information and audit trail\n\n```javascript\n{\n  // User information (denormalized for performance)\n  email: 'john@acme.com',\n  displayName: 'John Doe',  // Cached from Firebase Auth\n  \n  // Membership details\n  role: 'member' | 'admin' | 'owner',\n  status: 'active' | 'invited' | 'suspended',\n  \n  // App-specific permissions (role-based)\n  permissions: {\n    // Global team permissions\n    canManageMembers: false,\n    canManageSettings: false,\n    \n    // App-specific permissions\n    apps: {\n      intranet: {\n        canCreateProjects: true,\n        canDeleteProjects: false,\n        canManageDocuments: true\n      },\n      bookkeeper: {\n        canCreateInvoices: true,\n        canApproveExpenses: false,\n        canViewReports: true\n      }\n    }\n  },\n  \n  // Activity tracking\n  joinedAt: Timestamp,\n  invitedAt: Timestamp,\n  invitedBy: 'user-abc-456',\n  lastActivity: Timestamp,\n  \n  // Audit trail\n  history: [\n    {\n      action: 'role_changed',\n      from: 'member',\n      to: 'admin',\n      by: 'user-abc-456',\n      at: Timestamp\n    }\n  ]\n}\n```\n\n#### 4. Team Invitations Collection: `/invitations/{invitationId}`\n**Purpose**: Manage pending team invitations\n\n```javascript\n{\n  teamId: 'team-abc-123',\n  teamName: 'ACME Corporation',  // Denormalized for convenience\n  \n  // Invitation details\n  email: 'newuser@acme.com',\n  role: 'member',\n  message: 'Welcome to our team!',\n  \n  // Status tracking\n  status: 'pending' | 'accepted' | 'expired' | 'revoked',\n  token: 'secure-random-token',  // For secure invitation links\n  \n  // Metadata\n  createdAt: Timestamp,\n  expiresAt: Timestamp,  // Auto-expire invitations\n  invitedBy: 'user-xyz-789',\n  acceptedAt: Timestamp,\n  acceptedBy: 'user-new-123'\n}\n```\n\n#### 5. User Team Memberships (Collection Group): Query via Collection Group\n**Purpose**: Enable efficient queries for \"all teams a user belongs to\"\n\nThis uses the `/teams/{teamId}/memberships/{userId}` subcollection with Collection Group queries:\n\n```javascript\n// Query all memberships for a user across all teams\nconst userMemberships = await db\n  .collectionGroup('memberships')\n  .where(documentId(), '==', userId)\n  .get()\n```\n\n### Team Data Organization\n\n#### 6. Shared Data Subcollections: `/teams/{teamId}/shared/{collection}/{documentId}`\n**Purpose**: Data needed by multiple apps (clients, matters, contacts, etc.)\n\n```javascript\n// Example: /teams/{teamId}/shared/clients/{clientId}\n{\n  name: 'ABC Corporation',\n  type: 'corporate' | 'individual',\n  \n  // Contact information\n  primaryContact: {\n    name: 'John Smith',\n    email: 'john@abccorp.com',\n    phone: '+1-555-0123',\n    title: 'General Counsel'\n  },\n  \n  // Address information\n  address: {\n    street: '123 Business Ave',\n    city: 'New York',\n    state: 'NY',\n    zip: '10001',\n    country: 'USA'\n  },\n  \n  // Client-specific data\n  industry: 'Technology',\n  retainerAmount: 10000,\n  billingRate: 350,\n  status: 'active' | 'inactive' | 'prospect',\n  \n  // Which apps can access this client\n  appAccess: {\n    intranet: true,    // Client management, contacts\n    bookkeeper: true,  // Invoicing, time tracking\n    files: true        // Document storage\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/shared/matters/{matterId}\n{\n  title: 'ABC Corp - Contract Review',\n  description: 'Review and negotiation of software licensing agreement',\n  \n  // Client association\n  clientId: 'client-abc-123',\n  clientName: 'ABC Corporation',  // Denormalized\n  \n  // Matter details\n  matterNumber: '2024-001',\n  practiceArea: 'Corporate Law',\n  status: 'active' | 'closed' | 'on-hold',\n  priority: 'high' | 'medium' | 'low',\n  \n  // Financial information\n  budget: 25000,\n  billingRate: 350,\n  \n  // Assigned team\n  leadAttorney: 'user-xyz-789',\n  assignedLawyers: ['user-abc-456', 'user-def-789'],\n  \n  // App access control\n  appAccess: {\n    intranet: true,    // Matter management, tasks\n    bookkeeper: true,  // Time tracking, billing\n    files: true        // Document management\n  },\n  \n  // Important dates\n  openedDate: Timestamp,\n  dueDate: Timestamp,\n  closedDate: Timestamp,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```\n\n#### 7. App-Specific Data Subcollections: `/teams/{teamId}/apps/{appName}/{collection}/{documentId}`\n**Purpose**: Data that belongs to a specific app only\n\n```javascript\n// Example: /teams/{teamId}/apps/intranet/projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Optional association with shared data\n  relatedClientId: 'client-abc-123',  // Links to shared client data\n  relatedMatterId: 'matter-def-456',  // Links to shared matter data\n  \n  // App-specific project data\n  status: 'in-progress',\n  priority: 'high',\n  methodology: 'agile',\n  \n  // Project team (different from matter team)\n  projectManager: 'user-xyz-789',\n  developers: ['user-abc-456', 'user-def-789'],\n  \n  // Milestones\n  milestones: [\n    {\n      name: 'Design Phase',\n      dueDate: Timestamp,\n      status: 'completed'\n    },\n    {\n      name: 'Development Phase',\n      dueDate: Timestamp,\n      status: 'in-progress'\n    }\n  ],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/apps/bookkeeper/invoices/{invoiceId}\n{\n  invoiceNumber: 'INV-2024-001',\n  \n  // Links to shared data\n  clientId: 'client-abc-123',\n  matterId: 'matter-def-456',  // Optional: for matter-based billing\n  \n  // Invoice details\n  description: 'Legal services for January 2024',\n  status: 'draft' | 'sent' | 'paid' | 'overdue',\n  \n  // Line items\n  lineItems: [\n    {\n      description: 'Contract review',\n      hours: 10.5,\n      rate: 350,\n      amount: 3675\n    },\n    {\n      description: 'Client consultation',\n      hours: 2.0,\n      rate: 350,\n      amount: 700\n    }\n  ],\n  \n  // Totals\n  subtotal: 4375,\n  tax: 350,\n  total: 4725,\n  \n  // Payment tracking\n  dueDate: Timestamp,\n  paidDate: Timestamp,\n  paidAmount: 4725,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```\n\n## Security Rules Strategy\n\n### Custom Claims (Preferred for SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Custom claims set on Firebase Auth token\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  permissions: ['manage_members', 'create_projects']\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n}\n\n// App-specific collections with team scoping\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId);\n  allow create: if isTeamMember(request.resource.data.teamId);\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n```\n\n## Query Patterns\n\n### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get team projects**:\n```javascript\nconst projects = await db\n  .collection('projects')\n  .where('teamId', '==', currentTeamId)\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n4. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n## Performance Considerations\n\n### Denormalization Strategy\n- **Team name** cached in memberships for UI display\n- **User display name** cached in memberships to avoid Auth lookups\n- **Member count** cached in team document for dashboards\n\n### Index Requirements\n```javascript\n// Firestore indexes needed\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'projects', // Replace with your app collections\n  fields: [\n    { fieldPath: 'teamId', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```\n\n### Scalability Limits\n- **Team document**: No size limits (members moved to subcollection)\n- **Memberships subcollection**: Supports unlimited team members\n- **Custom claims**: Efficient authorization without database reads\n- **Collection group queries**: Scale to millions of memberships\n\n## Migration Strategy\n\n### Phase 1: Add New Collections (Non-Breaking)\n1. Create `invitations` collection\n2. Migrate existing members to `memberships` subcollections\n3. Update security rules to support both old and new structure\n4. Add Collection Group indexes\n\n### Phase 2: Update Application Code\n1. Update `TeamService` to use new membership structure\n2. Implement invitation system\n3. Add Collection Group queries for user teams\n4. Update UI components\n\n### Phase 3: Clean Up (Breaking)\n1. Remove `members` field from team documents\n2. Update security rules to use new structure only\n3. Remove old query patterns\n\n## Benefits of This Structure\n\n### \u0005 Scalability\n- No document size limits for large teams\n- Efficient queries for user memberships\n- Supports millions of users and teams\n\n### \u0005 Security\n- Granular permission system\n- Custom claims for fast authorization\n- Audit trail for compliance\n\n### \u0005 Performance  \n- Denormalized data for fast UI updates\n- Collection Group queries for cross-team data\n- Minimal database reads for authorization\n\n### \u0005 Maintainability\n- Clear separation of concerns\n- Consistent patterns across collections\n- Easy to add new team-scoped features\n\n### \u0005 Multi-App SSO Ready\n- Custom claims work across all apps\n- Consistent team context everywhere\n- Single source of truth for permissions\n\nThis structure follows Firebase best practices while supporting your Multi-App SSO requirements and providing a solid foundation for scaling to thousands of teams and users.","structuredPatch":[{"oldStart":369,"oldLines":15,"newStart":369,"newLines":28,"lines":[" "," ## Security Rules Strategy"," ","-### Custom Claims (Preferred for SSO)","+### Custom Claims (Enhanced for Multi-App SSO)"," Set via Firebase Admin SDK when user authenticates:"," "," ```javascript","-// Custom claims set on Firebase Auth token","+// Enhanced custom claims with app-specific permissions"," {","   teamId: 'team-abc-123',","   role: 'admin',","-  permissions: ['manage_members', 'create_projects']","+  apps: {","+    intranet: {","+      enabled: true,","+      permissions: ['manage_projects', 'view_reports']","+    },","+    bookkeeper: {","+      enabled: true,","+      permissions: ['create_invoices', 'approve_expenses']","+    },","+    files: {","+      enabled: false,  // User doesn't have access to files app","+      permissions: []","+    }","+  }"," }"," ```"," "]},{"oldStart":399,"oldLines":12,"newStart":412,"newLines":25,"lines":["     allow read: if isTeamMember(teamId);","     allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;","   }","+  ","+  // Shared data subcollections (accessible by multiple apps)","+  match /shared/{collection}/{documentId} {","+    allow read: if isTeamMember(teamId) && hasSharedDataAccess(collection);","+    allow write: if isTeamMember(teamId) && hasSharedDataWriteAccess(collection);","+  }","+  ","+  // App-specific data subcollections","+  match /apps/{appName}/{collection}/{documentId} {","+    allow read: if isTeamMember(teamId) && hasAppAccess(appName);","+    allow write: if isTeamMember(teamId) && hasAppAccess(appName) && ","+                    hasAppPermission(appName, 'write_' + collection);","+  }"," }"," ","-// App-specific collections with team scoping","+// Legacy app-specific collections (if you still have top-level collections)"," match /projects/{projectId} {","-  allow read, write: if isTeamMember(resource.data.teamId);","-  allow create: if isTeamMember(request.resource.data.teamId);","+  allow read, write: if isTeamMember(resource.data.teamId) && ","+                        hasAppAccess('intranet');"," }"," "," // Helper functions"]},{"oldStart":416,"oldLines":6,"newStart":442,"newLines":34,"lines":["   return isTeamMember(teamId) && ","          (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');"," }","+","+function hasAppAccess(appName) {","+  return request.auth != null && ","+         request.auth.token.apps != null &&","+         request.auth.token.apps[appName] != null &&","+         request.auth.token.apps[appName].enabled == true;","+}","+","+function hasAppPermission(appName, permission) {","+  return hasAppAccess(appName) &&","+         permission in request.auth.token.apps[appName].permissions;","+}","+","+function hasSharedDataAccess(collection) {","+  // Allow access to shared data if user has access to any app that uses it","+  return hasAppAccess('intranet') || ","+         hasAppAccess('bookkeeper') || ","+         hasAppAccess('files');","+}","+","+function hasSharedDataWriteAccess(collection) {","+  // More restrictive write access - require specific permissions","+  return (collection == 'clients' && ","+          (hasAppPermission('intranet', 'manage_clients') ||","+           hasAppPermission('bookkeeper', 'manage_clients'))) ||","+         (collection == 'matters' && ","+          hasAppPermission('intranet', 'manage_matters'));","+}"," ```"," "," ## Query Patterns"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"2abf0561-30aa-486b-94c5-7ae054861a14","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01FhXo4avAXdQHYH3n46fVt1","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_013JbiYDQeUJkndheSTcKSZZ","name":"Edit","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","old_string":"### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get team projects**:\n```javascript\nconst projects = await db\n  .collection('projects')\n  .where('teamId', '==', currentTeamId)\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n4. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```","new_string":"### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get shared clients for team**:\n```javascript\nconst clients = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('clients')\n  .collection('clients')\n  .where('status', '==', 'active')\n  .orderBy('name')\n  .get()\n```\n\n4. **Get matters for a specific client**:\n```javascript\nconst matters = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('matters')\n  .collection('matters')\n  .where('clientId', '==', clientId)\n  .where('status', '==', 'active')\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n5. **Get app-specific data (e.g., invoices)**:\n```javascript\nconst invoices = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('apps')\n  .doc('bookkeeper')\n  .collection('invoices')\n  .where('clientId', '==', clientId)\n  .orderBy('createdAt', 'desc')\n  .get()\n```\n\n6. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n7. **Cross-app data queries (using shared data)**:\n```javascript\n// Get all client data that can be used across apps\nconst sharedClients = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('clients')\n  .collection('clients')\n  .where('appAccess.intranet', '==', true)  // Only clients accessible to intranet\n  .get()\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":2826,"cache_read_input_tokens":45835,"cache_creation":{"ephemeral_5m_input_tokens":2826,"ephemeral_1h_input_tokens":0},"output_tokens":965,"service_tier":"standard"}},"requestId":"req_011CSKBhHotkELhKjiVJXSCf","type":"assistant","uuid":"088cc80f-1976-4e77-866b-3dd40d978369","timestamp":"2025-08-20T15:18:34.189Z"}
{"parentUuid":"088cc80f-1976-4e77-866b-3dd40d978369","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_013JbiYDQeUJkndheSTcKSZZ","type":"tool_result","content":"The file C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   473→```\n   474→\n   475→## Query Patterns\n   476→\n   477→### High-Performance Queries Enabled\n   478→\n   479→1. **Get user's teams**:\n   480→```javascript\n   481→const userTeams = await db\n   482→  .collectionGroup('memberships')\n   483→  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n   484→  .get()\n   485→```\n   486→\n   487→2. **Get team members**:\n   488→```javascript\n   489→const teamMembers = await db\n   490→  .collection('teams')\n   491→  .doc(teamId)\n   492→  .collection('memberships')\n   493→  .where('status', '==', 'active')\n   494→  .get()\n   495→```\n   496→\n   497→3. **Get shared clients for team**:\n   498→```javascript\n   499→const clients = await db\n   500→  .collection('teams')\n   501→  .doc(teamId)\n   502→  .collection('shared')\n   503→  .doc('clients')\n   504→  .collection('clients')\n   505→  .where('status', '==', 'active')\n   506→  .orderBy('name')\n   507→  .get()\n   508→```\n   509→\n   510→4. **Get matters for a specific client**:\n   511→```javascript\n   512→const matters = await db\n   513→  .collection('teams')\n   514→  .doc(teamId)\n   515→  .collection('shared')\n   516→  .doc('matters')\n   517→  .collection('matters')\n   518→  .where('clientId', '==', clientId)\n   519→  .where('status', '==', 'active')\n   520→  .orderBy('updatedAt', 'desc')\n   521→  .get()\n   522→```\n   523→\n   524→5. **Get app-specific data (e.g., invoices)**:\n   525→```javascript\n   526→const invoices = await db\n   527→  .collection('teams')\n   528→  .doc(teamId)\n   529→  .collection('apps')\n   530→  .doc('bookkeeper')\n   531→  .collection('invoices')\n   532→  .where('clientId', '==', clientId)\n   533→  .orderBy('createdAt', 'desc')\n   534→  .get()\n   535→```\n   536→\n   537→6. **Get pending invitations for email**:\n   538→```javascript\n   539→const invitations = await db\n   540→  .collection('invitations')\n   541→  .where('email', '==', userEmail)\n   542→  .where('status', '==', 'pending')\n   543→  .get()\n   544→```\n   545→\n   546→7. **Cross-app data queries (using shared data)**:\n   547→```javascript\n   548→// Get all client data that can be used across apps\n   549→const sharedClients = await db\n   550→  .collection('teams')\n   551→  .doc(teamId)\n   552→  .collection('shared')\n   553→  .doc('clients')\n   554→  .collection('clients')\n   555→  .where('appAccess.intranet', '==', true)  // Only clients accessible to intranet\n   556→  .get()\n   557→```\n   558→\n   559→## Performance Considerations\n   560→\n   561→### Denormalization Strategy"}]},"uuid":"e581be46-ff12-4b4d-a96b-08aa312c3ab4","timestamp":"2025-08-20T15:18:34.443Z","toolUseResult":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","oldString":"### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get team projects**:\n```javascript\nconst projects = await db\n  .collection('projects')\n  .where('teamId', '==', currentTeamId)\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n4. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```","newString":"### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get shared clients for team**:\n```javascript\nconst clients = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('clients')\n  .collection('clients')\n  .where('status', '==', 'active')\n  .orderBy('name')\n  .get()\n```\n\n4. **Get matters for a specific client**:\n```javascript\nconst matters = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('matters')\n  .collection('matters')\n  .where('clientId', '==', clientId)\n  .where('status', '==', 'active')\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n5. **Get app-specific data (e.g., invoices)**:\n```javascript\nconst invoices = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('apps')\n  .doc('bookkeeper')\n  .collection('invoices')\n  .where('clientId', '==', clientId)\n  .orderBy('createdAt', 'desc')\n  .get()\n```\n\n6. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n7. **Cross-app data queries (using shared data)**:\n```javascript\n// Get all client data that can be used across apps\nconst sharedClients = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('clients')\n  .collection('clients')\n  .where('appAccess.intranet', '==', true)  // Only clients accessible to intranet\n  .get()\n```","originalFile":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Current Implementation Analysis\n\n### \u0005 What's Already Working\n- Basic team-based multi-tenancy with `teams` and `users` collections\n- Security rules with custom claims for efficient authorization\n- Team membership embedded in team documents\n- Multi-App SSO authentication flow\n\n### =\u0004 Areas for Optimization\n- Large teams may hit Firestore document size limits (1MB) with embedded members\n- Querying user memberships requires scanning all teams (inefficient at scale)\n- No invitation system for adding members\n- Missing audit trails for membership changes\n\n## Optimal Data Structure\n\n### Core Collections\n\n#### 1. Users Collection: `/users/{userId}`\n**Purpose**: Store application-specific user data (NOT identity data - that stays in Firebase Auth)\n\n```javascript\n{\n  // Application-specific data only\n  role: 'user' | 'admin',\n  department: 'Engineering',\n  defaultTeamId: 'team-abc-123',  // User's primary team\n  preferences: {\n    theme: 'light',\n    notifications: true,\n    language: 'en'\n  },\n  \n  // Activity tracking\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  lastLogin: Timestamp,\n  \n  // Note: email, displayName, photoURL come from Firebase Auth\n  // teamId is set via custom claims, not stored here\n}\n```\n\n#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information and app access control\n\n```javascript\n{\n  name: 'ACME Law Firm',\n  description: 'Full-service law firm serving corporate clients',\n  domain: 'acmelaw.com',  // Optional: for email domain-based auto-join\n  \n  // Multi-App Access Control\n  apps: {\n    intranet: {\n      enabled: true,\n      plan: 'premium',\n      features: ['documents', 'calendar', 'messaging']\n    },\n    bookkeeper: {\n      enabled: true,\n      plan: 'basic',\n      features: ['invoicing', 'expenses']\n    },\n    files: {\n      enabled: false,  // This team doesn't have access to files app\n      plan: null,\n      features: []\n    }\n  },\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    timezone: 'America/New_York',\n    businessHours: {\n      start: '09:00',\n      end: '17:00',\n      days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n    }\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```\n\n#### 3. Team Memberships Subcollection: `/teams/{teamId}/memberships/{userId}`\n**Purpose**: Manage team memberships with detailed information and audit trail\n\n```javascript\n{\n  // User information (denormalized for performance)\n  email: 'john@acme.com',\n  displayName: 'John Doe',  // Cached from Firebase Auth\n  \n  // Membership details\n  role: 'member' | 'admin' | 'owner',\n  status: 'active' | 'invited' | 'suspended',\n  \n  // App-specific permissions (role-based)\n  permissions: {\n    // Global team permissions\n    canManageMembers: false,\n    canManageSettings: false,\n    \n    // App-specific permissions\n    apps: {\n      intranet: {\n        canCreateProjects: true,\n        canDeleteProjects: false,\n        canManageDocuments: true\n      },\n      bookkeeper: {\n        canCreateInvoices: true,\n        canApproveExpenses: false,\n        canViewReports: true\n      }\n    }\n  },\n  \n  // Activity tracking\n  joinedAt: Timestamp,\n  invitedAt: Timestamp,\n  invitedBy: 'user-abc-456',\n  lastActivity: Timestamp,\n  \n  // Audit trail\n  history: [\n    {\n      action: 'role_changed',\n      from: 'member',\n      to: 'admin',\n      by: 'user-abc-456',\n      at: Timestamp\n    }\n  ]\n}\n```\n\n#### 4. Team Invitations Collection: `/invitations/{invitationId}`\n**Purpose**: Manage pending team invitations\n\n```javascript\n{\n  teamId: 'team-abc-123',\n  teamName: 'ACME Corporation',  // Denormalized for convenience\n  \n  // Invitation details\n  email: 'newuser@acme.com',\n  role: 'member',\n  message: 'Welcome to our team!',\n  \n  // Status tracking\n  status: 'pending' | 'accepted' | 'expired' | 'revoked',\n  token: 'secure-random-token',  // For secure invitation links\n  \n  // Metadata\n  createdAt: Timestamp,\n  expiresAt: Timestamp,  // Auto-expire invitations\n  invitedBy: 'user-xyz-789',\n  acceptedAt: Timestamp,\n  acceptedBy: 'user-new-123'\n}\n```\n\n#### 5. User Team Memberships (Collection Group): Query via Collection Group\n**Purpose**: Enable efficient queries for \"all teams a user belongs to\"\n\nThis uses the `/teams/{teamId}/memberships/{userId}` subcollection with Collection Group queries:\n\n```javascript\n// Query all memberships for a user across all teams\nconst userMemberships = await db\n  .collectionGroup('memberships')\n  .where(documentId(), '==', userId)\n  .get()\n```\n\n### Team Data Organization\n\n#### 6. Shared Data Subcollections: `/teams/{teamId}/shared/{collection}/{documentId}`\n**Purpose**: Data needed by multiple apps (clients, matters, contacts, etc.)\n\n```javascript\n// Example: /teams/{teamId}/shared/clients/{clientId}\n{\n  name: 'ABC Corporation',\n  type: 'corporate' | 'individual',\n  \n  // Contact information\n  primaryContact: {\n    name: 'John Smith',\n    email: 'john@abccorp.com',\n    phone: '+1-555-0123',\n    title: 'General Counsel'\n  },\n  \n  // Address information\n  address: {\n    street: '123 Business Ave',\n    city: 'New York',\n    state: 'NY',\n    zip: '10001',\n    country: 'USA'\n  },\n  \n  // Client-specific data\n  industry: 'Technology',\n  retainerAmount: 10000,\n  billingRate: 350,\n  status: 'active' | 'inactive' | 'prospect',\n  \n  // Which apps can access this client\n  appAccess: {\n    intranet: true,    // Client management, contacts\n    bookkeeper: true,  // Invoicing, time tracking\n    files: true        // Document storage\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/shared/matters/{matterId}\n{\n  title: 'ABC Corp - Contract Review',\n  description: 'Review and negotiation of software licensing agreement',\n  \n  // Client association\n  clientId: 'client-abc-123',\n  clientName: 'ABC Corporation',  // Denormalized\n  \n  // Matter details\n  matterNumber: '2024-001',\n  practiceArea: 'Corporate Law',\n  status: 'active' | 'closed' | 'on-hold',\n  priority: 'high' | 'medium' | 'low',\n  \n  // Financial information\n  budget: 25000,\n  billingRate: 350,\n  \n  // Assigned team\n  leadAttorney: 'user-xyz-789',\n  assignedLawyers: ['user-abc-456', 'user-def-789'],\n  \n  // App access control\n  appAccess: {\n    intranet: true,    // Matter management, tasks\n    bookkeeper: true,  // Time tracking, billing\n    files: true        // Document management\n  },\n  \n  // Important dates\n  openedDate: Timestamp,\n  dueDate: Timestamp,\n  closedDate: Timestamp,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```\n\n#### 7. App-Specific Data Subcollections: `/teams/{teamId}/apps/{appName}/{collection}/{documentId}`\n**Purpose**: Data that belongs to a specific app only\n\n```javascript\n// Example: /teams/{teamId}/apps/intranet/projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Optional association with shared data\n  relatedClientId: 'client-abc-123',  // Links to shared client data\n  relatedMatterId: 'matter-def-456',  // Links to shared matter data\n  \n  // App-specific project data\n  status: 'in-progress',\n  priority: 'high',\n  methodology: 'agile',\n  \n  // Project team (different from matter team)\n  projectManager: 'user-xyz-789',\n  developers: ['user-abc-456', 'user-def-789'],\n  \n  // Milestones\n  milestones: [\n    {\n      name: 'Design Phase',\n      dueDate: Timestamp,\n      status: 'completed'\n    },\n    {\n      name: 'Development Phase',\n      dueDate: Timestamp,\n      status: 'in-progress'\n    }\n  ],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/apps/bookkeeper/invoices/{invoiceId}\n{\n  invoiceNumber: 'INV-2024-001',\n  \n  // Links to shared data\n  clientId: 'client-abc-123',\n  matterId: 'matter-def-456',  // Optional: for matter-based billing\n  \n  // Invoice details\n  description: 'Legal services for January 2024',\n  status: 'draft' | 'sent' | 'paid' | 'overdue',\n  \n  // Line items\n  lineItems: [\n    {\n      description: 'Contract review',\n      hours: 10.5,\n      rate: 350,\n      amount: 3675\n    },\n    {\n      description: 'Client consultation',\n      hours: 2.0,\n      rate: 350,\n      amount: 700\n    }\n  ],\n  \n  // Totals\n  subtotal: 4375,\n  tax: 350,\n  total: 4725,\n  \n  // Payment tracking\n  dueDate: Timestamp,\n  paidDate: Timestamp,\n  paidAmount: 4725,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```\n\n## Security Rules Strategy\n\n### Custom Claims (Enhanced for Multi-App SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Enhanced custom claims with app-specific permissions\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  apps: {\n    intranet: {\n      enabled: true,\n      permissions: ['manage_projects', 'view_reports']\n    },\n    bookkeeper: {\n      enabled: true,\n      permissions: ['create_invoices', 'approve_expenses']\n    },\n    files: {\n      enabled: false,  // User doesn't have access to files app\n      permissions: []\n    }\n  }\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n  \n  // Shared data subcollections (accessible by multiple apps)\n  match /shared/{collection}/{documentId} {\n    allow read: if isTeamMember(teamId) && hasSharedDataAccess(collection);\n    allow write: if isTeamMember(teamId) && hasSharedDataWriteAccess(collection);\n  }\n  \n  // App-specific data subcollections\n  match /apps/{appName}/{collection}/{documentId} {\n    allow read: if isTeamMember(teamId) && hasAppAccess(appName);\n    allow write: if isTeamMember(teamId) && hasAppAccess(appName) && \n                    hasAppPermission(appName, 'write_' + collection);\n  }\n}\n\n// Legacy app-specific collections (if you still have top-level collections)\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId) && \n                        hasAppAccess('intranet');\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n\nfunction hasAppAccess(appName) {\n  return request.auth != null && \n         request.auth.token.apps != null &&\n         request.auth.token.apps[appName] != null &&\n         request.auth.token.apps[appName].enabled == true;\n}\n\nfunction hasAppPermission(appName, permission) {\n  return hasAppAccess(appName) &&\n         permission in request.auth.token.apps[appName].permissions;\n}\n\nfunction hasSharedDataAccess(collection) {\n  // Allow access to shared data if user has access to any app that uses it\n  return hasAppAccess('intranet') || \n         hasAppAccess('bookkeeper') || \n         hasAppAccess('files');\n}\n\nfunction hasSharedDataWriteAccess(collection) {\n  // More restrictive write access - require specific permissions\n  return (collection == 'clients' && \n          (hasAppPermission('intranet', 'manage_clients') ||\n           hasAppPermission('bookkeeper', 'manage_clients'))) ||\n         (collection == 'matters' && \n          hasAppPermission('intranet', 'manage_matters'));\n}\n```\n\n## Query Patterns\n\n### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get team projects**:\n```javascript\nconst projects = await db\n  .collection('projects')\n  .where('teamId', '==', currentTeamId)\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n4. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n## Performance Considerations\n\n### Denormalization Strategy\n- **Team name** cached in memberships for UI display\n- **User display name** cached in memberships to avoid Auth lookups\n- **Member count** cached in team document for dashboards\n\n### Index Requirements\n```javascript\n// Firestore indexes needed\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'projects', // Replace with your app collections\n  fields: [\n    { fieldPath: 'teamId', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```\n\n### Scalability Limits\n- **Team document**: No size limits (members moved to subcollection)\n- **Memberships subcollection**: Supports unlimited team members\n- **Custom claims**: Efficient authorization without database reads\n- **Collection group queries**: Scale to millions of memberships\n\n## Migration Strategy\n\n### Phase 1: Add New Collections (Non-Breaking)\n1. Create `invitations` collection\n2. Migrate existing members to `memberships` subcollections\n3. Update security rules to support both old and new structure\n4. Add Collection Group indexes\n\n### Phase 2: Update Application Code\n1. Update `TeamService` to use new membership structure\n2. Implement invitation system\n3. Add Collection Group queries for user teams\n4. Update UI components\n\n### Phase 3: Clean Up (Breaking)\n1. Remove `members` field from team documents\n2. Update security rules to use new structure only\n3. Remove old query patterns\n\n## Benefits of This Structure\n\n### \u0005 Scalability\n- No document size limits for large teams\n- Efficient queries for user memberships\n- Supports millions of users and teams\n\n### \u0005 Security\n- Granular permission system\n- Custom claims for fast authorization\n- Audit trail for compliance\n\n### \u0005 Performance  \n- Denormalized data for fast UI updates\n- Collection Group queries for cross-team data\n- Minimal database reads for authorization\n\n### \u0005 Maintainability\n- Clear separation of concerns\n- Consistent patterns across collections\n- Easy to add new team-scoped features\n\n### \u0005 Multi-App SSO Ready\n- Custom claims work across all apps\n- Consistent team context everywhere\n- Single source of truth for permissions\n\nThis structure follows Firebase best practices while supporting your Multi-App SSO requirements and providing a solid foundation for scaling to thousands of teams and users.","structuredPatch":[{"oldStart":494,"oldLines":17,"newStart":494,"newLines":48,"lines":["   .get()"," ```"," ","-3. **Get team projects**:","+3. **Get shared clients for team**:"," ```javascript","-const projects = await db","-  .collection('projects')","-  .where('teamId', '==', currentTeamId)","+const clients = await db","+  .collection('teams')","+  .doc(teamId)","+  .collection('shared')","+  .doc('clients')","+  .collection('clients')","+  .where('status', '==', 'active')","+  .orderBy('name')","+  .get()","+```","+","+4. **Get matters for a specific client**:","+```javascript","+const matters = await db","+  .collection('teams')","+  .doc(teamId)","+  .collection('shared')","+  .doc('matters')","+  .collection('matters')","+  .where('clientId', '==', clientId)","+  .where('status', '==', 'active')","   .orderBy('updatedAt', 'desc')","   .get()"," ```"," ","-4. **Get pending invitations for email**:","+5. **Get app-specific data (e.g., invoices)**:"," ```javascript","+const invoices = await db","+  .collection('teams')","+  .doc(teamId)","+  .collection('apps')","+  .doc('bookkeeper')","+  .collection('invoices')","+  .where('clientId', '==', clientId)","+  .orderBy('createdAt', 'desc')","+  .get()","+```","+","+6. **Get pending invitations for email**:","+```javascript"," const invitations = await db","   .collection('invitations')","   .where('email', '==', userEmail)"]},{"oldStart":512,"oldLines":6,"newStart":543,"newLines":19,"lines":["   .get()"," ```"," ","+7. **Cross-app data queries (using shared data)**:","+```javascript","+// Get all client data that can be used across apps","+const sharedClients = await db","+  .collection('teams')","+  .doc(teamId)","+  .collection('shared')","+  .doc('clients')","+  .collection('clients')","+  .where('appAccess.intranet', '==', true)  // Only clients accessible to intranet","+  .get()","+```","+"," ## Performance Considerations"," "," ### Denormalization Strategy"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"e581be46-ff12-4b4d-a96b-08aa312c3ab4","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01PwqAsPWU9ppdqL3Shs9G36","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01KSBehMVaHcLvEK5M8vANPh","name":"Edit","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","old_string":"### Index Requirements\n```javascript\n// Firestore indexes needed\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'projects', // Replace with your app collections\n  fields: [\n    { fieldPath: 'teamId', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```","new_string":"### Index Requirements\n```javascript\n// Firestore indexes needed for multi-app structure\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collectionGroup: 'clients',  // Shared clients across teams\n  fields: [\n    { fieldPath: 'status', order: 'ASCENDING' },\n    { fieldPath: 'name', order: 'ASCENDING' }\n  ]\n},\n{\n  collectionGroup: 'matters',  // Shared matters across teams\n  fields: [\n    { fieldPath: 'clientId', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n},\n{\n  collectionGroup: 'invoices',  // App-specific invoices\n  fields: [\n    { fieldPath: 'clientId', order: 'ASCENDING' },\n    { fieldPath: 'createdAt', order: 'DESCENDING' }\n  ]\n},\n{\n  collectionGroup: 'projects',  // App-specific projects\n  fields: [\n    { fieldPath: 'relatedClientId', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":1919,"cache_read_input_tokens":48661,"cache_creation":{"ephemeral_5m_input_tokens":1919,"ephemeral_1h_input_tokens":0},"output_tokens":717,"service_tier":"standard"}},"requestId":"req_011CSKBiGyZrZe4AX9S8fMMa","type":"assistant","uuid":"1a298e46-07ed-474c-bca3-3ad455c3a3cf","timestamp":"2025-08-20T15:18:43.263Z"}
{"parentUuid":"1a298e46-07ed-474c-bca3-3ad455c3a3cf","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01KSBehMVaHcLvEK5M8vANPh","type":"tool_result","content":"The file C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   562→- **Team name** cached in memberships for UI display\n   563→- **User display name** cached in memberships to avoid Auth lookups\n   564→- **Member count** cached in team document for dashboards\n   565→\n   566→### Index Requirements\n   567→```javascript\n   568→// Firestore indexes needed for multi-app structure\n   569→{\n   570→  collectionGroup: 'memberships',\n   571→  fields: [\n   572→    { fieldPath: '__name__', order: 'ASCENDING' }\n   573→  ]\n   574→},\n   575→{\n   576→  collection: 'invitations',\n   577→  fields: [\n   578→    { fieldPath: 'email', order: 'ASCENDING' },\n   579→    { fieldPath: 'status', order: 'ASCENDING' }\n   580→  ]\n   581→},\n   582→{\n   583→  collectionGroup: 'clients',  // Shared clients across teams\n   584→  fields: [\n   585→    { fieldPath: 'status', order: 'ASCENDING' },\n   586→    { fieldPath: 'name', order: 'ASCENDING' }\n   587→  ]\n   588→},\n   589→{\n   590→  collectionGroup: 'matters',  // Shared matters across teams\n   591→  fields: [\n   592→    { fieldPath: 'clientId', order: 'ASCENDING' },\n   593→    { fieldPath: 'status', order: 'ASCENDING' },\n   594→    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n   595→  ]\n   596→},\n   597→{\n   598→  collectionGroup: 'invoices',  // App-specific invoices\n   599→  fields: [\n   600→    { fieldPath: 'clientId', order: 'ASCENDING' },\n   601→    { fieldPath: 'createdAt', order: 'DESCENDING' }\n   602→  ]\n   603→},\n   604→{\n   605→  collectionGroup: 'projects',  // App-specific projects\n   606→  fields: [\n   607→    { fieldPath: 'relatedClientId', order: 'ASCENDING' },\n   608→    { fieldPath: 'status', order: 'ASCENDING' },\n   609→    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n   610→  ]\n   611→}\n   612→```\n   613→\n   614→### Scalability Limits\n   615→- **Team document**: No size limits (members moved to subcollection)\n   616→- **Memberships subcollection**: Supports unlimited team members"}]},"uuid":"de5afe81-5cf3-4d88-b3ad-6c03822c87ea","timestamp":"2025-08-20T15:18:43.326Z","toolUseResult":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","oldString":"### Index Requirements\n```javascript\n// Firestore indexes needed\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'projects', // Replace with your app collections\n  fields: [\n    { fieldPath: 'teamId', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```","newString":"### Index Requirements\n```javascript\n// Firestore indexes needed for multi-app structure\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collectionGroup: 'clients',  // Shared clients across teams\n  fields: [\n    { fieldPath: 'status', order: 'ASCENDING' },\n    { fieldPath: 'name', order: 'ASCENDING' }\n  ]\n},\n{\n  collectionGroup: 'matters',  // Shared matters across teams\n  fields: [\n    { fieldPath: 'clientId', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n},\n{\n  collectionGroup: 'invoices',  // App-specific invoices\n  fields: [\n    { fieldPath: 'clientId', order: 'ASCENDING' },\n    { fieldPath: 'createdAt', order: 'DESCENDING' }\n  ]\n},\n{\n  collectionGroup: 'projects',  // App-specific projects\n  fields: [\n    { fieldPath: 'relatedClientId', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```","originalFile":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Current Implementation Analysis\n\n### \u0005 What's Already Working\n- Basic team-based multi-tenancy with `teams` and `users` collections\n- Security rules with custom claims for efficient authorization\n- Team membership embedded in team documents\n- Multi-App SSO authentication flow\n\n### =\u0004 Areas for Optimization\n- Large teams may hit Firestore document size limits (1MB) with embedded members\n- Querying user memberships requires scanning all teams (inefficient at scale)\n- No invitation system for adding members\n- Missing audit trails for membership changes\n\n## Optimal Data Structure\n\n### Core Collections\n\n#### 1. Users Collection: `/users/{userId}`\n**Purpose**: Store application-specific user data (NOT identity data - that stays in Firebase Auth)\n\n```javascript\n{\n  // Application-specific data only\n  role: 'user' | 'admin',\n  department: 'Engineering',\n  defaultTeamId: 'team-abc-123',  // User's primary team\n  preferences: {\n    theme: 'light',\n    notifications: true,\n    language: 'en'\n  },\n  \n  // Activity tracking\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  lastLogin: Timestamp,\n  \n  // Note: email, displayName, photoURL come from Firebase Auth\n  // teamId is set via custom claims, not stored here\n}\n```\n\n#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information and app access control\n\n```javascript\n{\n  name: 'ACME Law Firm',\n  description: 'Full-service law firm serving corporate clients',\n  domain: 'acmelaw.com',  // Optional: for email domain-based auto-join\n  \n  // Multi-App Access Control\n  apps: {\n    intranet: {\n      enabled: true,\n      plan: 'premium',\n      features: ['documents', 'calendar', 'messaging']\n    },\n    bookkeeper: {\n      enabled: true,\n      plan: 'basic',\n      features: ['invoicing', 'expenses']\n    },\n    files: {\n      enabled: false,  // This team doesn't have access to files app\n      plan: null,\n      features: []\n    }\n  },\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    timezone: 'America/New_York',\n    businessHours: {\n      start: '09:00',\n      end: '17:00',\n      days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n    }\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```\n\n#### 3. Team Memberships Subcollection: `/teams/{teamId}/memberships/{userId}`\n**Purpose**: Manage team memberships with detailed information and audit trail\n\n```javascript\n{\n  // User information (denormalized for performance)\n  email: 'john@acme.com',\n  displayName: 'John Doe',  // Cached from Firebase Auth\n  \n  // Membership details\n  role: 'member' | 'admin' | 'owner',\n  status: 'active' | 'invited' | 'suspended',\n  \n  // App-specific permissions (role-based)\n  permissions: {\n    // Global team permissions\n    canManageMembers: false,\n    canManageSettings: false,\n    \n    // App-specific permissions\n    apps: {\n      intranet: {\n        canCreateProjects: true,\n        canDeleteProjects: false,\n        canManageDocuments: true\n      },\n      bookkeeper: {\n        canCreateInvoices: true,\n        canApproveExpenses: false,\n        canViewReports: true\n      }\n    }\n  },\n  \n  // Activity tracking\n  joinedAt: Timestamp,\n  invitedAt: Timestamp,\n  invitedBy: 'user-abc-456',\n  lastActivity: Timestamp,\n  \n  // Audit trail\n  history: [\n    {\n      action: 'role_changed',\n      from: 'member',\n      to: 'admin',\n      by: 'user-abc-456',\n      at: Timestamp\n    }\n  ]\n}\n```\n\n#### 4. Team Invitations Collection: `/invitations/{invitationId}`\n**Purpose**: Manage pending team invitations\n\n```javascript\n{\n  teamId: 'team-abc-123',\n  teamName: 'ACME Corporation',  // Denormalized for convenience\n  \n  // Invitation details\n  email: 'newuser@acme.com',\n  role: 'member',\n  message: 'Welcome to our team!',\n  \n  // Status tracking\n  status: 'pending' | 'accepted' | 'expired' | 'revoked',\n  token: 'secure-random-token',  // For secure invitation links\n  \n  // Metadata\n  createdAt: Timestamp,\n  expiresAt: Timestamp,  // Auto-expire invitations\n  invitedBy: 'user-xyz-789',\n  acceptedAt: Timestamp,\n  acceptedBy: 'user-new-123'\n}\n```\n\n#### 5. User Team Memberships (Collection Group): Query via Collection Group\n**Purpose**: Enable efficient queries for \"all teams a user belongs to\"\n\nThis uses the `/teams/{teamId}/memberships/{userId}` subcollection with Collection Group queries:\n\n```javascript\n// Query all memberships for a user across all teams\nconst userMemberships = await db\n  .collectionGroup('memberships')\n  .where(documentId(), '==', userId)\n  .get()\n```\n\n### Team Data Organization\n\n#### 6. Shared Data Subcollections: `/teams/{teamId}/shared/{collection}/{documentId}`\n**Purpose**: Data needed by multiple apps (clients, matters, contacts, etc.)\n\n```javascript\n// Example: /teams/{teamId}/shared/clients/{clientId}\n{\n  name: 'ABC Corporation',\n  type: 'corporate' | 'individual',\n  \n  // Contact information\n  primaryContact: {\n    name: 'John Smith',\n    email: 'john@abccorp.com',\n    phone: '+1-555-0123',\n    title: 'General Counsel'\n  },\n  \n  // Address information\n  address: {\n    street: '123 Business Ave',\n    city: 'New York',\n    state: 'NY',\n    zip: '10001',\n    country: 'USA'\n  },\n  \n  // Client-specific data\n  industry: 'Technology',\n  retainerAmount: 10000,\n  billingRate: 350,\n  status: 'active' | 'inactive' | 'prospect',\n  \n  // Which apps can access this client\n  appAccess: {\n    intranet: true,    // Client management, contacts\n    bookkeeper: true,  // Invoicing, time tracking\n    files: true        // Document storage\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/shared/matters/{matterId}\n{\n  title: 'ABC Corp - Contract Review',\n  description: 'Review and negotiation of software licensing agreement',\n  \n  // Client association\n  clientId: 'client-abc-123',\n  clientName: 'ABC Corporation',  // Denormalized\n  \n  // Matter details\n  matterNumber: '2024-001',\n  practiceArea: 'Corporate Law',\n  status: 'active' | 'closed' | 'on-hold',\n  priority: 'high' | 'medium' | 'low',\n  \n  // Financial information\n  budget: 25000,\n  billingRate: 350,\n  \n  // Assigned team\n  leadAttorney: 'user-xyz-789',\n  assignedLawyers: ['user-abc-456', 'user-def-789'],\n  \n  // App access control\n  appAccess: {\n    intranet: true,    // Matter management, tasks\n    bookkeeper: true,  // Time tracking, billing\n    files: true        // Document management\n  },\n  \n  // Important dates\n  openedDate: Timestamp,\n  dueDate: Timestamp,\n  closedDate: Timestamp,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```\n\n#### 7. App-Specific Data Subcollections: `/teams/{teamId}/apps/{appName}/{collection}/{documentId}`\n**Purpose**: Data that belongs to a specific app only\n\n```javascript\n// Example: /teams/{teamId}/apps/intranet/projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Optional association with shared data\n  relatedClientId: 'client-abc-123',  // Links to shared client data\n  relatedMatterId: 'matter-def-456',  // Links to shared matter data\n  \n  // App-specific project data\n  status: 'in-progress',\n  priority: 'high',\n  methodology: 'agile',\n  \n  // Project team (different from matter team)\n  projectManager: 'user-xyz-789',\n  developers: ['user-abc-456', 'user-def-789'],\n  \n  // Milestones\n  milestones: [\n    {\n      name: 'Design Phase',\n      dueDate: Timestamp,\n      status: 'completed'\n    },\n    {\n      name: 'Development Phase',\n      dueDate: Timestamp,\n      status: 'in-progress'\n    }\n  ],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/apps/bookkeeper/invoices/{invoiceId}\n{\n  invoiceNumber: 'INV-2024-001',\n  \n  // Links to shared data\n  clientId: 'client-abc-123',\n  matterId: 'matter-def-456',  // Optional: for matter-based billing\n  \n  // Invoice details\n  description: 'Legal services for January 2024',\n  status: 'draft' | 'sent' | 'paid' | 'overdue',\n  \n  // Line items\n  lineItems: [\n    {\n      description: 'Contract review',\n      hours: 10.5,\n      rate: 350,\n      amount: 3675\n    },\n    {\n      description: 'Client consultation',\n      hours: 2.0,\n      rate: 350,\n      amount: 700\n    }\n  ],\n  \n  // Totals\n  subtotal: 4375,\n  tax: 350,\n  total: 4725,\n  \n  // Payment tracking\n  dueDate: Timestamp,\n  paidDate: Timestamp,\n  paidAmount: 4725,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```\n\n## Security Rules Strategy\n\n### Custom Claims (Enhanced for Multi-App SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Enhanced custom claims with app-specific permissions\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  apps: {\n    intranet: {\n      enabled: true,\n      permissions: ['manage_projects', 'view_reports']\n    },\n    bookkeeper: {\n      enabled: true,\n      permissions: ['create_invoices', 'approve_expenses']\n    },\n    files: {\n      enabled: false,  // User doesn't have access to files app\n      permissions: []\n    }\n  }\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n  \n  // Shared data subcollections (accessible by multiple apps)\n  match /shared/{collection}/{documentId} {\n    allow read: if isTeamMember(teamId) && hasSharedDataAccess(collection);\n    allow write: if isTeamMember(teamId) && hasSharedDataWriteAccess(collection);\n  }\n  \n  // App-specific data subcollections\n  match /apps/{appName}/{collection}/{documentId} {\n    allow read: if isTeamMember(teamId) && hasAppAccess(appName);\n    allow write: if isTeamMember(teamId) && hasAppAccess(appName) && \n                    hasAppPermission(appName, 'write_' + collection);\n  }\n}\n\n// Legacy app-specific collections (if you still have top-level collections)\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId) && \n                        hasAppAccess('intranet');\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n\nfunction hasAppAccess(appName) {\n  return request.auth != null && \n         request.auth.token.apps != null &&\n         request.auth.token.apps[appName] != null &&\n         request.auth.token.apps[appName].enabled == true;\n}\n\nfunction hasAppPermission(appName, permission) {\n  return hasAppAccess(appName) &&\n         permission in request.auth.token.apps[appName].permissions;\n}\n\nfunction hasSharedDataAccess(collection) {\n  // Allow access to shared data if user has access to any app that uses it\n  return hasAppAccess('intranet') || \n         hasAppAccess('bookkeeper') || \n         hasAppAccess('files');\n}\n\nfunction hasSharedDataWriteAccess(collection) {\n  // More restrictive write access - require specific permissions\n  return (collection == 'clients' && \n          (hasAppPermission('intranet', 'manage_clients') ||\n           hasAppPermission('bookkeeper', 'manage_clients'))) ||\n         (collection == 'matters' && \n          hasAppPermission('intranet', 'manage_matters'));\n}\n```\n\n## Query Patterns\n\n### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get shared clients for team**:\n```javascript\nconst clients = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('clients')\n  .collection('clients')\n  .where('status', '==', 'active')\n  .orderBy('name')\n  .get()\n```\n\n4. **Get matters for a specific client**:\n```javascript\nconst matters = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('matters')\n  .collection('matters')\n  .where('clientId', '==', clientId)\n  .where('status', '==', 'active')\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n5. **Get app-specific data (e.g., invoices)**:\n```javascript\nconst invoices = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('apps')\n  .doc('bookkeeper')\n  .collection('invoices')\n  .where('clientId', '==', clientId)\n  .orderBy('createdAt', 'desc')\n  .get()\n```\n\n6. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n7. **Cross-app data queries (using shared data)**:\n```javascript\n// Get all client data that can be used across apps\nconst sharedClients = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('clients')\n  .collection('clients')\n  .where('appAccess.intranet', '==', true)  // Only clients accessible to intranet\n  .get()\n```\n\n## Performance Considerations\n\n### Denormalization Strategy\n- **Team name** cached in memberships for UI display\n- **User display name** cached in memberships to avoid Auth lookups\n- **Member count** cached in team document for dashboards\n\n### Index Requirements\n```javascript\n// Firestore indexes needed\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'projects', // Replace with your app collections\n  fields: [\n    { fieldPath: 'teamId', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```\n\n### Scalability Limits\n- **Team document**: No size limits (members moved to subcollection)\n- **Memberships subcollection**: Supports unlimited team members\n- **Custom claims**: Efficient authorization without database reads\n- **Collection group queries**: Scale to millions of memberships\n\n## Migration Strategy\n\n### Phase 1: Add New Collections (Non-Breaking)\n1. Create `invitations` collection\n2. Migrate existing members to `memberships` subcollections\n3. Update security rules to support both old and new structure\n4. Add Collection Group indexes\n\n### Phase 2: Update Application Code\n1. Update `TeamService` to use new membership structure\n2. Implement invitation system\n3. Add Collection Group queries for user teams\n4. Update UI components\n\n### Phase 3: Clean Up (Breaking)\n1. Remove `members` field from team documents\n2. Update security rules to use new structure only\n3. Remove old query patterns\n\n## Benefits of This Structure\n\n### \u0005 Scalability\n- No document size limits for large teams\n- Efficient queries for user memberships\n- Supports millions of users and teams\n\n### \u0005 Security\n- Granular permission system\n- Custom claims for fast authorization\n- Audit trail for compliance\n\n### \u0005 Performance  \n- Denormalized data for fast UI updates\n- Collection Group queries for cross-team data\n- Minimal database reads for authorization\n\n### \u0005 Maintainability\n- Clear separation of concerns\n- Consistent patterns across collections\n- Easy to add new team-scoped features\n\n### \u0005 Multi-App SSO Ready\n- Custom claims work across all apps\n- Consistent team context everywhere\n- Single source of truth for permissions\n\nThis structure follows Firebase best practices while supporting your Multi-App SSO requirements and providing a solid foundation for scaling to thousands of teams and users.","structuredPatch":[{"oldStart":565,"oldLines":7,"newStart":565,"newLines":7,"lines":[" "," ### Index Requirements"," ```javascript","-// Firestore indexes needed","+// Firestore indexes needed for multi-app structure"," {","   collectionGroup: 'memberships',","   fields: ["]},{"oldStart":580,"oldLines":11,"newStart":580,"newLines":34,"lines":["   ]"," },"," {","-  collection: 'projects', // Replace with your app collections","+  collectionGroup: 'clients',  // Shared clients across teams","   fields: [","-    { fieldPath: 'teamId', order: 'ASCENDING' },","+    { fieldPath: 'status', order: 'ASCENDING' },","+    { fieldPath: 'name', order: 'ASCENDING' }","+  ]","+},","+{","+  collectionGroup: 'matters',  // Shared matters across teams","+  fields: [","+    { fieldPath: 'clientId', order: 'ASCENDING' },","+    { fieldPath: 'status', order: 'ASCENDING' },","     { fieldPath: 'updatedAt', order: 'DESCENDING' }","   ]","+},","+{","+  collectionGroup: 'invoices',  // App-specific invoices","+  fields: [","+    { fieldPath: 'clientId', order: 'ASCENDING' },","+    { fieldPath: 'createdAt', order: 'DESCENDING' }","+  ]","+},","+{","+  collectionGroup: 'projects',  // App-specific projects","+  fields: [","+    { fieldPath: 'relatedClientId', order: 'ASCENDING' },","+    { fieldPath: 'status', order: 'ASCENDING' },","+    { fieldPath: 'updatedAt', order: 'DESCENDING' }","+  ]"," }"," ```"," "]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"de5afe81-5cf3-4d88-b3ad-6c03822c87ea","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01SjzJ6JTQ2mfh6prD1KQ78E","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01UVeMqXLnmTX2eFAUKXjt2Z","name":"TodoWrite","input":{"todos":[{"id":"1","content":"Update data structure for app-specific access control","status":"completed"},{"id":"2","content":"Design shared data subcollections for cross-app data","status":"completed"},{"id":"3","content":"Add team app permissions and feature flags","status":"completed"},{"id":"4","content":"Update security rules for app-specific access","status":"completed"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":1453,"cache_read_input_tokens":50580,"cache_creation":{"ephemeral_5m_input_tokens":1453,"ephemeral_1h_input_tokens":0},"output_tokens":26,"service_tier":"standard"}},"requestId":"req_011CSKBivtMpRsDTsouLMe9w","type":"assistant","uuid":"b002523b-2731-494f-b93a-e7687b7c3fc4","timestamp":"2025-08-20T15:18:49.305Z"}
{"parentUuid":"b002523b-2731-494f-b93a-e7687b7c3fc4","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01UVeMqXLnmTX2eFAUKXjt2Z","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"b576c732-ff16-40f3-9b23-5b7398a4a05e","timestamp":"2025-08-20T15:18:49.465Z","toolUseResult":{"oldTodos":[{"content":"Update data structure for app-specific access control","status":"completed","id":"1"},{"content":"Design shared data subcollections for cross-app data","status":"completed","id":"2"},{"content":"Add team app permissions and feature flags","status":"completed","id":"3"},{"content":"Update security rules for app-specific access","status":"in_progress","id":"4"}],"newTodos":[{"content":"Update data structure for app-specific access control","status":"completed","id":"1"},{"content":"Design shared data subcollections for cross-app data","status":"completed","id":"2"},{"content":"Add team app permissions and feature flags","status":"completed","id":"3"},{"content":"Update security rules for app-specific access","status":"completed","id":"4"}]}}
{"parentUuid":"b576c732-ff16-40f3-9b23-5b7398a4a05e","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01WJAEHWhfcDW8vwuoAHxgGi","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Perfect! I've updated the data structure design to address your multi-app SSO considerations. Here's what I've enhanced:\n\n## Key Multi-App Improvements\n\n### 1. **App-Specific Access Control**\n- Teams now have an `apps` object defining which apps each team can access\n- Each app has its own `enabled` flag, `plan`, and `features` array\n- Custom claims include app-specific permissions for fast authorization\n\n### 2. **Shared Data Architecture**\n- **`/teams/{teamId}/shared/{collection}/{documentId}`** - For data needed by multiple apps (clients, matters, contacts)\n- **`/teams/{teamId}/apps/{appName}/{collection}/{documentId}`** - For app-specific data\n- Each shared document has `appAccess` controls defining which apps can use it\n\n### 3. **Perfect for Law Firms**\nThe structure I designed specifically addresses your law firm use case:\n- **Shared clients** - Available across intranet, bookkeeper, and files apps\n- **Shared matters** - Link clients to legal work, used by multiple apps  \n- **App-specific data** - Invoices in bookkeeper, projects in intranet\n- **No data duplication** - Client/matter data stored once, referenced everywhere\n\n### 4. **Enhanced Security Rules**\n- App access validation via custom claims\n- Granular permissions for shared vs. app-specific data\n- Efficient authorization without database reads\n\nThis structure eliminates data duplication while maintaining strong app boundaries and security. Each law firm (team) can have different app access, and shared data like clients/matters is available where needed without redundancy."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":1,"cache_creation_input_tokens":335,"cache_read_input_tokens":52033,"cache_creation":{"ephemeral_5m_input_tokens":335,"ephemeral_1h_input_tokens":0},"output_tokens":373,"service_tier":"standard"}},"requestId":"req_011CSKBjPLac62C4Sbuycug8","type":"assistant","uuid":"8237dec6-1d31-40ad-b9bb-1f236ced36fb","timestamp":"2025-08-20T15:18:59.769Z"}
{"parentUuid":"8237dec6-1d31-40ad-b9bb-1f236ced36fb","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":"Can you create a ascii tree diagram, illustrating an example of how these collections could be organized, using the example of the first two apps that I plan to create:  Bookkeeper and Intranet."},"uuid":"dd8483fa-00e0-4896-a525-fadbef2da289","timestamp":"2025-08-20T15:19:15.583Z"}
{"parentUuid":"dd8483fa-00e0-4896-a525-fadbef2da289","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01AV9CuWbKkNg5guC5tf3RRq","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_014K1gi296uuZ6GX4NHFck82","name":"Edit","input":{"file_path":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","old_string":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.","new_string":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Collection Structure Diagram\n\nHere's an ASCII tree diagram showing how the collections are organized for a law firm team using Bookkeeper and Intranet apps:\n\n```\nFirestore Database\n│\n├── users/\n│   ├── user-john-123/\n│   │   ├── role: 'admin'\n│   │   ├── department: 'Legal'\n│   │   ├── defaultTeamId: 'team-acme-law'\n│   │   ├── preferences: {...}\n│   │   ├── createdAt: Timestamp\n│   │   └── lastLogin: Timestamp\n│   │\n│   └── user-jane-456/\n│       ├── role: 'user'\n│       ├── department: 'Accounting'\n│       └── defaultTeamId: 'team-acme-law'\n│\n├── teams/\n│   └── team-acme-law/\n│       ├── name: 'ACME Law Firm'\n│       ├── description: 'Full-service law firm'\n│       ├── domain: 'acmelaw.com'\n│       ├── apps: {\n│       │   intranet: { enabled: true, plan: 'premium' },\n│       │   bookkeeper: { enabled: true, plan: 'basic' }\n│       │ }\n│       ├── settings: {...}\n│       ├── memberCount: 15\n│       │\n│       ├── memberships/                    [SUBCOLLECTION]\n│       │   ├── user-john-123/\n│       │   │   ├── email: 'john@acmelaw.com'\n│       │   │   ├── displayName: 'John Smith'\n│       │   │   ├── role: 'admin'\n│       │   │   ├── status: 'active'\n│       │   │   ├── permissions: {\n│       │   │   │   apps: {\n│       │   │   │     intranet: { canCreateProjects: true, canManageDocuments: true },\n│       │   │   │     bookkeeper: { canCreateInvoices: true, canApproveExpenses: true }\n│       │   │   │   }\n│       │   │   │ }\n│       │   │   └── joinedAt: Timestamp\n│       │   │\n│       │   └── user-jane-456/\n│       │       ├── email: 'jane@acmelaw.com'\n│       │       ├── displayName: 'Jane Doe'\n│       │       ├── role: 'member'\n│       │       ├── status: 'active'\n│       │       └── permissions: {\n│       │           apps: {\n│       │             bookkeeper: { canCreateInvoices: true, canViewReports: true }\n│       │           }\n│       │         }\n│       │\n│       ├── shared/                         [SUBCOLLECTION - Cross-app data]\n│       │   ├── clients/                    [SUBCOLLECTION]\n│       │   │   ├── client-abc-corp/\n│       │   │   │   ├── name: 'ABC Corporation'\n│       │   │   │   ├── type: 'corporate'\n│       │   │   │   ├── primaryContact: { name: 'John Smith', email: '...' }\n│       │   │   │   ├── address: { street: '123 Business Ave', ... }\n│       │   │   │   ├── industry: 'Technology'\n│       │   │   │   ├── retainerAmount: 10000\n│       │   │   │   ├── billingRate: 350\n│       │   │   │   ├── status: 'active'\n│       │   │   │   ├── appAccess: {\n│       │   │   │   │   intranet: true,    // Client management\n│       │   │   │   │   bookkeeper: true   // Invoicing & time tracking\n│       │   │   │   │ }\n│       │   │   │   └── createdAt: Timestamp\n│       │   │   │\n│       │   │   └── client-xyz-llc/\n│       │   │       ├── name: 'XYZ LLC'\n│       │   │       ├── type: 'corporate'\n│       │   │       ├── status: 'active'\n│       │   │       └── appAccess: {\n│       │   │           intranet: true,\n│       │   │           bookkeeper: false  // No billing access\n│       │   │         }\n│       │   │\n│       │   ├── matters/                    [SUBCOLLECTION]\n│       │   │   ├── matter-contract-review/\n│       │   │   │   ├── title: 'ABC Corp - Contract Review'\n│       │   │   │   ├── description: 'Review of software licensing agreement'\n│       │   │   │   ├── clientId: 'client-abc-corp'\n│       │   │   │   ├── clientName: 'ABC Corporation'  // Denormalized\n│       │   │   │   ├── matterNumber: '2024-001'\n│       │   │   │   ├── practiceArea: 'Corporate Law'\n│       │   │   │   ├── status: 'active'\n│       │   │   │   ├── priority: 'high'\n│       │   │   │   ├── budget: 25000\n│       │   │   │   ├── billingRate: 350\n│       │   │   │   ├── leadAttorney: 'user-john-123'\n│       │   │   │   ├── assignedLawyers: ['user-john-123', 'user-jane-456']\n│       │   │   │   ├── appAccess: {\n│       │   │   │   │   intranet: true,    // Matter management, tasks\n│       │   │   │   │   bookkeeper: true   // Time tracking, billing\n│       │   │   │   │ }\n│       │   │   │   ├── openedDate: Timestamp\n│       │   │   │   └── dueDate: Timestamp\n│       │   │   │\n│       │   │   └── matter-trademark-filing/\n│       │   │       ├── title: 'XYZ LLC - Trademark Filing'\n│       │   │       ├── clientId: 'client-xyz-llc'\n│       │   │       ├── status: 'active'\n│       │   │       └── appAccess: {\n│       │   │           intranet: true,    // Case management only\n│       │   │           bookkeeper: false  // No billing for this matter\n│       │   │         }\n│       │   │\n│       │   └── contacts/                   [SUBCOLLECTION]\n│       │       ├── contact-john-smith/\n│       │       │   ├── name: 'John Smith'\n│       │       │   ├── email: 'john@abccorp.com'\n│       │       │   ├── phone: '+1-555-0123'\n│       │       │   ├── title: 'General Counsel'\n│       │       │   ├── clientId: 'client-abc-corp'\n│       │       │   └── appAccess: {\n│       │       │       intranet: true,    // Contact management\n│       │       │       bookkeeper: true   // Invoice recipient\n│       │       │     }\n│       │       │\n│       │       └── contact-sarah-johnson/\n│       │           ├── name: 'Sarah Johnson'\n│       │           ├── email: 'sarah@xyzllc.com'\n│       │           ├── clientId: 'client-xyz-llc'\n│       │           └── appAccess: {\n│       │               intranet: true,\n│       │               bookkeeper: false\n│       │             }\n│       │\n│       └── apps/                           [SUBCOLLECTION - App-specific data]\n│           ├── intranet/                   [SUBCOLLECTION]\n│           │   ├── projects/               [SUBCOLLECTION]\n│           │   │   ├── project-website-redesign/\n│           │   │   │   ├── name: 'Website Redesign'\n│           │   │   │   ├── description: 'Q1 2024 website overhaul'\n│           │   │   │   ├── relatedClientId: 'client-abc-corp'     // Links to shared\n│           │   │   │   ├── relatedMatterId: 'matter-contract-review' // Links to shared\n│           │   │   │   ├── status: 'in-progress'\n│           │   │   │   ├── priority: 'high'\n│           │   │   │   ├── projectManager: 'user-john-123'\n│           │   │   │   ├── milestones: [...]\n│           │   │   │   └── createdAt: Timestamp\n│           │   │   │\n│           │   │   └── project-legal-research/\n│           │   │       ├── name: 'Trademark Legal Research'\n│           │   │       ├── relatedClientId: 'client-xyz-llc'\n│           │   │       ├── relatedMatterId: 'matter-trademark-filing'\n│           │   │       └── status: 'active'\n│           │   │\n│           │   ├── documents/              [SUBCOLLECTION]\n│           │   │   ├── doc-contract-template/\n│           │   │   │   ├── title: 'Software License Template'\n│           │   │   │   ├── type: 'template'\n│           │   │   │   ├── relatedMatterId: 'matter-contract-review'\n│           │   │   │   ├── tags: ['contract', 'template', 'software']\n│           │   │   │   └── createdBy: 'user-john-123'\n│           │   │   │\n│           │   │   └── doc-case-notes/\n│           │   │       ├── title: 'Trademark Research Notes'\n│           │   │       ├── relatedMatterId: 'matter-trademark-filing'\n│           │   │       └── type: 'notes'\n│           │   │\n│           │   └── tasks/                  [SUBCOLLECTION]\n│           │       ├── task-contract-review/\n│           │       │   ├── title: 'Review Section 3.2'\n│           │       │   ├── description: 'Review liability clauses'\n│           │       │   ├── relatedMatterId: 'matter-contract-review'\n│           │       │   ├── assignedTo: 'user-john-123'\n│           │       │   ├── status: 'in-progress'\n│           │       │   ├── priority: 'high'\n│           │       │   └── dueDate: Timestamp\n│           │       │\n│           │       └── task-client-meeting/\n│           │           ├── title: 'Client Status Meeting'\n│           │           ├── relatedClientId: 'client-abc-corp'\n│           │           └── status: 'pending'\n│           │\n│           └── bookkeeper/                 [SUBCOLLECTION]\n│               ├── invoices/               [SUBCOLLECTION]\n│               │   ├── invoice-2024-001/\n│               │   │   ├── invoiceNumber: 'INV-2024-001'\n│               │   │   ├── clientId: 'client-abc-corp'           // Links to shared\n│               │   │   ├── matterId: 'matter-contract-review'    // Links to shared\n│               │   │   ├── description: 'Legal services - January 2024'\n│               │   │   ├── status: 'sent'\n│               │   │   ├── lineItems: [\n│               │   │   │   { description: 'Contract review', hours: 10.5, rate: 350 },\n│               │   │   │   { description: 'Client consultation', hours: 2.0, rate: 350 }\n│               │   │   │ ]\n│               │   │   ├── subtotal: 4375\n│               │   │   ├── tax: 350\n│               │   │   ├── total: 4725\n│               │   │   ├── dueDate: Timestamp\n│               │   │   └── createdAt: Timestamp\n│               │   │\n│               │   └── invoice-2024-002/\n│               │       ├── invoiceNumber: 'INV-2024-002'\n│               │       ├── clientId: 'client-xyz-llc'\n│               │       ├── matterId: 'matter-trademark-filing'\n│               │       └── status: 'draft'\n│               │\n│               ├── expenses/               [SUBCOLLECTION]\n│               │   ├── expense-filing-fees/\n│               │   │   ├── description: 'USPTO Trademark Filing Fees'\n│               │   │   ├── amount: 350\n│               │   │   ├── category: 'filing-fees'\n│               │   │   ├── relatedMatterId: 'matter-trademark-filing'\n│               │   │   ├── relatedClientId: 'client-xyz-llc'\n│               │   │   ├── billableToClient: true\n│               │   │   ├── status: 'approved'\n│               │   │   ├── receiptUrl: 'gs://bucket/receipt.pdf'\n│               │   │   └── expenseDate: Timestamp\n│               │   │\n│               │   └── expense-research-tools/\n│               │       ├── description: 'Legal Database Access'\n│               │       ├── amount: 150\n│               │       ├── category: 'research'\n│               │       ├── billableToClient: false\n│               │       └── status: 'pending'\n│               │\n│               └── time-entries/           [SUBCOLLECTION]\n│                   ├── time-entry-001/\n│                   │   ├── description: 'Contract clause analysis'\n│                   │   ├── hours: 2.5\n│                   │   ├── rate: 350\n│                   │   ├── matterId: 'matter-contract-review'      // Links to shared\n│                   │   ├── clientId: 'client-abc-corp'            // Links to shared\n│                   │   ├── userId: 'user-john-123'\n│                   │   ├── billable: true\n│                   │   ├── invoiceId: 'invoice-2024-001'\n│                   │   ├── status: 'invoiced'\n│                   │   └── workDate: Timestamp\n│                   │\n│                   └── time-entry-002/\n│                       ├── description: 'Trademark research'\n│                       ├── hours: 3.0\n│                       ├── matterId: 'matter-trademark-filing'\n│                       ├── billable: true\n│                       └── status: 'unbilled'\n│\n└── invitations/\n    ├── invite-001/\n    │   ├── teamId: 'team-acme-law'\n    │   ├── teamName: 'ACME Law Firm'\n    │   ├── email: 'newlawyer@acmelaw.com'\n    │   ├── role: 'member'\n    │   ├── status: 'pending'\n    │   ├── token: 'secure-random-token'\n    │   ├── createdAt: Timestamp\n    │   └── expiresAt: Timestamp\n    │\n    └── invite-002/\n        ├── teamId: 'team-acme-law'\n        ├── email: 'paralegal@acmelaw.com'\n        └── status: 'accepted'\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":421,"cache_read_input_tokens":52368,"cache_creation":{"ephemeral_5m_input_tokens":421,"ephemeral_1h_input_tokens":0},"output_tokens":4302,"service_tier":"standard"}},"requestId":"req_011CSKBmKf8bGbjs5i1YLvgF","type":"assistant","uuid":"4ec6ce74-4d46-4086-b2df-65e602bf3c41","timestamp":"2025-08-20T15:20:07.035Z"}
{"parentUuid":"4ec6ce74-4d46-4086-b2df-65e602bf3c41","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_014K1gi296uuZ6GX4NHFck82","type":"tool_result","content":"The file C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n     1→# Firestore Data Structure Design\n     2→\n     3→## Overview\n     4→\n     5→This document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n     6→\n     7→## Collection Structure Diagram\n     8→\n     9→Here's an ASCII tree diagram showing how the collections are organized for a law firm team using Bookkeeper and Intranet apps:\n    10→\n    11→```\n    12→Firestore Database\n    13→│\n    14→├── users/\n    15→│   ├── user-john-123/\n    16→│   │   ├── role: 'admin'\n    17→│   │   ├── department: 'Legal'\n    18→│   │   ├── defaultTeamId: 'team-acme-law'\n    19→│   │   ├── preferences: {...}\n    20→│   │   ├── createdAt: Timestamp\n    21→│   │   └── lastLogin: Timestamp\n    22→│   │\n    23→│   └── user-jane-456/\n    24→│       ├── role: 'user'\n    25→│       ├── department: 'Accounting'\n    26→│       └── defaultTeamId: 'team-acme-law'\n    27→│\n    28→├── teams/\n    29→│   └── team-acme-law/\n    30→│       ├── name: 'ACME Law Firm'\n    31→│       ├── description: 'Full-service law firm'\n    32→│       ├── domain: 'acmelaw.com'\n    33→│       ├── apps: {\n    34→│       │   intranet: { enabled: true, plan: 'premium' },\n    35→│       │   bookkeeper: { enabled: true, plan: 'basic' }\n    36→│       │ }\n    37→│       ├── settings: {...}\n    38→│       ├── memberCount: 15\n    39→│       │\n    40→│       ├── memberships/                    [SUBCOLLECTION]\n    41→│       │   ├── user-john-123/\n    42→│       │   │   ├── email: 'john@acmelaw.com'\n    43→│       │   │   ├── displayName: 'John Smith'\n    44→│       │   │   ├── role: 'admin'\n    45→│       │   │   ├── status: 'active'\n    46→│       │   │   ├── permissions: {\n    47→│       │   │   │   apps: {\n    48→│       │   │   │     intranet: { canCreateProjects: true, canManageDocuments: true },\n    49→│       │   │   │     bookkeeper: { canCreateInvoices: true, canApproveExpenses: true }\n    50→│       │   │   │   }\n    51→│       │   │   │ }\n    52→│       │   │   └── joinedAt: Timestamp\n    53→│       │   │\n    54→│       │   └── user-jane-456/\n    55→│       │       ├── email: 'jane@acmelaw.com'\n    56→│       │       ├── displayName: 'Jane Doe'\n    57→│       │       ├── role: 'member'\n    58→│       │       ├── status: 'active'\n    59→│       │       └── permissions: {\n    60→│       │           apps: {\n    61→│       │             bookkeeper: { canCreateInvoices: true, canViewReports: true }\n    62→│       │           }\n    63→│       │         }\n    64→│       │\n    65→│       ├── shared/                         [SUBCOLLECTION - Cross-app data]\n    66→│       │   ├── clients/                    [SUBCOLLECTION]\n    67→│       │   │   ├── client-abc-corp/\n    68→│       │   │   │   ├── name: 'ABC Corporation'\n    69→│       │   │   │   ├── type: 'corporate'\n    70→│       │   │   │   ├── primaryContact: { name: 'John Smith', email: '...' }\n    71→│       │   │   │   ├── address: { street: '123 Business Ave', ... }\n    72→│       │   │   │   ├── industry: 'Technology'\n    73→│       │   │   │   ├── retainerAmount: 10000\n    74→│       │   │   │   ├── billingRate: 350\n    75→│       │   │   │   ├── status: 'active'\n    76→│       │   │   │   ├── appAccess: {\n    77→│       │   │   │   │   intranet: true,    // Client management\n    78→│       │   │   │   │   bookkeeper: true   // Invoicing & time tracking\n    79→│       │   │   │   │ }\n    80→│       │   │   │   └── createdAt: Timestamp\n    81→│       │   │   │\n    82→│       │   │   └── client-xyz-llc/\n    83→│       │   │       ├── name: 'XYZ LLC'\n    84→│       │   │       ├── type: 'corporate'\n    85→│       │   │       ├── status: 'active'\n    86→│       │   │       └── appAccess: {\n    87→│       │   │           intranet: true,\n    88→│       │   │           bookkeeper: false  // No billing access\n    89→│       │   │         }\n    90→│       │   │\n    91→│       │   ├── matters/                    [SUBCOLLECTION]\n    92→│       │   │   ├── matter-contract-review/\n    93→│       │   │   │   ├── title: 'ABC Corp - Contract Review'\n    94→│       │   │   │   ├── description: 'Review of software licensing agreement'\n    95→│       │   │   │   ├── clientId: 'client-abc-corp'\n    96→│       │   │   │   ├── clientName: 'ABC Corporation'  // Denormalized\n    97→│       │   │   │   ├── matterNumber: '2024-001'\n    98→│       │   │   │   ├── practiceArea: 'Corporate Law'\n    99→│       │   │   │   ├── status: 'active'\n   100→│       │   │   │   ├── priority: 'high'\n   101→│       │   │   │   ├── budget: 25000\n   102→│       │   │   │   ├── billingRate: 350\n   103→│       │   │   │   ├── leadAttorney: 'user-john-123'\n   104→│       │   │   │   ├── assignedLawyers: ['user-john-123', 'user-jane-456']\n   105→│       │   │   │   ├── appAccess: {\n   106→│       │   │   │   │   intranet: true,    // Matter management, tasks\n   107→│       │   │   │   │   bookkeeper: true   // Time tracking, billing\n   108→│       │   │   │   │ }\n   109→│       │   │   │   ├── openedDate: Timestamp\n   110→│       │   │   │   └── dueDate: Timestamp\n   111→│       │   │   │\n   112→│       │   │   └── matter-trademark-filing/\n   113→│       │   │       ├── title: 'XYZ LLC - Trademark Filing'\n   114→│       │   │       ├── clientId: 'client-xyz-llc'\n   115→│       │   │       ├── status: 'active'\n   116→│       │   │       └── appAccess: {\n   117→│       │   │           intranet: true,    // Case management only\n   118→│       │   │           bookkeeper: false  // No billing for this matter\n   119→│       │   │         }\n   120→│       │   │\n   121→│       │   └── contacts/                   [SUBCOLLECTION]\n   122→│       │       ├── contact-john-smith/\n   123→│       │       │   ├── name: 'John Smith'\n   124→│       │       │   ├── email: 'john@abccorp.com'\n   125→│       │       │   ├── phone: '+1-555-0123'\n   126→│       │       │   ├── title: 'General Counsel'\n   127→│       │       │   ├── clientId: 'client-abc-corp'\n   128→│       │       │   └── appAccess: {\n   129→│       │       │       intranet: true,    // Contact management\n   130→│       │       │       bookkeeper: true   // Invoice recipient\n   131→│       │       │     }\n   132→│       │       │\n   133→│       │       └── contact-sarah-johnson/\n   134→│       │           ├── name: 'Sarah Johnson'\n   135→│       │           ├── email: 'sarah@xyzllc.com'\n   136→│       │           ├── clientId: 'client-xyz-llc'\n   137→│       │           └── appAccess: {\n   138→│       │               intranet: true,\n   139→│       │               bookkeeper: false\n   140→│       │             }\n   141→│       │\n   142→│       └── apps/                           [SUBCOLLECTION - App-specific data]\n   143→│           ├── intranet/                   [SUBCOLLECTION]\n   144→│           │   ├── projects/               [SUBCOLLECTION]\n   145→│           │   │   ├── project-website-redesign/\n   146→│           │   │   │   ├── name: 'Website Redesign'\n   147→│           │   │   │   ├── description: 'Q1 2024 website overhaul'\n   148→│           │   │   │   ├── relatedClientId: 'client-abc-corp'     // Links to shared\n   149→│           │   │   │   ├── relatedMatterId: 'matter-contract-review' // Links to shared\n   150→│           │   │   │   ├── status: 'in-progress'\n   151→│           │   │   │   ├── priority: 'high'\n   152→│           │   │   │   ├── projectManager: 'user-john-123'\n   153→│           │   │   │   ├── milestones: [...]\n   154→│           │   │   │   └── createdAt: Timestamp\n   155→│           │   │   │\n   156→│           │   │   └── project-legal-research/\n   157→│           │   │       ├── name: 'Trademark Legal Research'\n   158→│           │   │       ├── relatedClientId: 'client-xyz-llc'\n   159→│           │   │       ├── relatedMatterId: 'matter-trademark-filing'\n   160→│           │   │       └── status: 'active'\n   161→│           │   │\n   162→│           │   ├── documents/              [SUBCOLLECTION]\n   163→│           │   │   ├── doc-contract-template/\n   164→│           │   │   │   ├── title: 'Software License Template'\n   165→│           │   │   │   ├── type: 'template'\n   166→│           │   │   │   ├── relatedMatterId: 'matter-contract-review'\n   167→│           │   │   │   ├── tags: ['contract', 'template', 'software']\n   168→│           │   │   │   └── createdBy: 'user-john-123'\n   169→│           │   │   │\n   170→│           │   │   └── doc-case-notes/\n   171→│           │   │       ├── title: 'Trademark Research Notes'\n   172→│           │   │       ├── relatedMatterId: 'matter-trademark-filing'\n   173→│           │   │       └── type: 'notes'\n   174→│           │   │\n   175→│           │   └── tasks/                  [SUBCOLLECTION]\n   176→│           │       ├── task-contract-review/\n   177→│           │       │   ├── title: 'Review Section 3.2'\n   178→│           │       │   ├── description: 'Review liability clauses'\n   179→│           │       │   ├── relatedMatterId: 'matter-contract-review'\n   180→│           │       │   ├── assignedTo: 'user-john-123'\n   181→│           │       │   ├── status: 'in-progress'\n   182→│           │       │   ├── priority: 'high'\n   183→│           │       │   └── dueDate: Timestamp\n   184→│           │       │\n   185→│           │       └── task-client-meeting/\n   186→│           │           ├── title: 'Client Status Meeting'\n   187→│           │           ├── relatedClientId: 'client-abc-corp'\n   188→│           │           └── status: 'pending'\n   189→│           │\n   190→│           └── bookkeeper/                 [SUBCOLLECTION]\n   191→│               ├── invoices/               [SUBCOLLECTION]\n   192→│               │   ├── invoice-2024-001/\n   193→│               │   │   ├── invoiceNumber: 'INV-2024-001'\n   194→│               │   │   ├── clientId: 'client-abc-corp'           // Links to shared\n   195→│               │   │   ├── matterId: 'matter-contract-review'    // Links to shared\n   196→│               │   │   ├── description: 'Legal services - January 2024'\n   197→│               │   │   ├── status: 'sent'\n   198→│               │   │   ├── lineItems: [\n   199→│               │   │   │   { description: 'Contract review', hours: 10.5, rate: 350 },\n   200→│               │   │   │   { description: 'Client consultation', hours: 2.0, rate: 350 }\n   201→│               │   │   │ ]\n   202→│               │   │   ├── subtotal: 4375\n   203→│               │   │   ├── tax: 350\n   204→│               │   │   ├── total: 4725\n   205→│               │   │   ├── dueDate: Timestamp\n   206→│               │   │   └── createdAt: Timestamp\n   207→│               │   │\n   208→│               │   └── invoice-2024-002/\n   209→│               │       ├── invoiceNumber: 'INV-2024-002'\n   210→│               │       ├── clientId: 'client-xyz-llc'\n   211→│               │       ├── matterId: 'matter-trademark-filing'\n   212→│               │       └── status: 'draft'\n   213→│               │\n   214→│               ├── expenses/               [SUBCOLLECTION]\n   215→│               │   ├── expense-filing-fees/\n   216→│               │   │   ├── description: 'USPTO Trademark Filing Fees'\n   217→│               │   │   ├── amount: 350\n   218→│               │   │   ├── category: 'filing-fees'\n   219→│               │   │   ├── relatedMatterId: 'matter-trademark-filing'\n   220→│               │   │   ├── relatedClientId: 'client-xyz-llc'\n   221→│               │   │   ├── billableToClient: true\n   222→│               │   │   ├── status: 'approved'\n   223→│               │   │   ├── receiptUrl: 'gs://bucket/receipt.pdf'\n   224→│               │   │   └── expenseDate: Timestamp\n   225→│               │   │\n   226→│               │   └── expense-research-tools/\n   227→│               │       ├── description: 'Legal Database Access'\n   228→│               │       ├── amount: 150\n   229→│               │       ├── category: 'research'\n   230→│               │       ├── billableToClient: false\n   231→│               │       └── status: 'pending'\n   232→│               │\n   233→│               └── time-entries/           [SUBCOLLECTION]\n   234→│                   ├── time-entry-001/\n   235→│                   │   ├── description: 'Contract clause analysis'\n   236→│                   │   ├── hours: 2.5\n   237→│                   │   ├── rate: 350\n   238→│                   │   ├── matterId: 'matter-contract-review'      // Links to shared\n   239→│                   │   ├── clientId: 'client-abc-corp'            // Links to shared\n   240→│                   │   ├── userId: 'user-john-123'\n   241→│                   │   ├── billable: true\n   242→│                   │   ├── invoiceId: 'invoice-2024-001'\n   243→│                   │   ├── status: 'invoiced'\n   244→│                   │   └── workDate: Timestamp\n   245→│                   │\n   246→│                   └── time-entry-002/\n   247→│                       ├── description: 'Trademark research'\n   248→│                       ├── hours: 3.0\n   249→│                       ├── matterId: 'matter-trademark-filing'\n   250→│                       ├── billable: true\n   251→│                       └── status: 'unbilled'\n   252→│\n   253→└── invitations/\n   254→    ├── invite-001/\n   255→    │   ├── teamId: 'team-acme-law'\n   256→    │   ├── teamName: 'ACME Law Firm'\n   257→    │   ├── email: 'newlawyer@acmelaw.com'\n   258→    │   ├── role: 'member'\n   259→    │   ├── status: 'pending'\n   260→    │   ├── token: 'secure-random-token'\n   261→    │   ├── createdAt: Timestamp\n   262→    │   └── expiresAt: Timestamp\n   263→    │\n   264→    └── invite-002/\n   265→        ├── teamId: 'team-acme-law'\n   266→        ├── email: 'paralegal@acmelaw.com'\n   267→        └── status: 'accepted'\n   268→```\n   269→\n   270→## Current Implementation Analysis\n   271→\n   272→### \u0005 What's Already Working"}]},"uuid":"a3bc0174-5fe4-4b74-a834-822f73f7e274","timestamp":"2025-08-20T15:20:07.107Z","toolUseResult":{"filePath":"C:\\Users\\Brahm\\Git\\Coryphaeus\\docs\\data-structures.md","oldString":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.","newString":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Collection Structure Diagram\n\nHere's an ASCII tree diagram showing how the collections are organized for a law firm team using Bookkeeper and Intranet apps:\n\n```\nFirestore Database\n│\n├── users/\n│   ├── user-john-123/\n│   │   ├── role: 'admin'\n│   │   ├── department: 'Legal'\n│   │   ├── defaultTeamId: 'team-acme-law'\n│   │   ├── preferences: {...}\n│   │   ├── createdAt: Timestamp\n│   │   └── lastLogin: Timestamp\n│   │\n│   └── user-jane-456/\n│       ├── role: 'user'\n│       ├── department: 'Accounting'\n│       └── defaultTeamId: 'team-acme-law'\n│\n├── teams/\n│   └── team-acme-law/\n│       ├── name: 'ACME Law Firm'\n│       ├── description: 'Full-service law firm'\n│       ├── domain: 'acmelaw.com'\n│       ├── apps: {\n│       │   intranet: { enabled: true, plan: 'premium' },\n│       │   bookkeeper: { enabled: true, plan: 'basic' }\n│       │ }\n│       ├── settings: {...}\n│       ├── memberCount: 15\n│       │\n│       ├── memberships/                    [SUBCOLLECTION]\n│       │   ├── user-john-123/\n│       │   │   ├── email: 'john@acmelaw.com'\n│       │   │   ├── displayName: 'John Smith'\n│       │   │   ├── role: 'admin'\n│       │   │   ├── status: 'active'\n│       │   │   ├── permissions: {\n│       │   │   │   apps: {\n│       │   │   │     intranet: { canCreateProjects: true, canManageDocuments: true },\n│       │   │   │     bookkeeper: { canCreateInvoices: true, canApproveExpenses: true }\n│       │   │   │   }\n│       │   │   │ }\n│       │   │   └── joinedAt: Timestamp\n│       │   │\n│       │   └── user-jane-456/\n│       │       ├── email: 'jane@acmelaw.com'\n│       │       ├── displayName: 'Jane Doe'\n│       │       ├── role: 'member'\n│       │       ├── status: 'active'\n│       │       └── permissions: {\n│       │           apps: {\n│       │             bookkeeper: { canCreateInvoices: true, canViewReports: true }\n│       │           }\n│       │         }\n│       │\n│       ├── shared/                         [SUBCOLLECTION - Cross-app data]\n│       │   ├── clients/                    [SUBCOLLECTION]\n│       │   │   ├── client-abc-corp/\n│       │   │   │   ├── name: 'ABC Corporation'\n│       │   │   │   ├── type: 'corporate'\n│       │   │   │   ├── primaryContact: { name: 'John Smith', email: '...' }\n│       │   │   │   ├── address: { street: '123 Business Ave', ... }\n│       │   │   │   ├── industry: 'Technology'\n│       │   │   │   ├── retainerAmount: 10000\n│       │   │   │   ├── billingRate: 350\n│       │   │   │   ├── status: 'active'\n│       │   │   │   ├── appAccess: {\n│       │   │   │   │   intranet: true,    // Client management\n│       │   │   │   │   bookkeeper: true   // Invoicing & time tracking\n│       │   │   │   │ }\n│       │   │   │   └── createdAt: Timestamp\n│       │   │   │\n│       │   │   └── client-xyz-llc/\n│       │   │       ├── name: 'XYZ LLC'\n│       │   │       ├── type: 'corporate'\n│       │   │       ├── status: 'active'\n│       │   │       └── appAccess: {\n│       │   │           intranet: true,\n│       │   │           bookkeeper: false  // No billing access\n│       │   │         }\n│       │   │\n│       │   ├── matters/                    [SUBCOLLECTION]\n│       │   │   ├── matter-contract-review/\n│       │   │   │   ├── title: 'ABC Corp - Contract Review'\n│       │   │   │   ├── description: 'Review of software licensing agreement'\n│       │   │   │   ├── clientId: 'client-abc-corp'\n│       │   │   │   ├── clientName: 'ABC Corporation'  // Denormalized\n│       │   │   │   ├── matterNumber: '2024-001'\n│       │   │   │   ├── practiceArea: 'Corporate Law'\n│       │   │   │   ├── status: 'active'\n│       │   │   │   ├── priority: 'high'\n│       │   │   │   ├── budget: 25000\n│       │   │   │   ├── billingRate: 350\n│       │   │   │   ├── leadAttorney: 'user-john-123'\n│       │   │   │   ├── assignedLawyers: ['user-john-123', 'user-jane-456']\n│       │   │   │   ├── appAccess: {\n│       │   │   │   │   intranet: true,    // Matter management, tasks\n│       │   │   │   │   bookkeeper: true   // Time tracking, billing\n│       │   │   │   │ }\n│       │   │   │   ├── openedDate: Timestamp\n│       │   │   │   └── dueDate: Timestamp\n│       │   │   │\n│       │   │   └── matter-trademark-filing/\n│       │   │       ├── title: 'XYZ LLC - Trademark Filing'\n│       │   │       ├── clientId: 'client-xyz-llc'\n│       │   │       ├── status: 'active'\n│       │   │       └── appAccess: {\n│       │   │           intranet: true,    // Case management only\n│       │   │           bookkeeper: false  // No billing for this matter\n│       │   │         }\n│       │   │\n│       │   └── contacts/                   [SUBCOLLECTION]\n│       │       ├── contact-john-smith/\n│       │       │   ├── name: 'John Smith'\n│       │       │   ├── email: 'john@abccorp.com'\n│       │       │   ├── phone: '+1-555-0123'\n│       │       │   ├── title: 'General Counsel'\n│       │       │   ├── clientId: 'client-abc-corp'\n│       │       │   └── appAccess: {\n│       │       │       intranet: true,    // Contact management\n│       │       │       bookkeeper: true   // Invoice recipient\n│       │       │     }\n│       │       │\n│       │       └── contact-sarah-johnson/\n│       │           ├── name: 'Sarah Johnson'\n│       │           ├── email: 'sarah@xyzllc.com'\n│       │           ├── clientId: 'client-xyz-llc'\n│       │           └── appAccess: {\n│       │               intranet: true,\n│       │               bookkeeper: false\n│       │             }\n│       │\n│       └── apps/                           [SUBCOLLECTION - App-specific data]\n│           ├── intranet/                   [SUBCOLLECTION]\n│           │   ├── projects/               [SUBCOLLECTION]\n│           │   │   ├── project-website-redesign/\n│           │   │   │   ├── name: 'Website Redesign'\n│           │   │   │   ├── description: 'Q1 2024 website overhaul'\n│           │   │   │   ├── relatedClientId: 'client-abc-corp'     // Links to shared\n│           │   │   │   ├── relatedMatterId: 'matter-contract-review' // Links to shared\n│           │   │   │   ├── status: 'in-progress'\n│           │   │   │   ├── priority: 'high'\n│           │   │   │   ├── projectManager: 'user-john-123'\n│           │   │   │   ├── milestones: [...]\n│           │   │   │   └── createdAt: Timestamp\n│           │   │   │\n│           │   │   └── project-legal-research/\n│           │   │       ├── name: 'Trademark Legal Research'\n│           │   │       ├── relatedClientId: 'client-xyz-llc'\n│           │   │       ├── relatedMatterId: 'matter-trademark-filing'\n│           │   │       └── status: 'active'\n│           │   │\n│           │   ├── documents/              [SUBCOLLECTION]\n│           │   │   ├── doc-contract-template/\n│           │   │   │   ├── title: 'Software License Template'\n│           │   │   │   ├── type: 'template'\n│           │   │   │   ├── relatedMatterId: 'matter-contract-review'\n│           │   │   │   ├── tags: ['contract', 'template', 'software']\n│           │   │   │   └── createdBy: 'user-john-123'\n│           │   │   │\n│           │   │   └── doc-case-notes/\n│           │   │       ├── title: 'Trademark Research Notes'\n│           │   │       ├── relatedMatterId: 'matter-trademark-filing'\n│           │   │       └── type: 'notes'\n│           │   │\n│           │   └── tasks/                  [SUBCOLLECTION]\n│           │       ├── task-contract-review/\n│           │       │   ├── title: 'Review Section 3.2'\n│           │       │   ├── description: 'Review liability clauses'\n│           │       │   ├── relatedMatterId: 'matter-contract-review'\n│           │       │   ├── assignedTo: 'user-john-123'\n│           │       │   ├── status: 'in-progress'\n│           │       │   ├── priority: 'high'\n│           │       │   └── dueDate: Timestamp\n│           │       │\n│           │       └── task-client-meeting/\n│           │           ├── title: 'Client Status Meeting'\n│           │           ├── relatedClientId: 'client-abc-corp'\n│           │           └── status: 'pending'\n│           │\n│           └── bookkeeper/                 [SUBCOLLECTION]\n│               ├── invoices/               [SUBCOLLECTION]\n│               │   ├── invoice-2024-001/\n│               │   │   ├── invoiceNumber: 'INV-2024-001'\n│               │   │   ├── clientId: 'client-abc-corp'           // Links to shared\n│               │   │   ├── matterId: 'matter-contract-review'    // Links to shared\n│               │   │   ├── description: 'Legal services - January 2024'\n│               │   │   ├── status: 'sent'\n│               │   │   ├── lineItems: [\n│               │   │   │   { description: 'Contract review', hours: 10.5, rate: 350 },\n│               │   │   │   { description: 'Client consultation', hours: 2.0, rate: 350 }\n│               │   │   │ ]\n│               │   │   ├── subtotal: 4375\n│               │   │   ├── tax: 350\n│               │   │   ├── total: 4725\n│               │   │   ├── dueDate: Timestamp\n│               │   │   └── createdAt: Timestamp\n│               │   │\n│               │   └── invoice-2024-002/\n│               │       ├── invoiceNumber: 'INV-2024-002'\n│               │       ├── clientId: 'client-xyz-llc'\n│               │       ├── matterId: 'matter-trademark-filing'\n│               │       └── status: 'draft'\n│               │\n│               ├── expenses/               [SUBCOLLECTION]\n│               │   ├── expense-filing-fees/\n│               │   │   ├── description: 'USPTO Trademark Filing Fees'\n│               │   │   ├── amount: 350\n│               │   │   ├── category: 'filing-fees'\n│               │   │   ├── relatedMatterId: 'matter-trademark-filing'\n│               │   │   ├── relatedClientId: 'client-xyz-llc'\n│               │   │   ├── billableToClient: true\n│               │   │   ├── status: 'approved'\n│               │   │   ├── receiptUrl: 'gs://bucket/receipt.pdf'\n│               │   │   └── expenseDate: Timestamp\n│               │   │\n│               │   └── expense-research-tools/\n│               │       ├── description: 'Legal Database Access'\n│               │       ├── amount: 150\n│               │       ├── category: 'research'\n│               │       ├── billableToClient: false\n│               │       └── status: 'pending'\n│               │\n│               └── time-entries/           [SUBCOLLECTION]\n│                   ├── time-entry-001/\n│                   │   ├── description: 'Contract clause analysis'\n│                   │   ├── hours: 2.5\n│                   │   ├── rate: 350\n│                   │   ├── matterId: 'matter-contract-review'      // Links to shared\n│                   │   ├── clientId: 'client-abc-corp'            // Links to shared\n│                   │   ├── userId: 'user-john-123'\n│                   │   ├── billable: true\n│                   │   ├── invoiceId: 'invoice-2024-001'\n│                   │   ├── status: 'invoiced'\n│                   │   └── workDate: Timestamp\n│                   │\n│                   └── time-entry-002/\n│                       ├── description: 'Trademark research'\n│                       ├── hours: 3.0\n│                       ├── matterId: 'matter-trademark-filing'\n│                       ├── billable: true\n│                       └── status: 'unbilled'\n│\n└── invitations/\n    ├── invite-001/\n    │   ├── teamId: 'team-acme-law'\n    │   ├── teamName: 'ACME Law Firm'\n    │   ├── email: 'newlawyer@acmelaw.com'\n    │   ├── role: 'member'\n    │   ├── status: 'pending'\n    │   ├── token: 'secure-random-token'\n    │   ├── createdAt: Timestamp\n    │   └── expiresAt: Timestamp\n    │\n    └── invite-002/\n        ├── teamId: 'team-acme-law'\n        ├── email: 'paralegal@acmelaw.com'\n        └── status: 'accepted'\n```","originalFile":"# Firestore Data Structure Design\n\n## Overview\n\nThis document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance.\n\n## Current Implementation Analysis\n\n### \u0005 What's Already Working\n- Basic team-based multi-tenancy with `teams` and `users` collections\n- Security rules with custom claims for efficient authorization\n- Team membership embedded in team documents\n- Multi-App SSO authentication flow\n\n### =\u0004 Areas for Optimization\n- Large teams may hit Firestore document size limits (1MB) with embedded members\n- Querying user memberships requires scanning all teams (inefficient at scale)\n- No invitation system for adding members\n- Missing audit trails for membership changes\n\n## Optimal Data Structure\n\n### Core Collections\n\n#### 1. Users Collection: `/users/{userId}`\n**Purpose**: Store application-specific user data (NOT identity data - that stays in Firebase Auth)\n\n```javascript\n{\n  // Application-specific data only\n  role: 'user' | 'admin',\n  department: 'Engineering',\n  defaultTeamId: 'team-abc-123',  // User's primary team\n  preferences: {\n    theme: 'light',\n    notifications: true,\n    language: 'en'\n  },\n  \n  // Activity tracking\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  lastLogin: Timestamp,\n  \n  // Note: email, displayName, photoURL come from Firebase Auth\n  // teamId is set via custom claims, not stored here\n}\n```\n\n#### 2. Teams Collection: `/teams/{teamId}`\n**Purpose**: Store team/organization information and app access control\n\n```javascript\n{\n  name: 'ACME Law Firm',\n  description: 'Full-service law firm serving corporate clients',\n  domain: 'acmelaw.com',  // Optional: for email domain-based auto-join\n  \n  // Multi-App Access Control\n  apps: {\n    intranet: {\n      enabled: true,\n      plan: 'premium',\n      features: ['documents', 'calendar', 'messaging']\n    },\n    bookkeeper: {\n      enabled: true,\n      plan: 'basic',\n      features: ['invoicing', 'expenses']\n    },\n    files: {\n      enabled: false,  // This team doesn't have access to files app\n      plan: null,\n      features: []\n    }\n  },\n  \n  // Team settings\n  settings: {\n    allowPublicJoin: false,\n    requireApprovalForJoin: true,\n    maxMembers: 100,\n    timezone: 'America/New_York',\n    businessHours: {\n      start: '09:00',\n      end: '17:00',\n      days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']\n    }\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789',\n  \n  // Stats (for dashboard display)\n  memberCount: 15,\n  lastActivity: Timestamp\n}\n```\n\n#### 3. Team Memberships Subcollection: `/teams/{teamId}/memberships/{userId}`\n**Purpose**: Manage team memberships with detailed information and audit trail\n\n```javascript\n{\n  // User information (denormalized for performance)\n  email: 'john@acme.com',\n  displayName: 'John Doe',  // Cached from Firebase Auth\n  \n  // Membership details\n  role: 'member' | 'admin' | 'owner',\n  status: 'active' | 'invited' | 'suspended',\n  \n  // App-specific permissions (role-based)\n  permissions: {\n    // Global team permissions\n    canManageMembers: false,\n    canManageSettings: false,\n    \n    // App-specific permissions\n    apps: {\n      intranet: {\n        canCreateProjects: true,\n        canDeleteProjects: false,\n        canManageDocuments: true\n      },\n      bookkeeper: {\n        canCreateInvoices: true,\n        canApproveExpenses: false,\n        canViewReports: true\n      }\n    }\n  },\n  \n  // Activity tracking\n  joinedAt: Timestamp,\n  invitedAt: Timestamp,\n  invitedBy: 'user-abc-456',\n  lastActivity: Timestamp,\n  \n  // Audit trail\n  history: [\n    {\n      action: 'role_changed',\n      from: 'member',\n      to: 'admin',\n      by: 'user-abc-456',\n      at: Timestamp\n    }\n  ]\n}\n```\n\n#### 4. Team Invitations Collection: `/invitations/{invitationId}`\n**Purpose**: Manage pending team invitations\n\n```javascript\n{\n  teamId: 'team-abc-123',\n  teamName: 'ACME Corporation',  // Denormalized for convenience\n  \n  // Invitation details\n  email: 'newuser@acme.com',\n  role: 'member',\n  message: 'Welcome to our team!',\n  \n  // Status tracking\n  status: 'pending' | 'accepted' | 'expired' | 'revoked',\n  token: 'secure-random-token',  // For secure invitation links\n  \n  // Metadata\n  createdAt: Timestamp,\n  expiresAt: Timestamp,  // Auto-expire invitations\n  invitedBy: 'user-xyz-789',\n  acceptedAt: Timestamp,\n  acceptedBy: 'user-new-123'\n}\n```\n\n#### 5. User Team Memberships (Collection Group): Query via Collection Group\n**Purpose**: Enable efficient queries for \"all teams a user belongs to\"\n\nThis uses the `/teams/{teamId}/memberships/{userId}` subcollection with Collection Group queries:\n\n```javascript\n// Query all memberships for a user across all teams\nconst userMemberships = await db\n  .collectionGroup('memberships')\n  .where(documentId(), '==', userId)\n  .get()\n```\n\n### Team Data Organization\n\n#### 6. Shared Data Subcollections: `/teams/{teamId}/shared/{collection}/{documentId}`\n**Purpose**: Data needed by multiple apps (clients, matters, contacts, etc.)\n\n```javascript\n// Example: /teams/{teamId}/shared/clients/{clientId}\n{\n  name: 'ABC Corporation',\n  type: 'corporate' | 'individual',\n  \n  // Contact information\n  primaryContact: {\n    name: 'John Smith',\n    email: 'john@abccorp.com',\n    phone: '+1-555-0123',\n    title: 'General Counsel'\n  },\n  \n  // Address information\n  address: {\n    street: '123 Business Ave',\n    city: 'New York',\n    state: 'NY',\n    zip: '10001',\n    country: 'USA'\n  },\n  \n  // Client-specific data\n  industry: 'Technology',\n  retainerAmount: 10000,\n  billingRate: 350,\n  status: 'active' | 'inactive' | 'prospect',\n  \n  // Which apps can access this client\n  appAccess: {\n    intranet: true,    // Client management, contacts\n    bookkeeper: true,  // Invoicing, time tracking\n    files: true        // Document storage\n  },\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/shared/matters/{matterId}\n{\n  title: 'ABC Corp - Contract Review',\n  description: 'Review and negotiation of software licensing agreement',\n  \n  // Client association\n  clientId: 'client-abc-123',\n  clientName: 'ABC Corporation',  // Denormalized\n  \n  // Matter details\n  matterNumber: '2024-001',\n  practiceArea: 'Corporate Law',\n  status: 'active' | 'closed' | 'on-hold',\n  priority: 'high' | 'medium' | 'low',\n  \n  // Financial information\n  budget: 25000,\n  billingRate: 350,\n  \n  // Assigned team\n  leadAttorney: 'user-xyz-789',\n  assignedLawyers: ['user-abc-456', 'user-def-789'],\n  \n  // App access control\n  appAccess: {\n    intranet: true,    // Matter management, tasks\n    bookkeeper: true,  // Time tracking, billing\n    files: true        // Document management\n  },\n  \n  // Important dates\n  openedDate: Timestamp,\n  dueDate: Timestamp,\n  closedDate: Timestamp,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```\n\n#### 7. App-Specific Data Subcollections: `/teams/{teamId}/apps/{appName}/{collection}/{documentId}`\n**Purpose**: Data that belongs to a specific app only\n\n```javascript\n// Example: /teams/{teamId}/apps/intranet/projects/{projectId}\n{\n  name: 'Website Redesign',\n  description: 'Q1 2024 website overhaul',\n  \n  // Optional association with shared data\n  relatedClientId: 'client-abc-123',  // Links to shared client data\n  relatedMatterId: 'matter-def-456',  // Links to shared matter data\n  \n  // App-specific project data\n  status: 'in-progress',\n  priority: 'high',\n  methodology: 'agile',\n  \n  // Project team (different from matter team)\n  projectManager: 'user-xyz-789',\n  developers: ['user-abc-456', 'user-def-789'],\n  \n  // Milestones\n  milestones: [\n    {\n      name: 'Design Phase',\n      dueDate: Timestamp,\n      status: 'completed'\n    },\n    {\n      name: 'Development Phase',\n      dueDate: Timestamp,\n      status: 'in-progress'\n    }\n  ],\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n\n// Example: /teams/{teamId}/apps/bookkeeper/invoices/{invoiceId}\n{\n  invoiceNumber: 'INV-2024-001',\n  \n  // Links to shared data\n  clientId: 'client-abc-123',\n  matterId: 'matter-def-456',  // Optional: for matter-based billing\n  \n  // Invoice details\n  description: 'Legal services for January 2024',\n  status: 'draft' | 'sent' | 'paid' | 'overdue',\n  \n  // Line items\n  lineItems: [\n    {\n      description: 'Contract review',\n      hours: 10.5,\n      rate: 350,\n      amount: 3675\n    },\n    {\n      description: 'Client consultation',\n      hours: 2.0,\n      rate: 350,\n      amount: 700\n    }\n  ],\n  \n  // Totals\n  subtotal: 4375,\n  tax: 350,\n  total: 4725,\n  \n  // Payment tracking\n  dueDate: Timestamp,\n  paidDate: Timestamp,\n  paidAmount: 4725,\n  \n  // Metadata\n  createdAt: Timestamp,\n  updatedAt: Timestamp,\n  createdBy: 'user-xyz-789'\n}\n```\n\n## Security Rules Strategy\n\n### Custom Claims (Enhanced for Multi-App SSO)\nSet via Firebase Admin SDK when user authenticates:\n\n```javascript\n// Enhanced custom claims with app-specific permissions\n{\n  teamId: 'team-abc-123',\n  role: 'admin',\n  apps: {\n    intranet: {\n      enabled: true,\n      permissions: ['manage_projects', 'view_reports']\n    },\n    bookkeeper: {\n      enabled: true,\n      permissions: ['create_invoices', 'approve_expenses']\n    },\n    files: {\n      enabled: false,  // User doesn't have access to files app\n      permissions: []\n    }\n  }\n}\n```\n\n### Firestore Rules Examples\n\n```javascript\n// Users can only access their own document\nmatch /users/{userId} {\n  allow read, write: if request.auth != null && request.auth.uid == userId;\n}\n\n// Team access based on membership\nmatch /teams/{teamId} {\n  allow read: if isTeamMember(teamId);\n  allow write: if isTeamAdmin(teamId);\n  \n  // Team memberships subcollection\n  match /memberships/{userId} {\n    allow read: if isTeamMember(teamId);\n    allow write: if isTeamAdmin(teamId) || request.auth.uid == userId;\n  }\n  \n  // Shared data subcollections (accessible by multiple apps)\n  match /shared/{collection}/{documentId} {\n    allow read: if isTeamMember(teamId) && hasSharedDataAccess(collection);\n    allow write: if isTeamMember(teamId) && hasSharedDataWriteAccess(collection);\n  }\n  \n  // App-specific data subcollections\n  match /apps/{appName}/{collection}/{documentId} {\n    allow read: if isTeamMember(teamId) && hasAppAccess(appName);\n    allow write: if isTeamMember(teamId) && hasAppAccess(appName) && \n                    hasAppPermission(appName, 'write_' + collection);\n  }\n}\n\n// Legacy app-specific collections (if you still have top-level collections)\nmatch /projects/{projectId} {\n  allow read, write: if isTeamMember(resource.data.teamId) && \n                        hasAppAccess('intranet');\n}\n\n// Helper functions\nfunction isTeamMember(teamId) {\n  return request.auth != null && request.auth.token.teamId == teamId;\n}\n\nfunction isTeamAdmin(teamId) {\n  return isTeamMember(teamId) && \n         (request.auth.token.role == 'admin' || request.auth.token.role == 'owner');\n}\n\nfunction hasAppAccess(appName) {\n  return request.auth != null && \n         request.auth.token.apps != null &&\n         request.auth.token.apps[appName] != null &&\n         request.auth.token.apps[appName].enabled == true;\n}\n\nfunction hasAppPermission(appName, permission) {\n  return hasAppAccess(appName) &&\n         permission in request.auth.token.apps[appName].permissions;\n}\n\nfunction hasSharedDataAccess(collection) {\n  // Allow access to shared data if user has access to any app that uses it\n  return hasAppAccess('intranet') || \n         hasAppAccess('bookkeeper') || \n         hasAppAccess('files');\n}\n\nfunction hasSharedDataWriteAccess(collection) {\n  // More restrictive write access - require specific permissions\n  return (collection == 'clients' && \n          (hasAppPermission('intranet', 'manage_clients') ||\n           hasAppPermission('bookkeeper', 'manage_clients'))) ||\n         (collection == 'matters' && \n          hasAppPermission('intranet', 'manage_matters'));\n}\n```\n\n## Query Patterns\n\n### High-Performance Queries Enabled\n\n1. **Get user's teams**:\n```javascript\nconst userTeams = await db\n  .collectionGroup('memberships')\n  .where(firebase.firestore.FieldPath.documentId(), '==', userId)\n  .get()\n```\n\n2. **Get team members**:\n```javascript\nconst teamMembers = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('memberships')\n  .where('status', '==', 'active')\n  .get()\n```\n\n3. **Get shared clients for team**:\n```javascript\nconst clients = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('clients')\n  .collection('clients')\n  .where('status', '==', 'active')\n  .orderBy('name')\n  .get()\n```\n\n4. **Get matters for a specific client**:\n```javascript\nconst matters = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('matters')\n  .collection('matters')\n  .where('clientId', '==', clientId)\n  .where('status', '==', 'active')\n  .orderBy('updatedAt', 'desc')\n  .get()\n```\n\n5. **Get app-specific data (e.g., invoices)**:\n```javascript\nconst invoices = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('apps')\n  .doc('bookkeeper')\n  .collection('invoices')\n  .where('clientId', '==', clientId)\n  .orderBy('createdAt', 'desc')\n  .get()\n```\n\n6. **Get pending invitations for email**:\n```javascript\nconst invitations = await db\n  .collection('invitations')\n  .where('email', '==', userEmail)\n  .where('status', '==', 'pending')\n  .get()\n```\n\n7. **Cross-app data queries (using shared data)**:\n```javascript\n// Get all client data that can be used across apps\nconst sharedClients = await db\n  .collection('teams')\n  .doc(teamId)\n  .collection('shared')\n  .doc('clients')\n  .collection('clients')\n  .where('appAccess.intranet', '==', true)  // Only clients accessible to intranet\n  .get()\n```\n\n## Performance Considerations\n\n### Denormalization Strategy\n- **Team name** cached in memberships for UI display\n- **User display name** cached in memberships to avoid Auth lookups\n- **Member count** cached in team document for dashboards\n\n### Index Requirements\n```javascript\n// Firestore indexes needed for multi-app structure\n{\n  collectionGroup: 'memberships',\n  fields: [\n    { fieldPath: '__name__', order: 'ASCENDING' }\n  ]\n},\n{\n  collection: 'invitations',\n  fields: [\n    { fieldPath: 'email', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' }\n  ]\n},\n{\n  collectionGroup: 'clients',  // Shared clients across teams\n  fields: [\n    { fieldPath: 'status', order: 'ASCENDING' },\n    { fieldPath: 'name', order: 'ASCENDING' }\n  ]\n},\n{\n  collectionGroup: 'matters',  // Shared matters across teams\n  fields: [\n    { fieldPath: 'clientId', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n},\n{\n  collectionGroup: 'invoices',  // App-specific invoices\n  fields: [\n    { fieldPath: 'clientId', order: 'ASCENDING' },\n    { fieldPath: 'createdAt', order: 'DESCENDING' }\n  ]\n},\n{\n  collectionGroup: 'projects',  // App-specific projects\n  fields: [\n    { fieldPath: 'relatedClientId', order: 'ASCENDING' },\n    { fieldPath: 'status', order: 'ASCENDING' },\n    { fieldPath: 'updatedAt', order: 'DESCENDING' }\n  ]\n}\n```\n\n### Scalability Limits\n- **Team document**: No size limits (members moved to subcollection)\n- **Memberships subcollection**: Supports unlimited team members\n- **Custom claims**: Efficient authorization without database reads\n- **Collection group queries**: Scale to millions of memberships\n\n## Migration Strategy\n\n### Phase 1: Add New Collections (Non-Breaking)\n1. Create `invitations` collection\n2. Migrate existing members to `memberships` subcollections\n3. Update security rules to support both old and new structure\n4. Add Collection Group indexes\n\n### Phase 2: Update Application Code\n1. Update `TeamService` to use new membership structure\n2. Implement invitation system\n3. Add Collection Group queries for user teams\n4. Update UI components\n\n### Phase 3: Clean Up (Breaking)\n1. Remove `members` field from team documents\n2. Update security rules to use new structure only\n3. Remove old query patterns\n\n## Benefits of This Structure\n\n### \u0005 Scalability\n- No document size limits for large teams\n- Efficient queries for user memberships\n- Supports millions of users and teams\n\n### \u0005 Security\n- Granular permission system\n- Custom claims for fast authorization\n- Audit trail for compliance\n\n### \u0005 Performance  \n- Denormalized data for fast UI updates\n- Collection Group queries for cross-team data\n- Minimal database reads for authorization\n\n### \u0005 Maintainability\n- Clear separation of concerns\n- Consistent patterns across collections\n- Easy to add new team-scoped features\n\n### \u0005 Multi-App SSO Ready\n- Custom claims work across all apps\n- Consistent team context everywhere\n- Single source of truth for permissions\n\nThis structure follows Firebase best practices while supporting your Multi-App SSO requirements and providing a solid foundation for scaling to thousands of teams and users.","structuredPatch":[{"oldStart":4,"oldLines":6,"newStart":4,"newLines":269,"lines":[" "," This document outlines the optimal Firestore data structure for our multi-tenant team-based architecture supporting Multi-App SSO. The design follows Firebase best practices for scalability, security, and query performance."," ","+## Collection Structure Diagram","+","+Here's an ASCII tree diagram showing how the collections are organized for a law firm team using Bookkeeper and Intranet apps:","+","+```","+Firestore Database","+│","+├── users/","+│   ├── user-john-123/","+│   │   ├── role: 'admin'","+│   │   ├── department: 'Legal'","+│   │   ├── defaultTeamId: 'team-acme-law'","+│   │   ├── preferences: {...}","+│   │   ├── createdAt: Timestamp","+│   │   └── lastLogin: Timestamp","+│   │","+│   └── user-jane-456/","+│       ├── role: 'user'","+│       ├── department: 'Accounting'","+│       └── defaultTeamId: 'team-acme-law'","+│","+├── teams/","+│   └── team-acme-law/","+│       ├── name: 'ACME Law Firm'","+│       ├── description: 'Full-service law firm'","+│       ├── domain: 'acmelaw.com'","+│       ├── apps: {","+│       │   intranet: { enabled: true, plan: 'premium' },","+│       │   bookkeeper: { enabled: true, plan: 'basic' }","+│       │ }","+│       ├── settings: {...}","+│       ├── memberCount: 15","+│       │","+│       ├── memberships/                    [SUBCOLLECTION]","+│       │   ├── user-john-123/","+│       │   │   ├── email: 'john@acmelaw.com'","+│       │   │   ├── displayName: 'John Smith'","+│       │   │   ├── role: 'admin'","+│       │   │   ├── status: 'active'","+│       │   │   ├── permissions: {","+│       │   │   │   apps: {","+│       │   │   │     intranet: { canCreateProjects: true, canManageDocuments: true },","+│       │   │   │     bookkeeper: { canCreateInvoices: true, canApproveExpenses: true }","+│       │   │   │   }","+│       │   │   │ }","+│       │   │   └── joinedAt: Timestamp","+│       │   │","+│       │   └── user-jane-456/","+│       │       ├── email: 'jane@acmelaw.com'","+│       │       ├── displayName: 'Jane Doe'","+│       │       ├── role: 'member'","+│       │       ├── status: 'active'","+│       │       └── permissions: {","+│       │           apps: {","+│       │             bookkeeper: { canCreateInvoices: true, canViewReports: true }","+│       │           }","+│       │         }","+│       │","+│       ├── shared/                         [SUBCOLLECTION - Cross-app data]","+│       │   ├── clients/                    [SUBCOLLECTION]","+│       │   │   ├── client-abc-corp/","+│       │   │   │   ├── name: 'ABC Corporation'","+│       │   │   │   ├── type: 'corporate'","+│       │   │   │   ├── primaryContact: { name: 'John Smith', email: '...' }","+│       │   │   │   ├── address: { street: '123 Business Ave', ... }","+│       │   │   │   ├── industry: 'Technology'","+│       │   │   │   ├── retainerAmount: 10000","+│       │   │   │   ├── billingRate: 350","+│       │   │   │   ├── status: 'active'","+│       │   │   │   ├── appAccess: {","+│       │   │   │   │   intranet: true,    // Client management","+│       │   │   │   │   bookkeeper: true   // Invoicing & time tracking","+│       │   │   │   │ }","+│       │   │   │   └── createdAt: Timestamp","+│       │   │   │","+│       │   │   └── client-xyz-llc/","+│       │   │       ├── name: 'XYZ LLC'","+│       │   │       ├── type: 'corporate'","+│       │   │       ├── status: 'active'","+│       │   │       └── appAccess: {","+│       │   │           intranet: true,","+│       │   │           bookkeeper: false  // No billing access","+│       │   │         }","+│       │   │","+│       │   ├── matters/                    [SUBCOLLECTION]","+│       │   │   ├── matter-contract-review/","+│       │   │   │   ├── title: 'ABC Corp - Contract Review'","+│       │   │   │   ├── description: 'Review of software licensing agreement'","+│       │   │   │   ├── clientId: 'client-abc-corp'","+│       │   │   │   ├── clientName: 'ABC Corporation'  // Denormalized","+│       │   │   │   ├── matterNumber: '2024-001'","+│       │   │   │   ├── practiceArea: 'Corporate Law'","+│       │   │   │   ├── status: 'active'","+│       │   │   │   ├── priority: 'high'","+│       │   │   │   ├── budget: 25000","+│       │   │   │   ├── billingRate: 350","+│       │   │   │   ├── leadAttorney: 'user-john-123'","+│       │   │   │   ├── assignedLawyers: ['user-john-123', 'user-jane-456']","+│       │   │   │   ├── appAccess: {","+│       │   │   │   │   intranet: true,    // Matter management, tasks","+│       │   │   │   │   bookkeeper: true   // Time tracking, billing","+│       │   │   │   │ }","+│       │   │   │   ├── openedDate: Timestamp","+│       │   │   │   └── dueDate: Timestamp","+│       │   │   │","+│       │   │   └── matter-trademark-filing/","+│       │   │       ├── title: 'XYZ LLC - Trademark Filing'","+│       │   │       ├── clientId: 'client-xyz-llc'","+│       │   │       ├── status: 'active'","+│       │   │       └── appAccess: {","+│       │   │           intranet: true,    // Case management only","+│       │   │           bookkeeper: false  // No billing for this matter","+│       │   │         }","+│       │   │","+│       │   └── contacts/                   [SUBCOLLECTION]","+│       │       ├── contact-john-smith/","+│       │       │   ├── name: 'John Smith'","+│       │       │   ├── email: 'john@abccorp.com'","+│       │       │   ├── phone: '+1-555-0123'","+│       │       │   ├── title: 'General Counsel'","+│       │       │   ├── clientId: 'client-abc-corp'","+│       │       │   └── appAccess: {","+│       │       │       intranet: true,    // Contact management","+│       │       │       bookkeeper: true   // Invoice recipient","+│       │       │     }","+│       │       │","+│       │       └── contact-sarah-johnson/","+│       │           ├── name: 'Sarah Johnson'","+│       │           ├── email: 'sarah@xyzllc.com'","+│       │           ├── clientId: 'client-xyz-llc'","+│       │           └── appAccess: {","+│       │               intranet: true,","+│       │               bookkeeper: false","+│       │             }","+│       │","+│       └── apps/                           [SUBCOLLECTION - App-specific data]","+│           ├── intranet/                   [SUBCOLLECTION]","+│           │   ├── projects/               [SUBCOLLECTION]","+│           │   │   ├── project-website-redesign/","+│           │   │   │   ├── name: 'Website Redesign'","+│           │   │   │   ├── description: 'Q1 2024 website overhaul'","+│           │   │   │   ├── relatedClientId: 'client-abc-corp'     // Links to shared","+│           │   │   │   ├── relatedMatterId: 'matter-contract-review' // Links to shared","+│           │   │   │   ├── status: 'in-progress'","+│           │   │   │   ├── priority: 'high'","+│           │   │   │   ├── projectManager: 'user-john-123'","+│           │   │   │   ├── milestones: [...]","+│           │   │   │   └── createdAt: Timestamp","+│           │   │   │","+│           │   │   └── project-legal-research/","+│           │   │       ├── name: 'Trademark Legal Research'","+│           │   │       ├── relatedClientId: 'client-xyz-llc'","+│           │   │       ├── relatedMatterId: 'matter-trademark-filing'","+│           │   │       └── status: 'active'","+│           │   │","+│           │   ├── documents/              [SUBCOLLECTION]","+│           │   │   ├── doc-contract-template/","+│           │   │   │   ├── title: 'Software License Template'","+│           │   │   │   ├── type: 'template'","+│           │   │   │   ├── relatedMatterId: 'matter-contract-review'","+│           │   │   │   ├── tags: ['contract', 'template', 'software']","+│           │   │   │   └── createdBy: 'user-john-123'","+│           │   │   │","+│           │   │   └── doc-case-notes/","+│           │   │       ├── title: 'Trademark Research Notes'","+│           │   │       ├── relatedMatterId: 'matter-trademark-filing'","+│           │   │       └── type: 'notes'","+│           │   │","+│           │   └── tasks/                  [SUBCOLLECTION]","+│           │       ├── task-contract-review/","+│           │       │   ├── title: 'Review Section 3.2'","+│           │       │   ├── description: 'Review liability clauses'","+│           │       │   ├── relatedMatterId: 'matter-contract-review'","+│           │       │   ├── assignedTo: 'user-john-123'","+│           │       │   ├── status: 'in-progress'","+│           │       │   ├── priority: 'high'","+│           │       │   └── dueDate: Timestamp","+│           │       │","+│           │       └── task-client-meeting/","+│           │           ├── title: 'Client Status Meeting'","+│           │           ├── relatedClientId: 'client-abc-corp'","+│           │           └── status: 'pending'","+│           │","+│           └── bookkeeper/                 [SUBCOLLECTION]","+│               ├── invoices/               [SUBCOLLECTION]","+│               │   ├── invoice-2024-001/","+│               │   │   ├── invoiceNumber: 'INV-2024-001'","+│               │   │   ├── clientId: 'client-abc-corp'           // Links to shared","+│               │   │   ├── matterId: 'matter-contract-review'    // Links to shared","+│               │   │   ├── description: 'Legal services - January 2024'","+│               │   │   ├── status: 'sent'","+│               │   │   ├── lineItems: [","+│               │   │   │   { description: 'Contract review', hours: 10.5, rate: 350 },","+│               │   │   │   { description: 'Client consultation', hours: 2.0, rate: 350 }","+│               │   │   │ ]","+│               │   │   ├── subtotal: 4375","+│               │   │   ├── tax: 350","+│               │   │   ├── total: 4725","+│               │   │   ├── dueDate: Timestamp","+│               │   │   └── createdAt: Timestamp","+│               │   │","+│               │   └── invoice-2024-002/","+│               │       ├── invoiceNumber: 'INV-2024-002'","+│               │       ├── clientId: 'client-xyz-llc'","+│               │       ├── matterId: 'matter-trademark-filing'","+│               │       └── status: 'draft'","+│               │","+│               ├── expenses/               [SUBCOLLECTION]","+│               │   ├── expense-filing-fees/","+│               │   │   ├── description: 'USPTO Trademark Filing Fees'","+│               │   │   ├── amount: 350","+│               │   │   ├── category: 'filing-fees'","+│               │   │   ├── relatedMatterId: 'matter-trademark-filing'","+│               │   │   ├── relatedClientId: 'client-xyz-llc'","+│               │   │   ├── billableToClient: true","+│               │   │   ├── status: 'approved'","+│               │   │   ├── receiptUrl: 'gs://bucket/receipt.pdf'","+│               │   │   └── expenseDate: Timestamp","+│               │   │","+│               │   └── expense-research-tools/","+│               │       ├── description: 'Legal Database Access'","+│               │       ├── amount: 150","+│               │       ├── category: 'research'","+│               │       ├── billableToClient: false","+│               │       └── status: 'pending'","+│               │","+│               └── time-entries/           [SUBCOLLECTION]","+│                   ├── time-entry-001/","+│                   │   ├── description: 'Contract clause analysis'","+│                   │   ├── hours: 2.5","+│                   │   ├── rate: 350","+│                   │   ├── matterId: 'matter-contract-review'      // Links to shared","+│                   │   ├── clientId: 'client-abc-corp'            // Links to shared","+│                   │   ├── userId: 'user-john-123'","+│                   │   ├── billable: true","+│                   │   ├── invoiceId: 'invoice-2024-001'","+│                   │   ├── status: 'invoiced'","+│                   │   └── workDate: Timestamp","+│                   │","+│                   └── time-entry-002/","+│                       ├── description: 'Trademark research'","+│                       ├── hours: 3.0","+│                       ├── matterId: 'matter-trademark-filing'","+│                       ├── billable: true","+│                       └── status: 'unbilled'","+│","+└── invitations/","+    ├── invite-001/","+    │   ├── teamId: 'team-acme-law'","+    │   ├── teamName: 'ACME Law Firm'","+    │   ├── email: 'newlawyer@acmelaw.com'","+    │   ├── role: 'member'","+    │   ├── status: 'pending'","+    │   ├── token: 'secure-random-token'","+    │   ├── createdAt: Timestamp","+    │   └── expiresAt: Timestamp","+    │","+    └── invite-002/","+        ├── teamId: 'team-acme-law'","+        ├── email: 'paralegal@acmelaw.com'","+        └── status: 'accepted'","+```","+"," ## Current Implementation Analysis"," "," ### \u0005 What's Already Working"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"a3bc0174-5fe4-4b74-a834-822f73f7e274","isSidechain":false,"userType":"external","cwd":"C:\\Users\\Brahm\\Git\\Coryphaeus","sessionId":"3331f618-b9ac-4194-ae7a-a8ba49dc4400","version":"1.0.85","gitBranch":"main","message":{"id":"msg_01AjDqZ23ZXnUQJQLKd37Hg4","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Perfect! I've created a comprehensive ASCII tree diagram that shows exactly how your Firestore collections would be organized for Bookkeeper and Intranet apps. Here are the key highlights:\n\n## Key Structure Benefits\n\n### 🔗 **Shared Data Eliminates Duplication**\n- **Clients**, **matters**, and **contacts** stored once in `/teams/{teamId}/shared/`\n- Both apps reference the same client/matter data via IDs\n- No duplication of client information between apps\n\n### 🏢 **App-Specific Organization**\n- **Intranet data**: `/teams/{teamId}/apps/intranet/` (projects, documents, tasks)\n- **Bookkeeper data**: `/teams/{teamId}/apps/bookkeeper/` (invoices, expenses, time-entries)\n- Clear separation while maintaining relationships\n\n### 🔐 **Granular Access Control**\n- Each document has `appAccess` fields controlling which apps can see it\n- Some clients may have bookkeeping disabled but intranet access enabled\n- Some matters may be for case management only (no billing)\n\n### 🔗 **Smart Linking**\n- App-specific data links to shared data via IDs\n- Time entries reference both `clientId` and `matterId` from shared collections\n- Invoices can be generated from time entries while maintaining relationships\n\nThis structure perfectly supports your law firm multi-app architecture where client/matter data is shared, but each app has its own specialized functionality and data requirements."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":9334,"cache_read_input_tokens":52789,"cache_creation":{"ephemeral_5m_input_tokens":9334,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSKBq7fBDnVM8oERGNwHo","type":"assistant","uuid":"6cc1e341-5c91-4109-8d8d-e6337f70e09d","timestamp":"2025-08-20T15:20:17.465Z"}
